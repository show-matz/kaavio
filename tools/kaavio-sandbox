#!/usr/bin/bash

KAAVIO="kaavio"	# kaavio のパス

# default value of parameter
DEFAULT_INFILE="./sandbox.lisp"
DEFAULT_OUTPUT_PREFIX="./sandbox"
DEFAULT_SCRIPT_SLEEP_SEC=1
DEFAULT_HTML_RELOAD_SEC=2

# データファイルのスケルトンを作成する関数
function create_skelton_file {
	FILE="$1"
	echo "(diagram (400 300)"       > ${FILE}
	echo "  (grid)"                >> ${FILE}
	echo "  ;; write code here..." >> ${FILE}
	echo ")"                       >> ${FILE}
}

function generate_errsvg {
	IN="$1"
	OUT="$2"
	echo "<?xml version='1.0' encoding='utf-8' ?>"   > ${OUT}
	echo "<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' baseProfile='full' xml:space='default' width='1400' height='800'>"  >> ${OUT}
	echo "<g text-anchor='start' font-family='monospace' font-size='10pt' fill='red'>" >> ${OUT}
	YPOS=20
	IFS_BKUP=$IFS
	IFS=$'\n'
	for LINE in `cat ${IN} | perl -pe 's/"/&quot;/g' | perl -pe 's/>/&gt;/g' | perl -pe 's/</&lt;/g' | perl -pe 's/&/&amp;/g'`
	do
		echo "<text x='10' y='${YPOS}'>${LINE}</text>" >> ${OUT}
		YPOS=$((YPOS + 20))
	done
	IFS=${IFS_BKUP}
	echo "</g>" >> ${OUT}
	echo "</svg>" >> ${OUT}
}

# SVG ファイルを作成する関数
function generate_svg {
	IN="$1"
	OUT="$2"
	TMP="$$.tmp"
	LOG="$$.log"
	${KAAVIO} ${IN}  >> ${TMP} 2> ${LOG}
	if [ ! -s ${LOG} ]; then
		mv -f ${TMP} ${OUT}
	else
		rm -f ${TMP}
		generate_errsvg ${LOG} ${OUT}
	fi
	rm -f ${LOG}
}

# HTML ファイルを作成する関数
function generate_html {
	IN="$1"
	OUT="$2"
	NOREFRESH="$3"
	TMP="$$.tmp"
	echo "<html>"   > ${TMP}
	echo "<head>"  >> ${TMP}
	echo "<meta charset='UTF-8'>" >> ${TMP}
	if [ -z "${NOREFRESH}" ]; then
		echo "<meta http-equiv='refresh' content='${HTML_RELOAD_SEC}; URL='>" >> ${TMP}
	fi
	echo "<title>kaavio sandbox</title>" >> ${TMP}
	echo "</head>" >> ${TMP}
	echo "<body>"  >> ${TMP}
	${KAAVIO} ${IN}  >> ${TMP} 2>&1
	echo "<pre style=\"font-family: 'Courier New', monospace, serif\">"   >> ${TMP}
	cat ${IN}      >> ${TMP}
	echo "</pre>"  >> ${TMP}
	echo "</body>" >> ${TMP}
	echo "</html>" >> ${TMP}
	mv -f ${TMP} ${OUT}
}

# Ctrl+C で終了する際の trap
function on_signal_interrupt( ){
	GENCMD="$1"
	INFILE="$2"
	OUTFILE="$3"
	${GENCMD} ${INFILE} ${OUTFILE} norefresh
	echo "Interrupted."
	exit
}


# コマンドラインパラメータの読み取り
GEN_CMD="generate_svg"
if [ "$1" == "--svg" ]; then
	GEN_CMD="generate_svg"
	shift
elif [ "$1" == "--html" ]; then
	GEN_CMD="generate_html"
	shift
fi
INFILE="$1"
OUTFILE="$2"
SCRIPT_SLEEP_SEC="$3"
HTML_RELOAD_SEC="$4"

# パラメータが省略されていればデフォルト値を使用
if [ -z "${INFILE}" ]; then
	INFILE="${DEFAULT_INFILE}"
fi
if [ -z "${OUTFILE}" ]; then
	OUTFILE="${DEFAULT_OUTPUT_PREFIX}.${GEN_CMD:9}"
fi
if [ -z "${SCRIPT_SLEEP_SEC}" ]; then
	SCRIPT_SLEEP_SEC="${DEFAULT_SCRIPT_SLEEP_SEC}"
fi
if [ -z "${HTML_RELOAD_SEC}" ]; then
	HTML_RELOAD_SEC="${DEFAULT_HTML_RELOAD_SEC}"
fi

# データファイルが存在しなければ作成する
if [ ! -e ${INFILE} ]; then
	create_skelton_file ${INFILE}
else
	touch ${INFILE}
fi

# Ctrl+C で終了する際の trap を登録
trap "on_signal_interrupt ${GEN_CMD} ${INFILE} ${OUTFILE}" 2

# コンソールに情報を出力
echo "mode        : ${GEN_CMD:9}"
echo "data file   : ${INFILE}"
echo "output file : ${OUTFILE}"
echo "type Ctrl-C to quit."

# 一定時間おきにループしてデータファイルが更新されたら kaavio 実行 ⇒ Ctrl+C で終了
while :
do
	if [ ${INFILE} -nt ${OUTFILE} ]; then
		#echo "generating..."
		${GEN_CMD} ${INFILE} ${OUTFILE}
	fi
	#echo "sleep..."
	sleep ${SCRIPT_SLEEP_SEC}
done

