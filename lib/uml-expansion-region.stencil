
(in-package :kaavio-user)

(load-stencil :uml-common-base)

(defparameter *uml-expansion-region-fill*      :white)
(defparameter *uml-expansion-region-stroke*    '(:color :black :dasharray (5 5)))
(defparameter *uml-expansion-region-corner-r*      10)
(defparameter *uml-expansion-region-filter*       nil)
(defparameter *uml-expansion-region-layer*        nil)

;;------------------------------------------------------------------------------
;;
;; class uml-expansion-region
;;
;;------------------------------------------------------------------------------
(defclass uml-expansion-region (kaavio:rectangle)
  ((stereotype :initform nil  :initarg  :stereotype)  ; (or nil uml-stereotype-info)
   (offset     :initform nil  :initarg  :offset)))    ; point

(defmethod initialize-instance :after ((obj uml-expansion-region) &rest initargs)
  (declare (ignore initargs))
  ;;(format t "initialize-instance :after called.~%")
  (with-slots (stereotype offset filter layer) obj
    (setf stereotype (and stereotype (make-uml-stereotype stereotype)))
    (unless offset
      (setf offset (make-point 0 0)))
    (setf filter (if (eq filter :none)
                     nil
                     (or filter *uml-expansion-region-filter* *default-filter*)))
    (setf layer  (if (eq layer :none)
                     nil
                     (or layer *uml-expansion-region-layer* *default-layer*))))
  obj)

(defmethod check ((obj uml-expansion-region) canvas dict)
  ;;(format t "check called.~%")
  (with-slots (stereotype offset) obj
    (check-object stereotype canvas dict :nullable t :class uml-stereotype-info)
    (unless (point-p offset)
      (throw-exception "offset is not point object.")))
  ;; this method must call super class' one.
  (call-next-method))


;;MEMO : use impelementation of shape...
;;(defmethod shape-connect-point ((region uml-expansion-region) type1 type2 arg) ...)

;;MEMO : use impelementation of group...
;;(defmethod group-get-canvas ((region uml-expansion-region)) ...)

;; override of entity::draw-entity
(defmethod draw-entity ((obj uml-expansion-region) writer)
  ;; draw rectangle
  (call-next-method)
  ;; draw stereotype ( if exists ).
  (with-slots (stereotype offset kaavio::clip-path) obj
    (when stereotype
      (let* ((canvas    (shape-get-subcanvas obj))
             (topleft   (canvas-topleft   canvas))
             (font      (or (slot-value stereotype 'font) *default-font*))
             (font-size (slot-value font 'kaavio::size)))
        (macrolet ((register-entity (entity)
                     `(check-and-draw-local-entity ,entity canvas writer)))
          (uml-stereotype-draw stereotype
                               (+ (point-x topleft) 5 (point-x offset))
                               (+ (point-y topleft) 5 (point-y offset) font-size)
                               :left
                               *default-font*
                               kaavio::clip-path
                               writer)))))
  nil)

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-expansion-region
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-expansion-region}} position width height ${KEY} pivot stereotype keyword offset corner-r fill stroke link layer filter id contents
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `width` ---- 幅を数値で指定します。
;;* `height` ---- 高さを数値で指定します。
;;* `pivot` ---- `position` で指定した基準点が図形要素のどこにくるように描画するかを指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `stereotype` ---- ステレオタイプを明示する場合はステレオタイプ情報を指定します。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `keyword` ---- キーワードを明示する場合はステレオタイプ情報を指定します。 `stereotype` が指定されている場合は無視されます。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `offset` ---- キーワードの表示位置を調整するためのオフセットを座標値で指定します。
;;* `corner-r` ---- 四隅の角の丸みの大きさを数値で指定します。デフォルト値は 10 です。
;;* `fill` ---- 内部の塗り潰しを指定します。
;;* `stroke` ---- 外枠を描画するストロークを指定します
;;* `link` ---- リンクにする場合、リンク先を指定します。
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;* `contents` ---- 内部をサブキャンバスとした描画をしたい場合、その内容を指定します。
;;
;;${DESCRIPTION}
;;
;;　UML アクティビティ図における拡張領域を描画します。スタイルを統一したい場合、
;;with-uml-expansion-region-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#アクティビティ図)
;;* [$$](#uml-expansion-region)
;;* with-uml-expansion-region-options マクロ
;;
;;${NOTES}
;;
;;　キーワードはデフォルト値で拡張領域の左上に表示されます。この位置を調整したい場合、
;;`:offset '(20 3)` といった要領で移動させたいオフセット値を指定してください。 
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-expansion-region (position width height &key pivot stereotype keyword offset
                                         corner-r fill stroke link layer filter id contents)
  (let* ((code `(register-entity
                     (make-instance 'uml-expansion-region
                                    :position ,position :pivot ,pivot
                                    :width ,width :height ,height
                                    :stereotype ,(or stereotype keyword) :offset ,offset
                                    :rx (or ,corner-r *uml-expansion-region-corner-r*)
                                    :ry (or ,corner-r *uml-expansion-region-corner-r*)
                                    :fill     (or ,fill *uml-expansion-region-fill*
                                                  *default-fill*   :white)
                                    :stroke   (or ,stroke *uml-expansion-region-stroke*
                                                  *default-stroke* :black)
                                    :clip-path kaavio:*current-clip-path*
                                    :link ,link :layer ,layer :filter ,filter :id ,id))))
    (if (null contents)
        code
        (let ((g-obj (gensym "OBJ")))
          `(let* ((,g-obj ,code)
                  (canvas (shape-get-subcanvas ,g-obj)))
             (declare (special canvas))
             ,@contents)))))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-expansion-region-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-expansion-region-options}} (${KEY} fill stroke corner-r filter layer) ${BODY} body
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-expansion-region マクロで描画される図形要素のデフォルトオプションを変更します。
;;キーワードパラメータ群の説明は uml-expansion-region マクロを参照してください。
;;
;;${SEE_ALSO}
;;
;;* uml-expansion-region マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-expansion-region-options ((&key (fill     nil fill-p)
                                                   (stroke   nil stroke-p)
                                                   (corner-r nil corner-r-p)
                                                   (filter   nil filter-p)
                                                   (layer    nil layer-p)) &rest body)
  (let ((bindings nil))
    (labels ((impl (arg-p binding)
               (when arg-p (push binding bindings))))
      (impl fill-p     `(*uml-expansion-region-fill*     (make-fill2   *uml-expansion-region-fill*   ,fill)))
      (impl stroke-p   `(*uml-expansion-region-stroke*   (make-stroke2 *uml-expansion-region-stroke* ,stroke)))
      (impl corner-r-p `(*uml-expansion-region-corner-r* ,corner-r))
      (impl filter-p   `(*uml-expansion-region-filter*   ,filter))
      (impl layer-p    `(*uml-expansion-region-layer*    ,layer)))
    `(let ,(nreverse bindings)
       ,@body)))
