
(in-package :kaavio-user)

(load-stencil :uml-keyword-info)

(defparameter *uml-expansion-region-font*         nil)
(defparameter *uml-expansion-region-fill*      :white)
(defparameter *uml-expansion-region-stroke*    '(:color :black :dasharray (5 5)))
(defparameter *uml-expansion-region-corner-r*      10)
(defparameter *uml-expansion-region-filter*       nil)
(defparameter *uml-expansion-region-layer*        nil)

;;------------------------------------------------------------------------------
;;
;; class uml-expansion-region
;;
;;------------------------------------------------------------------------------
(defclass uml-expansion-region (kaavio:rectangle)
  ((keyword :initform nil  :initarg  :keyword)     ; (or nil uml-keyword-info)
   (font    :initform nil  :initarg  :font)        ; (or nil font-info)
   (offset  :initform nil  :initarg  :offset)))    ; point

(defmethod initialize-instance :after ((obj uml-expansion-region) &rest initargs)
  (declare (ignore initargs))
  ;;(format t "initialize-instance :after called.~%")
  (with-slots (keyword font offset filter layer) obj
    (setf keyword (and keyword (make-uml-keyword keyword)))
    (unless offset
      (setf offset (make-point 0 0)))
    (setf filter (if (eq filter :none)
                     nil
                     (or filter *uml-expansion-region-filter* *default-filter*)))
    (setf font   (make-font (or font *uml-expansion-region-font* *default-font*)))
    (setf layer  (if (eq layer :none)
                     nil
                     (or layer *uml-expansion-region-layer* *default-layer*))))
  obj)

(defmethod check ((obj uml-expansion-region) canvas dict)
  ;;(format t "check called.~%")
  (with-slots (keyword font offset) obj
    (check-object keyword  canvas dict :nullable t :class uml-keyword-info)
    (check-object font     canvas dict :nullable t :class font-info)
    (unless (point-p offset)
      (throw-exception "offset is not point object.")))
  ;; this method must call super class' one.
  (call-next-method))


;;MEMO : use impelementation of shape...
;;(defmethod shape-connect-point ((region uml-expansion-region) type1 type2 arg) ...)

;;MEMO : use impelementation of group...
;;(defmethod group-get-canvas ((region uml-expansion-region)) ...)

;; override of entity::draw-entity
(defmethod draw-entity ((obj uml-expansion-region) writer)
  ;; draw rectangle
  (call-next-method)
  ;; draw keyword ( if exists ).
  (with-slots (keyword font offset kaavio::clip-path) obj
    (when keyword
      (let* ((canvas    (shape-get-subcanvas obj))
             (topleft   (canvas-topleft   canvas))
             (font-size (slot-value font 'kaavio::size)))
        (macrolet ((register-entity (entity)
                     `(check-and-draw-local-entity ,entity canvas writer)))
          (uml-keyword-draw keyword
                            (+ (point-x topleft) 5 (point-x offset))
                            (+ (point-y topleft) 5 (point-y offset) font-size)
                            :left
                            font
                            kaavio::clip-path
                            writer)))))
  nil)

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-expansion-region
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-expansion-region}} position width height ${KEY} pivot keyword font offset corner-r fill stroke link layer id contents
;;
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　${{TODO}{まだ記述されていません。}}
;;
;;${NO_SEE_ALSO}
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-expansion-region (position width height &key pivot keyword font offset
                                         corner-r fill stroke link layer id contents)
  (let* ((code `(register-entity
                     (make-instance 'uml-expansion-region
                                    :position ,position :pivot ,pivot
                                    :width ,width :height ,height
                                    :keyword ,keyword :font ,font :offset ,offset
                                    :rx (or ,corner-r *uml-expansion-region-corner-r*)
                                    :ry (or ,corner-r *uml-expansion-region-corner-r*)
                                    :fill     (or ,fill *uml-expansion-region-fill*
                                                  *default-fill*   :white)
                                    :stroke   (or ,stroke *uml-expansion-region-stroke*
                                                  *default-stroke* :black)
                                    :clip-path kaavio:*current-clip-path*
                                    :link ,link :layer ,layer :id ,id))))
    (if (null contents)
        code
        (let ((g-obj (gensym "OBJ")))
          `(let* ((,g-obj ,code)
                  (canvas (shape-get-subcanvas ,g-obj)))
             (declare (special canvas))
             ,@contents)))))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-expansion-region-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-expansion-region-options}} (${KEY} font fill stroke corner-r filter layer) ${BODY} body
;;
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　${{TODO}{まだ記述されていません。}}
;;
;;${NO_SEE_ALSO}
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-expansion-region-options ((&key font fill stroke
                                                   corner-r filter layer) &rest body)
  (labels ((impl (params acc)
             (if (null params)
                 acc
                 (let ((value  (car  params))
                       (symbol (cadr params)))
                   (impl (cddr params)
                         (if (null value)
                             acc
                             (push (list symbol value) acc)))))))
    (let ((lst (impl (list font     '*uml-expansion-region-font*
                           fill     '*uml-expansion-region-fill*
                           stroke   '*uml-expansion-region-stroke*
                           corner-r '*uml-expansion-region-corner-r*
                           filter   '*uml-expansion-region-filter*
                           layer    '*uml-expansion-region-layer*) nil)))
      `(let ,lst
         ,@body))))

