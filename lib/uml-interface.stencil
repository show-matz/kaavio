
(in-package :kaavio-user)

(load-stencil :uml-common-base)

(defun calculate-degrees (center points degree)
  (labels ((reverse-degree (sin cos)
             (when (< 1 (abs cos))
               (setf cos (round cos)))
             (let* ((RADIAN-UNIT (/ pi 180))
                    (acos        (/ (cl:acos cos) RADIAN-UNIT)))
               (round (if (<= 0 sin)
                          acos
                          (- 360 acos))))))
    (let ((pt (do ((pt points (cdr pt)))
                  ((null (cdr pt)) (car pt))))
          (half (/ degree 2)))
      (values (reverse-degree (math/sin3 center pt (- 360 half))
                              (math/cos3 center pt (- 360 half)))
              (reverse-degree (math/sin3 center pt half)
                              (math/cos3 center pt half))))))


;;------------------------------------------------------------------------------
;;
;; class uml-interface
;;
;;------------------------------------------------------------------------------
(defparameter *uml-interface-font*      nil)
(defparameter *uml-interface-fill*   :white)
(defparameter *uml-interface-stroke* :black)
(defparameter *uml-interface-radius*     10)
(defparameter *uml-interface-filter*    nil)
(defparameter *uml-interface-layer*     nil)

(defclass uml-interface (kaavio:circle)
  ((name :initform nil :initarg :name)))    ; (or nil kaavio:label-info)

(defmethod initialize-instance :after ((obj uml-interface) &rest initargs)
  (declare (ignore initargs))
  (with-slots (name) obj
    (setf name (and name (uml-make-label *uml-interface-font* name))))
  obj)

(defmethod check ((obj uml-interface) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (name) obj
    (check-object name canvas dict :nullable nil :class label-info))
  nil)

(defmethod entity-composition-p ((obj uml-interface))
  t)  

(defmethod post-draw ((obj uml-interface) writer)
  (with-slots (name kaavio::clip-path) obj
    (when name
      (draw-label name obj kaavio::clip-path writer)))
  (call-next-method)
;  (draw-canvas-frame (shape-get-subcanvas obj) writer)    ;for debug...
  nil)

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-interface
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-interface}} position name ${KEY} pivot fill stroke link filter layer id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `name` ---- インターフェース名をラベル形式で指定します。明示する必要が無い場合、 `nil` を指定してください。
;;* `pivot` ---- `position` で指定した基準点が図形要素のどこにくるように描画するかを指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `fill` ---- 内部の塗り潰しを指定します。
;;* `stroke` ---- 外枠を描画するストロークを指定します
;;* `link` ---- リンクにする場合、リンク先を指定します。
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;
;;${DESCRIPTION}
;;
;;　UML クラス図などで使用されるインターフェースを描画します。スタイルを統一したい場合、
;;with-uml-interface-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#クラス図)
;;* [$$](#uml-interface)
;;* [$$](#uml-interface-request)
;;* with-uml-interface-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-interface (position name &key pivot fill stroke link filter layer id)
  `(register-entity (make-instance 'uml-interface
                                   :position ,position :pivot ,pivot
                                   :radius *uml-interface-radius*
                                   :name ,name
                                   :fill   (or ,fill   *uml-interface-fill*)
                                   :stroke (or ,stroke *uml-interface-stroke*)
                                   :clip-path kaavio:*current-clip-path*
                                   :link ,link
                                   :filter (or ,filter *uml-interface-filter*)
                                   :layer  (or ,layer  *uml-interface-layer*)
                                   :id ,id)))
 
 
;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-interface-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-interface-options}} (${KEY} radius fill stroke filter layer) ${BODY} body
;;
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-interface マクロで描画される図形要素のデフォルトオプションを変更します。キーワード
;;パラメータ群の説明は uml-interface マクロを参照してください。
;;
;;${SEE_ALSO}
;;
;;* uml-interface マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-interface-options ((&key (font   nil font-p)
                                            (fill   nil fill-p)
                                            (stroke nil stroke-p)
                                            (radius nil radius-p)
                                            (filter nil filter-p)
                                            (layer  nil layer-p)) &rest body)
  (let ((bindings nil))
    (labels ((impl (arg-p binding)
               (when arg-p (push binding bindings))))
      (impl font-p   `(*uml-interface-font*   (make-font2   *uml-interface-font*   ,font)))
      (impl fill-p   `(*uml-interface-fill*   (make-fill2   *uml-interface-fill*   ,fill)))
      (impl stroke-p `(*uml-interface-stroke* (make-stroke2 *uml-interface-stroke* ,stroke)))
      (impl radius-p `(*uml-interface-radius* ,radius))
      (impl filter-p `(*uml-interface-filter* ,filter))
      (impl layer-p  `(*uml-interface-layer*  ,layer)))
    `(let ,(nreverse bindings)
       ,@body)))


;;------------------------------------------------------------------------------
;;
;; class uml-interface-request
;;
;;------------------------------------------------------------------------------
(defparameter *uml-interface-request-stroke*         :black) ;; stroke のデフォルト設定
(defparameter *uml-interface-request-filter*            nil) ;; filter のデフォルト設定
(defparameter *uml-interface-request-layer*             nil) ;; layer  のデフォルト設定
(defparameter *uml-interface-request-font*              nil) ;; name ラベルのデフォルトフォント
(defparameter *uml-interface-request-degree*            150) ;; ソケットの円弧の角度
(defparameter *uml-interface-request-dasharray*      '(3 3)) ;; 依存関係矢印の dasharray
(defparameter *uml-interface-request-arrow-size*    :medium) ;; 依存関係矢印のサイズ
(defparameter *uml-interface-request-length-threshold*   40) ;; 依存関係矢印の描画基準
(defparameter *uml-interface-request-max-dependency*     40) ;; 依存関係矢印の最大長



;; ((0 1) (2 3) (4 5) (6 7)) ->  tail (6 7) & copied ((4 5) (6 7)).
(defun get-last-2-points (points &optional (cnt nil))
  (if (null cnt)
      (let ((cnt (length points)))
        (unless (<= 2 cnt)
          (error "Invalid points list."))
        (get-last-2-points points cnt))
      (if (= cnt 2)
          (values (second points) (copy-tree points))
          (get-last-2-points (cdr points) (1- cnt)))))

;;returns 3 values
(defun fix-points (arrow-p radius points)
  (multiple-value-bind (tail last2) (get-last-2-points points)
    (let ((x   (point-x tail))
          (y   (point-y tail))
          (sin (apply #'math/sin2 last2))
          (cos (apply #'math/cos2 last2))
          (len (apply #'math/len2 last2)))
      (if (or (not arrow-p)
              (< len *uml-interface-request-length-threshold*))
          (progn
            (decf (point-x tail) (* radius cos))
            (decf (point-y tail) (* radius sin))
            (setf last2 nil))
          (let ((half (/ len 2)))
            (when (< *uml-interface-request-max-dependency* half)
              (setf half (- len *uml-interface-request-max-dependency*)))
            (setf x (+ (point-x (car last2)) (* half cos)))
            (setf y (+ (point-y (car last2)) (* half sin)))
            (setf (point-x tail) (- x (* radius cos)))
            (setf (point-y tail) (- y (* radius sin)))
            (setf (point-x (car last2)) (- x (* radius cos)))
            (setf (point-y (car last2)) (- y (* radius sin)))))
      (values points last2 (make-point x y :absolute)))))


(defclass uml-interface-request (kaavio:connector)
  ((arrow-p          :initform nil :initarg :arrow-p)    ; boolean value
   (name             :initform nil :initarg :name)       ; (or nil label-info)
   (dasharray        :initform nil :initarg :dasharray)  ; list of integers
   (pt-cache         :initform nil)                      ; point
   (canvas-cache     :initform nil)                      ; (or nil canvas)
   (points-cache     :initform nil)                      ; list
   (arrow-size-cache :initform nil)                      ; number
   (radius-cache     :initform nil)                      ; number
   (degree-cache     :initform nil)))                    ; number

(defmethod initialize-instance :after ((req uml-interface-request) &rest initargs)
  (declare (ignore initargs))
  (with-slots (kaavio::to arrow-p name dasharray 
                          arrow-size-cache radius-cache degree-cache) req
    (setf name (and (kaavio:point-p kaavio::to)
                    name
                    (uml-make-label *uml-interface-request-font* name)))
    (when (kaavio:point-p kaavio::to)
      (setf arrow-p nil))
    (setf dasharray        *uml-interface-request-dasharray*)
    (setf arrow-size-cache *uml-interface-request-arrow-size*)
    (setf radius-cache     *uml-interface-radius*)
    (setf degree-cache     *uml-interface-request-degree*))
  req)


(defmethod check ((req uml-interface-request) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (arrow-p name dasharray
                       pt-cache canvas-cache points-cache radius-cache) req
    (check-object name canvas dict :nullable t :class label-info)
    (check-member dasharray :nullable nil :types list)
    (setf canvas-cache (copy-canvas canvas))
    (let ((new-points nil))
      (multiple-value-setq (new-points points-cache pt-cache)
                                (fix-points arrow-p radius-cache
                                    (copy-list (slot-value req 'kaavio::points))))
      (let ((topleft (canvas-topleft canvas)))
        (setf pt-cache (point- pt-cache topleft))
        (when points-cache
          (setf (first  points-cache) (point- (first  points-cache) topleft))
          (setf (second points-cache) (point- (second points-cache) topleft))))
      (setf (slot-value req 'kaavio::points) new-points)))
  nil)

(defmethod entity-composition-p ((req uml-interface-request))
  (declare (ignore req))
  t)

(defmethod post-draw ((req uml-interface-request) writer)
  (with-slots (name dasharray canvas-cache points-cache
                    pt-cache degree-cache arrow-size-cache
                    radius-cache kaavio::stroke kaavio::clip-path kaavio::filter) req
    (let ((canvas canvas-cache))
      (declare (special canvas))
      (macrolet ((register-entity (entity)
                   `(check-and-draw-local-entity ,entity canvas writer)))
        (let ((*default-stroke* kaavio::stroke)
              (*default-filter* kaavio::filter)
              (*current-clip-path* kaavio::clip-path)
              (point (point+ (canvas-topleft canvas) pt-cache)))
          (when points-cache
            (line points-cache :stroke `(:dasharray ,dasharray)
                               :end1 nil
                               :end2 (list :type :arrow :size arrow-size-cache)))
          (multiple-value-bind (deg1 deg2)
              (calculate-degrees point (copy-list (slot-value req 'kaavio::points)) degree-cache)
            (when (<= 360 deg1) (decf deg1 360))
            (when (<= 360 deg2) (decf deg2 360))
            (arc (make-point (point-x pt-cache)
                             (point-y pt-cache))
                 radius-cache radius-cache 0 deg1 deg2))
          (when name
            (draw-label-with-point name (point-x point) (point-y point)
                                        0 1 kaavio::clip-path writer))))))
  (call-next-method))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-interface-request
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-interface-request}} from to ${KEY} arrow-p name style spacing stroke filter layer id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `from` ---- インターフェースを要求する側の図形要素の ID をキーワードで指定します。任意の座標を指定することも可能です。
;;* `to` ---- 要求されるインターフェースの ID をキーワードで指定します。任意の座標を指定することも可能です。
;;* `arrow-p` ---- 描画されるソケットから対象のインターフェースに依存関係の矢印を描画するか否かを真偽値で指定します。省略した場合のデフォルト値は nil です。
;;* `name` ---- 要求するインターフェースの名前をラベル形式で指定します。インターフェース側で明示してある場合は指定する必要はありません。
;;* `style` ---- 接続線のスタイルを指定します。詳細は [$@ 節](#コネクタ)を参照してください。
;;* `spacing` ---- 接続線が折れ曲がる場合の調整を指定します。詳細は [$@ 節](#コネクタ)を参照してください。
;;* `stroke` ---- 線を描画するストロークを指定します
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;
;;${DESCRIPTION}
;;
;;　UML クラス図などで使用されるインターフェース要求を描画します。 `to` には uml-interface で
;;描画されたインターフェースの ID を指定することが想定されています。スタイルを統一したい場合、
;;with-uml-interface-request-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#クラス図)
;;* [$$](#uml-interface)
;;* [$$](#uml-interface-request)
;;* with-uml-interface-request-options マクロ
;;
;;${NOTES}
;;
;;　このマクロは２種類の使い方が想定されています。ひとつは uml-interface によるインターフェース
;;アイコンに接続する方法で、この場合は `to` パラメータにインターフェースの ID をキーワードで
;;指定します。この場合、名前はインターフェース側で明示してあることが想定されるため、 `name` 
;;パラメータは無視されます。
;;
;;　もうひとつはソケットを単独で表記する方法で、この場合は `to` パラメータにソケットを描画する
;;位置を座標値で指定します。この場合、依存関係の矢印を使う意味は無いため、 `arrow-p` は無視され
;;ます。
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-interface-request (from to &key arrow-p name style spacing stroke filter layer id)
  `(register-entity (make-instance 'uml-interface-request
                                   :from ,from :to ,to
                                   :arrow-p ,arrow-p :name ,name
                                   :style ,style :spacing ,spacing
                                   :stroke (or ,stroke
                                               *uml-interface-request-stroke*
                                               *default-stroke* :black)
                                   :clip-path *current-clip-path*
                                   :end1 nil :end2 nil
                                   :filter (or ,filter *uml-interface-request-filter*)
                                   :layer  (or ,layer  *uml-interface-request-layer*)
                                   :id ,id)))

;;MEMO : uml-interface-socket は廃止され uml-interface-request に統合されたが、
;;       互換性のために uml-interface-request への変換マクロが残されている
(defmacro uml-interface-socket (position from name &key style spacing stroke filter layer id)
  `(uml-interface-request ,from ,position :arrow-p nil :name ,name
                                          :style ,style :spacing ,spacing
                                          :stroke ,stroke :filter ,filter :layer ,layer :id ,id))

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-interface-request-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-interface-request-options}} (${KEY} stroke filter layer font degree dasharray arrow-size) ${BODY} body
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-interface-request マクロで描画される図形要素のデフォルトオプションを変更します。キーワード
;;パラメータ群の説明は uml-interface-request マクロを参照してください。ただし、以下はこのマクロで
;;のみ指定可能です。
;;
;;* `font` ---- `name` で指定するラベルのフォント指定を省略した場合に使用されるデフォルト設定です。
;;* `degree` ---- ソケットの円弧の角度です。
;;* `dasharray` ---- 依存関係矢印を描画する場合の点線を指定する dasharray パラメータです。
;;* `arrow-size` ---- 依存関係矢印を描画する場合の矢印のサイズです。
;;
;;${SEE_ALSO}
;;
;;* uml-interface-request マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-interface-request-options ((&key (stroke     nil stroke-p)
                                                    (filter     nil filter-p)
                                                    (layer      nil layer-p)
                                                    (font       nil font-p)
                                                    (degree     nil degree-p)
                                                    (dasharray  nil dasharray-p) 
                                                    (arrow-size nil arrow-size-p)) &rest body)
  ;;MEMO : 現状では、以下２つはユーザーが変更する方法を提供していない。
  ;;
  ;;    - *uml-interface-request-length-threshold*
  ;;    - *uml-interface-request-max-dependency*
  ;;
  (let ((bindings nil))
    (labels ((impl (arg-p binding)
               (when arg-p (push binding bindings))))
      (impl stroke-p     `(*uml-interface-request-stroke*
                             (make-stroke2 *uml-interface-request-stroke* ,stroke)))
      (impl filter-p     `(*uml-interface-request-filter*     ,filter))
      (impl layer-p      `(*uml-interface-request-layer*      ,layer))
      (impl font-p       `(*uml-interface-request-font*       ,font))
      (impl degree-p     `(*uml-interface-request-degree*     ,degree))
      (impl dasharray-p  `(*uml-interface-request-dasharray*  ,dasharray))
      (impl arrow-size-p `(*uml-interface-request-arrow-size* ,arrow-size)))
    `(let ,(nreverse bindings)
       ,@body)))
