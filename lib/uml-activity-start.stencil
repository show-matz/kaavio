(in-package :kaavio-user)

(defparameter *uml-activity-start-radius*     10)
(defparameter *uml-activity-start-fill*   :black)
(defparameter *uml-activity-start-filter*    nil)
(defparameter *uml-activity-start-layer*     nil)

;;------------------------------------------------------------------------------
;;
;; class uml-activity-start
;;
;;------------------------------------------------------------------------------
(defclass uml-activity-start (kaavio:circle) ())


(defmethod initialize-instance :after ((obj uml-activity-start) &rest initargs)
  (declare (ignore initargs))
  ;;(format t "initialize-instance :after called.~%")
  (with-slots (filter layer) obj
    (setf filter  (if (eq filter :none)
                      nil
                      (or filter *uml-activity-start-filter* *default-filter*)))
    (setf layer  (if (eq layer :none)
                     nil
                     (or layer *uml-activity-start-layer* *default-layer*))))
  obj)


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-activity-start
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-activity-start}} position ${KEY} radius pivot fill link layer filter id
;;
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　${{TODO}{まだ記述されていません。}}
;;
;;${NO_SEE_ALSO}
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-activity-start (position &key radius pivot fill link layer filter id)
  `(register-entity (make-instance 'uml-activity-start
                                   :position ,position :pivot ,pivot
                                   :radius (or ,radius *uml-activity-start-radius*)
                                   :fill   (or ,fill   *uml-activity-start-fill* *default-fill*)
                                   :clip-path kaavio:*current-clip-path*
                                   :stroke :none :link ,link :layer ,layer :filter ,filter :id ,id)))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-activity-start-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-activity-start-options}} (${KEY} radius fill filter layer) ${BODY} body
;;
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　${{TODO}{まだ記述されていません。}}
;;
;;${NO_SEE_ALSO}
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-activity-start-options ((&key radius fill filter layer) &rest body)
  (labels ((impl (params acc)
             (if (null params)
                 acc
                 (let ((value  (car  params))
                       (symbol (cadr params)))
                   (impl (cddr params)
                         (if (null value)
                             acc
                             (push (list symbol value) acc)))))))
    (let ((lst (impl (list radius   '*uml-activity-start-radius*
                           fill     '*uml-activity-start-fill*
                           filter   '*uml-activity-start-filter*
                           layer    '*uml-activity-start-layer*) nil)))
      `(let ,lst
         ,@body))))
