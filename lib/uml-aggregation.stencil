
(in-package :kaavio-user)

(load-stencil :uml-association)

;;------------------------------------------------------------------------------
;;
;; class uml-aggregation
;;
;;------------------------------------------------------------------------------
(defclass uml-aggregation (uml-association) ())

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-aggregation
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-aggregation}} from to ${KEY} arrow keyword name style spacing role1 mult1 role2 mult2 layer id
;;
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　${{TODO}{まだ記述されていません。}}
;;
;;${NO_SEE_ALSO}
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-aggregation (from to &key arrow keyword name style spacing role1 mult1 role2 mult2 layer id)
  (let ((g-kwd  (gensym "KEYWORD"))
        (g-name (gensym "NAME")))
    `(let ((,g-kwd  ,keyword)
           (,g-name ,name))
       (register-entity (make-instance 'uml-aggregation
                                       :from ,from :to ,to
                                       :keyword ,g-kwd :style ,style :spacing ,spacing
                                       :name ,g-name
                                       :label (and (or ,g-kwd ,g-name)
                                                   #'uml-connection-draw-label)
                                       :stroke (make-stroke :dasharray nil :base *default-stroke*)
                                       :clip-path *current-clip-path*
                                       :end1 '(:type :diamond :fill :white)
                                       :end2 (and ,arrow :arrow)
                                       :role1 ,role1 :role2 ,role2
                                       :mult1 ,mult1 :mult2 ,mult2 :layer ,layer :id ,id)))))

