(in-package :kaavio-user)

(defparameter *uml-activity-final-radius*       15)
(defparameter *uml-activity-final-ratio*       0.6)
(defparameter *uml-activity-final-fill*     :white)
(defparameter *uml-activity-final-stroke*   :black)
(defparameter *uml-activity-final-filter*      nil)
(defparameter *uml-activity-final-layer*       nil)

;;------------------------------------------------------------------------------
;;
;; class uml-activity-final
;;
;;------------------------------------------------------------------------------
(defclass uml-activity-final (kaavio:circle)
  ((ratio :initform 0 :initarg :ratio)))    ; number


(defmethod initialize-instance :after ((obj uml-activity-final) &rest initargs)
  (declare (ignore initargs))
  ;;(format t "initialize-instance :after called.~%")
  (with-slots (filter layer) obj
    (setf filter  (if (eq filter :none)
                      nil
                      (or filter *uml-activity-final-filter* *default-filter*)))
    (setf layer  (if (eq layer :none)
                     nil
                     (or layer *uml-activity-final-layer* *default-layer*))))
  obj)

(defmethod check ((obj uml-activity-final) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (ratio) obj
    (check-member ratio :nullable nil :types number))
  nil)

(defmethod post-draw ((obj uml-activity-final) writer)
  (with-slots (ratio kaavio::clip-path) obj
    (let* ((canvas (shape-get-subcanvas obj))
           (center (/ (canvas-width canvas) 2))
           (radius (* center ratio))
           (fill   (slot-value (slot-value obj 'kaavio::stroke) 'kaavio::color))
           (kaavio:*current-clip-path* kaavio::clip-path))
      (macrolet ((register-entity (entity)
                   `(check-and-draw-local-entity ,entity canvas writer)))
        (circle (make-point center center) radius :fill fill :stroke :none))))
  (call-next-method)
;  (draw-canvas-frame (shape-get-subcanvas obj) writer)    ;for debug...
  nil)


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-activity-final
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-activity-final}} position ${KEY} radius ratio pivot fill stroke link layer filter id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `radius` ---- 終了アクションの半径を数値で指定します。省略した場合のデフォルト値は 15 です。
;;* `ratio` ---- 内部の（塗り潰される）円の半径を `radius` に対する比で指定します。省略した場合のデフォルト値は 0.6 です。
;;* `pivot` ---- `position` で指定した基準点が図形要素のどこにくるように描画するかを指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `fill` ---- 外側の円と内側の円の間を塗り潰す色を指定します。省略した場合のデフォルト値は `:white` です。
;;* `stroke` ---- 外側の円を描画するストロークを指定します。内側の（塗り潰される）円の色としても使用されます。省略した場合のデフォルト値は `:black` です。
;;* `link` ---- リンクにする場合、リンク先を指定します。
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;
;;${DESCRIPTION}
;;
;;　UML アクティビティ図における終了アクションを描画します。スタイルを統一したい場合、
;;with-uml-activity-final-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#アクティビティ図)
;;* [$$](#uml-activity-final)
;;* with-uml-activity-final-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-activity-final (position &key radius ratio pivot fill stroke link layer filter id)
  `(register-entity (make-instance 'uml-activity-final
                                   :position ,position :pivot ,pivot
                                   :radius (or ,radius *uml-activity-final-radius*)
                                   :ratio  (or ,ratio  *uml-activity-final-ratio*)
                                   :fill   (or ,fill   *uml-activity-final-fill*   *default-fill*)
                                   :stroke (or ,stroke *uml-activity-final-stroke* *default-stroke*)
                                   :clip-path kaavio:*current-clip-path*
                                   :link ,link :layer ,layer :filter ,filter :id ,id)))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-activity-final-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-activity-final-options}} (${KEY} radius ratio fill stroke filter layer) ${BODY} body
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-activity-final マクロで描画される図形要素のデフォルトオプションを変更します。
;;キーワードパラメータ群の説明は uml-activity-final マクロを参照してください。
;;
;;${SEE_ALSO}
;;
;;* uml-activity-final マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-activity-final-options ((&key radius ratio
                                                 fill stroke filter layer) &rest body)
  (labels ((impl (params acc)
             (if (null params)
                 acc
                 (let ((value  (car  params))
                       (symbol (cadr params)))
                   (impl (cddr params)
                         (if (null value)
                             acc
                             (push (list symbol value) acc)))))))
    (let ((lst (impl (list radius   '*uml-activity-final-radius*
                           ratio    '*uml-activity-final-ratio*
                           fill     '*uml-activity-final-fill*
                           stroke   '*uml-activity-final-stroke*
                           filter   '*uml-activity-final-filter*
                           layer    '*uml-activity-final-layer*) nil)))
      `(let ,lst
         ,@body))))

