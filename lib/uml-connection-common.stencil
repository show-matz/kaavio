
(in-package :kaavio-user)

(load-stencil :uml-keyword-info)

(defun uml-connection-draw-label (connection x y sin cos writer)
  (with-slots (name keyword) connection
	(labels ((calc-width-and-height ()
			   (let* ((width   0)
					  (height  0)
					  (lines   nil)
					  (offset  (if name (slot-value name 'kaavio::offset) '(0 0)))
					  (k-font  (and keyword (slot-value keyword 'font)))
					  (k-size  (if  k-font  (slot-value k-font  'kaavio::size) 0))
					  (n-font  (and name    (slot-value name    'kaavio::font)))
					  (n-size  (if  n-font  (slot-value n-font  'kaavio::size) 0))
					  (spacing (if  n-font  (slot-value n-font  'kaavio::line-spacing) 0)))
				 (when keyword
				   (multiple-value-setq (width height)
										(font-calc-textarea k-font
															(uml-keyword-to-string keyword))))
				 (when name
				   (let ((text (fix-name (slot-value name 'kaavio::text))))
					 (setf lines (kaavio::string/split text #\newline))
					 (multiple-value-bind (w h) (font-calc-textarea n-font text)
					   (setf width (max width w))
					   (incf height spacing)
					   (incf height h))))
				 (values width height offset lines k-size n-font n-size spacing))))
	  (multiple-value-bind (width height offset lines
							kwd-size name-font name-size spacing) (calc-width-and-height)
		(let (;(x (+ x (* sin height)))
			  (y (- y (* cos height))))
		  (decf y (/ height 2))
		  (when (< 0 sin) (incf x (/ width 2)))
		  (when (< sin 0) (decf x (/ width 2)))
		  (when keyword
			(incf y kwd-size)
			(uml-keyword-draw keyword (+ x (point-x offset))
									  (+ y (point-y offset)) :center writer)
			(incf y spacing))
		  (when name
			(let ((font-property (to-property-strings name-font)))
			  (dolist (line lines)
				(incf y name-size)
				(write-text-tag (+ x (point-x offset))
								(+ y (point-y offset))
								"middle" line writer :font font-property)
				(incf y spacing)))))))))

