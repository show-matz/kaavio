
(in-package :kaavio-user)

(load-stencil :uml-stereotype-info)


;;MEMO : 以下の２関数がこの uml-connection-draw-label に酷似している。共通化が可能なはずだが未着手。
;;    * uml-flow-draw-spec
;;    * uml-transition-draw-spec
(defun uml-connection-draw-label (connection x y sin cos clip-path writer)
  (with-slots (name stereotype) connection
    (labels ((calc-width-and-height ()
               (let* ((width   0)
                      (height  0)
                      (lines   nil)
                      (offset  (if name (slot-value name 'kaavio::offset) '(0 0)))
                      (s-font  (and stereotype (slot-value stereotype   'font)))
                      (n-font  (and name       (slot-value name 'kaavio::font)))
                      (n-size  (if name (slot-value n-font 'kaavio::size) 0))
                      (spacing (if name (slot-value n-font 'kaavio::line-spacing) 0)))
                 (when stereotype
                   (multiple-value-setq (width height)
                                        (font-calc-textarea s-font
                                                            (uml-stereotype-to-string stereotype))))
                 (when name
                   (let ((text (fix-name (slot-value name 'kaavio::text))))
                     (setf lines (kaavio::string/split text #\newline))
                     (multiple-value-bind (w h) (font-calc-textarea n-font text)
                       (setf width (max width w))
                       (incf height spacing)
                       (incf height h))))
                 (values width height offset lines s-font n-font n-size spacing))))
      (multiple-value-bind (width height offset lines
                            stype-font name-font name-size spacing) (calc-width-and-height)
        (let (;(x (+ x (* sin height)))
              (y (- y (* cos height))))
          (decf y (/ height 2))
          (when (< 0 sin) (incf x (/ width 2)))
          (when (< sin 0) (decf x (/ width 2)))
          (when stereotype
            (incf y (slot-value stype-font 'kaavio::size))
            (uml-stereotype-draw stereotype (+ x (point-x offset))
                                            (+ y (point-y offset))
                                            :center
                                            stype-font
                                            clip-path
                                            writer)
            (incf y spacing))
          (when name
            (let ((font-property (to-property-strings name-font)))
              (dolist (line lines)
                (incf y name-size)
                (write-text-tag (+ x (point-x offset))
                                (+ y (point-y offset))
                                line writer :align :center
                                :font font-property :clip-path clip-path)
                (incf y spacing)))))))))

