
(in-package :kaavio-user)

(load-stencil :uml-keyword-info)

(defparameter *uml-component-font*          nil)
(defparameter *uml-component-fill*       :white)
(defparameter *uml-component-stroke*     :black)
(defparameter *uml-component-width*         100)
(defparameter *uml-component-height*         60)
(defparameter *uml-component-iconsize*       20)
(defparameter *uml-component-iconoffset*      5)


;;------------------------------------------------------------------------------
;;
;; class uml-component
;;
;;------------------------------------------------------------------------------
(defclass uml-component (kaavio:group)
  ((name        :initform nil :initarg :name)           ; (or string keyword)
   (keyword     :initform nil :initarg :keyword)        ; (or nil uml-keyword-info)
   (contents-p  :initform nil :initarg :contents-p)     ; boolean
   (font        :initform nil :initarg :font)           ; (or nil font-info)
   (fill        :initform nil :initarg :fill)           ; (or nil fill-info)
   (stroke      :initform nil :initarg :stroke)         ; (or nil stroke-info)
   (iconsize    :initform   0 :initarg :iconsize)       ; number
   (iconoffset  :initform   0 :initarg :iconoffset)))   ; number

(defmethod initialize-instance :after ((cmp uml-component) &rest initargs)
  (declare (ignore initargs))
  (with-slots (keyword font fill stroke) cmp
    (setf keyword (and keyword (make-uml-keyword keyword)))
    (setf font    (make-font   (or font   *uml-component-font*   *default-font*  )))
    (setf fill    (make-fill   (or fill   *uml-component-fill*   *default-fill*  )))
    (setf stroke  (make-stroke (or stroke *uml-component-stroke* *default-stroke*))))
  cmp)

(defmethod check ((cmp uml-component) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (name keyword font fill stroke iconsize iconoffset) cmp 
    (check-member name     :nullable nil :types (or string keyword))
    (check-object keyword  canvas dict :nullable t :class uml-keyword-info)
    (check-object font     canvas dict :nullable t :class   font-info)
    (check-object fill     canvas dict :nullable t :class   fill-info)
    (check-object stroke   canvas dict :nullable t :class stroke-info)
    (check-member iconsize   :nullable t :types number)
    (check-member iconoffset :nullable t :types number))
  nil)

;;MEMO : use impelementation of group...
;;(defmethod group-get-canvas ((cmp uml-component)) ...)

(defmethod shape-get-subcanvas ((cmp uml-component))
  (make-canvas (attribute-topleft cmp)
               (attribute-width   cmp)
               (attribute-height  cmp)))

;; override of group::draw-group
(defmethod draw-group ((cmp uml-component) writer)
  (let ((canvas (group-get-canvas cmp)))
    (with-slots (name keyword contents-p
                      font fill stroke iconsize iconoffset) cmp
      (let* ((width     (canvas-width  canvas))
             (height    (canvas-height canvas))
             (x         (/ width  2))
             (y         (/ height 2))
             (font-size (slot-value font 'kaavio::size))
             (spacing   (slot-value font 'kaavio::line-spacing)))
        (macrolet ((register-entity (entity)
                     `(check-and-draw-local-entity ,entity canvas writer)))
          (let ((*default-font*   font)
                (*default-fill*   fill)
                (*default-stroke* stroke))
            (rectangle (make-point x y) width height)
            (let ((size   iconsize)
                  (offset iconoffset))
                    ;;draw component icon.
              (rectangle (make-point (- width (/ size 2) offset)
                                     (+ (/ size 2) offset)) size size)
              (rectangle (make-point (- width size offset)
                                     (- (+ (/ size 2) offset) (/ size 5))) (* size 0.8) (/ size 4))
              (rectangle (make-point (- width size offset)
                                     (+ (+ (/ size 2) offset) (/ size 5))) (* size 0.8) (/ size 4))))
          (let ((name (fix-name name t))
                (x    (/ width 2))
                (y    (if contents-p
                          (+ spacing font-size)
                          (/ height 2))))
            (if (null keyword)
                (incf y (/ font-size 2))
                (progn
                  (uml-keyword-draw keyword
                                    (+ (canvas-left canvas) x)
                                    (+ (canvas-top  canvas) y) :center font writer)
                  (incf y font-size)))
            (text (make-point x y) name :align :center))))))
  nil)

;;for debug...
;(defmethod post-draw ((cmp uml-component) writer)
;  (call-next-method)
;  (draw-canvas-frame (group-get-canvas #|shape-get-subcanvas|# cmp) writer)
;  nil)
 


;;------------------------------------------------------------------------------
;;
;; macro uml-component
;;
;;------------------------------------------------------------------------------
(defmacro uml-component (position name &key pivot keyword width height
                                     font fill stroke link layer id contents)
  (let* ((contents-p (not (null contents)))
         (code `(register-entity (make-instance 'uml-component
                                               :position ,position :pivot ,pivot
                                               :width  (or ,width  *uml-component-width*)
                                               :height (or ,height *uml-component-height*)
                                               :name ,name :keyword ,keyword
                                               :contents-p ,contents-p
                                               :font ,font :fill ,fill :stroke ,stroke
                                               :iconsize   *uml-component-iconsize*
                                               :iconoffset *uml-component-iconoffset*
                                               :link ,link :layer ,layer :id ,id))))
    (if (null contents)
        code
        (let ((g-obj (gensym "OBJ")))
          `(let* ((,g-obj ,code)
                  (canvas (shape-get-subcanvas ,g-obj)))
             (declare (special canvas))
             ,@contents)))))

