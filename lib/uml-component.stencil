
(in-package :kaavio-user)

(load-stencil :uml-common-base)
(load-stencil :uml-icon-setting)

(defparameter *uml-component-font*           nil)
(defparameter *uml-component-fill*        :white)
(defparameter *uml-component-stroke*      :black)
(defparameter *uml-component-width*          100)
(defparameter *uml-component-height*          50)
(defparameter *uml-component-margin*          10)
(defparameter *uml-component-filter*         nil)
(defparameter *uml-component-layer*          nil)
(defparameter *uml-component-icon-setting* (make-uml-icon-setting :fill   :white
                                                                  :stroke :black
                                                                  :size   14
                                                                  :pivot  :TR
                                                                  :offset '(-15 15)))


;;------------------------------------------------------------------------------
;;
;; class uml-component
;;
;;------------------------------------------------------------------------------
(defclass uml-component (kaavio:text-shape)
  ((stereotype  :initform nil :initarg :stereotype)     ; (or nil uml-stereotype-info)
   (contents-p  :initform nil :initarg :contents-p)     ; boolean
   (filter      :initform nil :initarg :filter)         ; (or nil keyword)
   (icon        :initform nil :initarg :icon)))         ; uml-icon-setting

(defmethod initialize-instance :after ((obj uml-component) &rest initargs)
  (declare (ignore initargs))
  ;;(format t "initialize-instance :after called.~%")
  (with-slots (stereotype filter icon layer) obj
    (setf stereotype (and stereotype (make-uml-stereotype stereotype)))
    (setf filter  (if (eq filter :none)
                      nil
                      (or filter *uml-component-filter* *default-filter*)))
    (setf icon   (make-uml-icon-setting icon))
    (setf layer  (if (eq layer :none)
                     nil
                     (or layer *uml-component-layer* *default-layer*))))
  obj)

(defmethod check ((obj uml-component) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  ;;(format t "check called.~%")
  (with-slots (stereotype filter icon) obj 
    (check-object stereotype  canvas dict :nullable t :class uml-stereotype-info)
    (check-member filter      :nullable t   :types keyword)
    (check-object icon        canvas dict :nullable nil :class uml-icon-setting)))

(defmethod shape-connect-point ((component uml-component) type1 type2 arg)
  (rectangle-connect-point (attribute-center component)
                           (attribute-width  component)
                           (attribute-height component) type1 type2 arg))

;;MEMO : use impelementation of group...
;;(defmethod group-get-canvas ((obj uml-component)) ...)

;; override of group::draw-group
(defmethod draw-group ((obj uml-component) writer)
  (let ((canvas (group-get-canvas obj)))
    (let ((width  (canvas-width  canvas))
          (height (canvas-height canvas)))
      (macrolet ((register-entity (entity)
                   `(check-and-draw-local-entity ,entity canvas writer)))
        (with-slots (stereotype filter icon
                      (text kaavio::text) (font kaavio::font) (margin kaavio::margin)
                      (fill kaavio::fill) (stroke kaavio::stroke) (clip-path kaavio::clip-path)) obj
          (let ((*current-clip-path* clip-path))
            ;; draw note body
            (writer-write writer "<g " (write-when filter "filter='url(#" it ")' ") ">")
            (writer-incr-level writer)
            ;;
            (rectangle (make-point (/ width 2) (/ height 2)) width height :stroke stroke :fill fill)
            ;;draw component icon.
            (with-slots (fill stroke size pivot offset) icon
              (let ((topleft (uml-icon-setting-decide-topleft width height pivot size offset))
                    (kaavio:*default-fill* fill)
                    (kaavio:*default-stroke* stroke))
                (rectangle (xy+ topleft (/ size 2) (/ size 2)) size size)
                (rectangle (y+  topleft (- (/ size 2) (/ size 5))) (* size 0.75) (/ size 4))
                (rectangle (y+  topleft (+ (/ size 2) (/ size 5))) (* size 0.75) (/ size 4))))
            ;; draw text
            (let ((cv (uml-draw-textarea obj stereotype writer)))
              (declare (ignorable cv))
;              (rect (canvas-center cv)
;                    (canvas-width cv) (canvas-height cv)
;                    :fill '(:color :red :opacity 0.1) :stroke :red)
              )
            (writer-decr-level writer)
            (writer-write writer "</g>"))))))
  nil)


;;for debug...
;(defmethod post-draw ((obj uml-component) writer)
;  (call-next-method)
;  (draw-canvas-frame (group-get-canvas #|shape-get-subcanvas|# obj) writer)
;  nil)
 

(defmethod text-shape-calc-size ((obj uml-component))
  ;;(format t "text-shape-calc-size called.~%")
  (multiple-value-bind (width height) (call-next-method)
    (with-slots (stereotype contents-p (font kaavio::font) (margin kaavio::margin)) obj
      ;; MEMO: 縦方向の margin は上記 call-next-method の結果に含まれている
      ;(incf height (* margin 2))
      ;; stereotype (if exists).
      (when stereotype
        (let ((font (or (slot-value stereotype 'font) font)))
          (multiple-value-bind (w h)
                (font-calc-textarea font (uml-stereotype-to-string stereotype))
            (setf width (cl:max width (+ w (* margin 2))))
            (incf height h)))))
    (values (cl:max width  *uml-component-width*)
            (cl:max height *uml-component-height*))))

;;MEMO : 下記 text-shape-paragraph-area / shape-get-subcanvas は contents 有無によって
;;       どちらがどちらに依存するかが変わる。気持ち悪いかもしれないが、動作する。

;;MEMO : uml-component の paragraph-area は以下のルール
;;  * contents 無しの場合：サブキャンバスと同じ
;;  * contents ありの場合：キーワード込みの textarea を計算し、margin を上下に足す。
(defmethod text-shape-paragraph-area ((obj uml-component))
  ;;(format t "text-shape-paragraph-area called.~%")
  (with-slots (stereotype contents-p
                 (text kaavio::text) (font kaavio::font) (margin kaavio::margin)) obj
    (if (not contents-p)
        (shape-get-subcanvas obj)
        (multiple-value-bind (w height) (uml-calc-textarea font text stereotype)
          (declare (ignore w))
          (incf height (* margin 2))
          (make-canvas (attribute-topleft obj)
                       (attribute-width   obj) height)))))

;;MEMO : uml-component のサブキャンバスは以下のルール
;;  * contents 無しの場合：shape と同じ
;;  * contents ありの場合：上記から paragraph-area を除いたもの
(defmethod shape-get-subcanvas ((obj uml-component))
  ;;(format t "shape-get-subcanvas called.~%")
  (with-slots (contents-p) obj
    (let ((canvas (make-canvas (attribute-topleft obj)
                               (attribute-width   obj)
                               (attribute-height  obj))))
      (if (not contents-p)
          canvas
          (let ((area (text-shape-paragraph-area obj)))
            (incf (canvas-top    canvas) (canvas-height area))
            (decf (canvas-height canvas) (canvas-height area))
            canvas)))))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-component
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-component}} position name ${KEY} pivot stereotype keyword width height font fill stroke icon margin link layer filter id contents
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `name` ---- コンポーネントの名前を文字列で指定します。
;;* `pivot` ---- `position` で指定した基準点が図形要素のどこにくるように描画するかを指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `stereotype` ---- ステレオタイプを明示する場合はステレオタイプ情報を指定します。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `keyword` ---- キーワードを明示する場合はステレオタイプ情報を指定します。 `stereotype` が指定されている場合は無視されます。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `width` ---- 幅を自動決定せず、明示的に指定したい場合に数値で指定します。
;;* `height` ---- 高さを自動決定せず、明示的に指定したい場合に数値で指定します。
;;* `font` ---- フォントを指定します。
;;* `fill` ---- 内部の塗り潰しを指定します。
;;* `stroke` ---- 外枠を描画するストロークを指定します
;;* `icon` ---- アイコンの描画設定を変更する場合は指定します。 [$@ 節](#function make-uml-icon-setting) を参照してください。
;;* `margin` ---- テキストの余白を指定します。幅や高さを明示的に指定した場合は無視されます。
;;* `link` ---- リンクにする場合、リンク先を指定します。
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;* `contents` ---- 内部をサブキャンバスとした描画をしたい場合、その内容を指定します。 `:contents t` とすることも可能です。詳細は後述します。
;;
;;${DESCRIPTION}
;;
;;　UML コンポーネント図におけるコンポーネントを描画します。スタイルを統一したい場合、
;;with-uml-component-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#コンポーネント図)
;;* [$$](#uml-component)
;;* with-uml-component-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-component (position name &key pivot stereotype keyword width height
                                            font fill stroke icon margin link layer filter id contents)
  (let* ((contents-p (not (null contents)))
         (code `(register-entity
                     (make-instance 'uml-component
                                    :position ,position :pivot ,pivot 
                                    :width ,width :height ,height
                                    :text ,name :stereotype ,(or stereotype keyword)
                                    :contents-p ,contents-p
                                    :margin   (or ,margin   *uml-component-margin*)
                                    :font     (or ,font *uml-component-font*  *default-font*)
                                    :fill     (or ,fill *uml-component-fill*
                                                  *default-fill*   :white)
                                    :stroke   (or ,stroke *uml-component-stroke*
                                                  *default-stroke* :black)
                                    :clip-path kaavio:*current-clip-path*
                                    :icon     (or ,icon *uml-component-icon-setting*)
                                    :link ,link :layer ,layer :filter ,filter :id ,id))))
    (if (or (null contents)
            (not (listp contents)))
        code
        (let ((g-obj (gensym "OBJ")))
          `(let* ((,g-obj ,code)
                  (canvas (shape-get-subcanvas ,g-obj)))
             (declare (special canvas))
             ,@contents)))))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-component-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-component-options}} (${KEY} font fill stroke width height icon margin filter layer) ${BODY} body
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-component マクロで描画される図形要素のデフォルトオプションを変更します。
;;キーワードパラメータ群の説明は uml-component マクロを参照してください。uml-component マクロ
;;に現れないパラメータについては後述します。
;;
;;　なお、ここで指定する width および height はデフォルトの最低サイズとして使用されます。
;;
;;${SEE_ALSO}
;;
;;* uml-component マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-component-options ((&key font fill stroke
                                            width height icon margin filter layer) &rest body)
  (labels ((impl (params acc)
             (if (null params)
                 acc
                 (let ((value  (car  params))
                       (symbol (cadr params)))
                   (impl (cddr params)
                         (if (null value)
                             acc
                             (push (list symbol value) acc)))))))
    (let ((lst (impl (list font        '*uml-component-font*
                           fill        '*uml-component-fill*
                           stroke      '*uml-component-stroke*
                           width       '*uml-component-width*
                           height      '*uml-component-height*
                           icon        '*uml-component-icon-setting*
                           margin      '*uml-component-margin*
                           filter      '*uml-component-filter*
                           layer       '*uml-component-layer*) nil)))
      `(let ,lst
         ,@body))))
