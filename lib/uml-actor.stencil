
(in-package :kaavio-user)

(defparameter *uml-actor-fill*                nil)
(defparameter *uml-actor-stroke*              nil)
(defparameter *uml-actor-size*                 40)
(defparameter *uml-actor-width-ratio*       0.620)
(defparameter *uml-actor-head-ratio*        0.400)
(defparameter *uml-actor-shoulder-position* 0.525)
(defparameter *uml-actor-thigh-position*    0.740)
(defparameter *uml-actor-filter*              nil)
(defparameter *uml-actor-layer*               nil)


;;------------------------------------------------------------------------------
;;
;; class uml-actor
;;
;;------------------------------------------------------------------------------
(defclass uml-actor (kaavio:group)
  ((name      :initform nil  :initarg  :name)   ; (or nil label-info)
   (fill      :initform nil  :initarg  :fill)   ; (or nil fill-info)
   (stroke    :initform nil  :initarg  :stroke) ; (or nil stroke-info)
   (filter    :initform nil  :initarg  :filter) ; (or nil keyword)
   (head      :initform 0)                      ; number
   (shoulder  :initform 0)                      ; number
   (thigh     :initform 0)                      ; number
   (clip-path :initform nil :initarg :clip-path))) ; (or nil symbol)

(defmethod initialize-instance :after ((actor uml-actor) &rest initargs)
  (declare (ignore initargs))
  (with-slots (name fill stroke filter layer head shoulder thigh) actor
    (setf name   (and name (make-label name)))
    (setf fill   (make-fill   (or fill   *uml-actor-fill*   *default-fill*  )))
    (setf stroke (make-stroke (or stroke *uml-actor-stroke* *default-stroke*)))
    (setf filter (if (eq filter :none)
                     nil
                     (or filter *uml-actor-filter* *default-filter*)))
    (setf layer  (if (eq layer :none)
                     nil
                     (or layer *uml-actor-layer* *default-layer*)))
    (let ((height (slot-value actor 'kaavio::height)))
      (setf head  (/ (* height *uml-actor-head-ratio*) 2))
      (setf thigh    (* height *uml-actor-thigh-position*))
      (setf shoulder (* height *uml-actor-shoulder-position*))))
  actor)

(defmethod check ((actor uml-actor) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (name fill stroke head shoulder thigh clip-path) actor
    (check-object name     canvas dict :nullable t :class  label-info)
    (check-object fill     canvas dict :nullable t :class   fill-info)
    (check-object stroke   canvas dict :nullable t :class stroke-info)
    (check-member head     :nullable nil :types number)
    (check-member shoulder :nullable nil :types number)
    (check-member thigh    :nullable nil :types number)
    (check-member clip-path :nullable  t :types symbol))
  nil)

;; override of group::draw-group
(defmethod draw-group ((actor uml-actor) writer)
  (with-slots (name fill stroke filter head shoulder thigh clip-path) actor
    (let* ((canvas (group-get-canvas actor))
           (width  (* (canvas-width canvas) *uml-actor-width-ratio*))
           (height (canvas-height canvas))
           (center (/ (canvas-width canvas) 2))
		   (margin (/ (- (canvas-width canvas) width) 2))
           (neck   (* head 2))
           (*default-fill*   fill)
           (*default-stroke* stroke)
           (*default-filter* filter)
           (kaavio:*current-clip-path* clip-path))
      (macrolet ((register-entity (entity)
                   `(check-and-draw-local-entity ,entity canvas writer)))
        (circle `(,center ,head) head)
        (line `((,center ,neck) (,center ,thigh)))
        (line `((,margin ,shoulder) (,(+ width margin) ,shoulder)))
        (line `((,margin ,height) (,center ,thigh) (,(+ width margin) ,height)))))
    (when name
      (draw-label name actor clip-path writer)))
  nil)

;for debug...
;(defmethod post-draw ((obj uml-actor) writer)
;  (call-next-method)
;  (draw-canvas-frame (shape-get-subcanvas obj) writer))
 



;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-actor
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-actor}} position name ${KEY} pivot size fill stroke link layer filter id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `name` ---- アクターの名前をラベル形式で指定します。
;;* `pivot` ---- `position` で指定した基準点が図形要素のどこにくるように描画するかを指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `size` ---- 大きさを明示的に指定したい場合に、高さを数値で指定します。幅は高さから自動的に決定されます。省略した場合のデフォルト値は 40 です。
;;* `fill` ---- 内部の塗り潰しを指定します。
;;* `stroke` ---- 線を描画するストロークを指定します
;;* `link` ---- リンクにする場合、リンク先を指定します。
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;
;;${DESCRIPTION}
;;
;;　UML ユースケース図におけるアクターを描画します。スタイルを統一したい場合、
;;with-uml-actor-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#ユースケース図)
;;* [$$](#uml-actor)
;;* with-uml-actor-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-actor (position name &key pivot size fill stroke link layer filter id)
  `(register-entity (make-instance 'uml-actor
                                   :position ,position :pivot ,pivot
                                   :name ,name
                                   :height (or ,size *uml-actor-size*)
                                   :width  (or ,size *uml-actor-size*)
                                   :fill ,fill :stroke ,stroke
                                   :clip-path *current-clip-path*
                                   :link ,link :layer ,layer
                                   :filter ,filter :id ,id)))

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-actor-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;t
;;* ${{B}{with-uml-actor-options}} (${KEY} fill stroke size width-ratio head-ratio shoulder-position thigh-position filter layer) ${BODY} body
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-actor マクロで描画される図形要素のデフォルトオプションを変更します。キーワード
;;パラメータ群の説明は uml-actor マクロを参照してください。uml-actor マクロに現れない
;;パラメータについては後述します。
;;
;;${SEE_ALSO}
;;
;;* uml-actor マクロ
;;
;;${NOTES}
;;
;;　uml-actor マクロのパラメータに対応しないものとして、以下があります。これらはアクター
;;のアイコン形状を制御するものです。
;;
;;* `width-ratio` : `size` で指定するサイズに対して描画される人型の幅を決定するための係数です。デフォルト値は 0.620 です。
;;* `head-ratio` : 頭部の円の大きさを高さに対する比で決定するための係数です。デフォルト値は 0.4 です。
;;* `shoulder-position` : 「肩」の位置（つまり横棒で描画される腕の高さ）を決定するための係数です。デフォルト値は 0.5 です。
;;* `thigh-position` : 「腰」の位置（つまり斜めの棒で描画される二本の脚が胴体から分岐する位置）を決定するための係数です。デフォルト値は 0.7 です。
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-actor-options ((&key fill stroke size width-ratio head-ratio
                                     shoulder-position thigh-position filter layer) &rest body)
  (labels ((impl (params acc)
             (if (null params)
                 acc
                 (let ((value  (car  params))
                       (symbol (cadr params)))
                   (impl (cddr params)
                         (if (null value)
                             acc
                             (push (list symbol value) acc)))))))
    (let ((lst (impl (list fill              '*uml-actor-fill*
                           stroke            '*uml-actor-stroke*
                           size              '*uml-actor-size*
                           width-ratio       '*uml-actor-width-ratio*
                           head-ratio        '*uml-actor-head-ratio*
                           shoulder-position '*uml-actor-shoulder-position*
                           thigh-position    '*uml-actor-thigh-position*
                           filter            '*uml-actor-filter*
                           layer             '*uml-actor-layer*) nil)))
      `(let ,lst
         ,@body))))

