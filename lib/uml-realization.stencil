
(in-package :kaavio-user)

(load-stencil :uml-common-base)
(load-stencil :uml-connection-common)
(load-stencil :uml-stereotype-info)

(defparameter *uml-realization-stroke*     '(:color :black :dasharray (4 2)))
(defparameter *uml-realization-fill*        :white)
(defparameter *uml-realization-arrow-size* :medium)
(defparameter *uml-realization-filter*         nil)
(defparameter *uml-realization-layer*          nil)
(defparameter *uml-realization-font*           nil)


;;------------------------------------------------------------------------------
;;
;; class uml-realization
;;
;;------------------------------------------------------------------------------
(defclass uml-realization (kaavio:connector)
  ((name       :initform nil :initarg :name)           ; (or nil kaavio::label-info)
   (stereotype :initform nil :initarg :stereotype)))   ; (or nil uml-stereotype-info)

(defmethod initialize-instance :after ((gen uml-realization) &rest initargs)
  (declare (ignore initargs))
  (with-slots (stereotype) gen
    (setf stereotype (and stereotype (make-uml-stereotype stereotype))))
  gen)


(defmethod check ((gen uml-realization) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (name stereotype) gen
    (check-object name       canvas dict :nullable t :class label-info)
    (check-object stereotype canvas dict :nullable t :class uml-stereotype-info))
  nil)

(defmethod entity-composition-p ((gen uml-realization))
  (with-slots (name stereotype) gen
    (or name
        stereotype
        (call-next-method))))

;;no implementation
;(defmethod post-draw ((gen uml-realization) writer)
;  (call-next-method))
      


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-realization
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-realization}} from to ${KEY} stereotype keyword name style spacing filter layer id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `from` ---- 接続元となる要素の ID をキーワードで指定します。point 値も指定できます。
;;* `to` ---- 接続先となる要素の ID をキーワードで指定します。point 値も指定できます。
;;* `stereotype` ---- ステレオタイプを明示する場合はステレオタイプ情報を指定します。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `keyword` ---- キーワードを明示する場合はステレオタイプ情報を指定します。 `stereotype` が指定されている場合は無視されます。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `name` ---- 実現関係に名前をつける場合、ラベル形式で指定します。
;;* `style` ---- 接続線の引き方を指定します。詳細は [$@ 節](#コネクタ)を参照してください。
;;* `spacing` ---- 2 回以上折れ曲がる接続線における「自由な線分」の位置を調整するためのパラメータです。詳細は [$@ 節](#コネクタ)を参照してください。
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します。
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します。
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します。
;;
;;${DESCRIPTION}
;;
;;　クラス図を始めとする各種の UML ダイアグラムにおける実現関係を描画します。スタイルを統一
;;したい場合、with-uml-realization-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#クラス図)
;;* [$$](#uml-realization)
;;* with-uml-realization-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-realization (from to &key stereotype keyword name style spacing filter layer id)
  (let ((g-stype (gensym "STEREOTYPE"))
        (g-name  (gensym "NAME")))
    `(let ((,g-stype ,(or stereotype keyword))
           (,g-name  ,name))
       (register-entity (make-instance 'uml-realization
                                       :from ,from :to ,to
                                       :stereotype ,g-stype :style ,style :spacing ,spacing
                                       :name (uml-make-label *uml-realization-font* ,g-name)
                                       :label (and (or ,g-stype ,g-name)
                                                   #'uml-connection-draw-label)
                                       :stroke (or *uml-realization-stroke*
                                                   (make-stroke :dasharray '(4 2)
                                                                :base *default-stroke*))
                                       :clip-path *current-clip-path*
                                       :end1 nil
                                       :end2 (list :type :triangle
                                                   :fill (or *uml-realization-fill* :white)
                                                   :size *uml-realization-arrow-size*)
                                       :filter (or ,filter *uml-realization-filter* *default-filter*)
                                       :layer  (or ,layer  *uml-realization-layer*  *default-layer*)
                                       :id ,id)))))

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-realization-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-realization-options}} (${KEY} stroke fill arrow-size font filter layer) ${BODY} body
;;
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-realization マクロで描画される図形要素のデフォルトオプションを変更します。キーワード
;;パラメータ群の説明は uml-realization マクロを参照してください。
;;
;;${SEE_ALSO}
;;
;;* uml-realization マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-realization-options ((&key (stroke     nil stroke-p)
                                              (fill       nil fill-p)
                                              (arrow-size nil arrow-size-p)
                                              (font       nil font-p)
                                              (filter     nil filter-p)
                                              (layer      nil layer-p)) &rest body)
  (let ((bindings nil))
    (labels ((impl (arg-p binding)
               (when arg-p (push binding bindings))))
      (impl arrow-size-p `(*uml-realization-arrow-size* ,arrow-size))
      (impl stroke-p     `(*uml-realization-stroke* (make-stroke2 *uml-realization-stroke* ,stroke)))
      (impl fill-p       `(*uml-realization-fill*   (make-fill2   *uml-realization-fill*   ,fill)))
      (impl font-p       `(*uml-realization-font*   (make-font2   *uml-realization-font*   ,font)))
      (impl filter-p     `(*uml-realization-filter* ,filter))
      (impl layer-p      `(*uml-realization-layer*  ,layer)))
    `(let ,(nreverse bindings)
       ,@body)))

