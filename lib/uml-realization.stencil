
(in-package :kaavio-user)

(load-stencil :uml-connection-common)
(load-stencil :uml-keyword-info)

(defparameter *uml-realization-dasharray* '(4 2))

;;------------------------------------------------------------------------------
;;
;; class uml-realization
;;
;;------------------------------------------------------------------------------
(defclass uml-realization (kaavio:connector)
  ((name	:initform nil :initarg :name)		; (or nil kaavio::label-info)
   (keyword :initform nil :initarg :keyword)))	; (or nil uml-keyword-info)

(defmethod initialize-instance :after ((gen uml-realization) &rest initargs)
  (declare (ignore initargs))
  (with-slots (name keyword) gen
	(when name
	  (setf name (make-label name)))
	(setf keyword (and keyword (make-uml-keyword keyword))))
  gen)


(defmethod check ((gen uml-realization) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (name keyword) gen
	(check-object name    canvas dict :nullable t :class label-info)
	(check-object keyword canvas dict :nullable t :class uml-keyword-info))
  nil)

(defmethod entity-composition-p ((gen uml-realization))
  (with-slots (name keyword) gen
	(or name
		keyword
		(call-next-method))))

;;no implementation
;(defmethod post-draw ((gen uml-realization) writer)
;  (call-next-method))
	  


;;------------------------------------------------------------------------------
;;
;; macro uml-realization
;;
;;------------------------------------------------------------------------------
(defmacro uml-realization (from to &key keyword name style spacing layer id)
  (let ((g-kwd  (gensym "KEYWORD"))
		(g-name (gensym "NAME")))
	`(let ((,g-kwd  ,keyword)
		   (,g-name ,name))
	   (register-entity (make-instance 'uml-realization
									   :from ,from :to ,to
									   :keyword ,g-kwd :style ,style :spacing ,spacing
									   :name ,g-name
									   :label (and (or ,g-kwd ,g-name)
												   #'uml-connection-draw-label)
									   :stroke (make-stroke
												:dasharray (or *uml-realization-dasharray* '(4 2))
												:base *default-stroke*)
									   :end1 nil
									   :end2 `(:type :triangle :fill :white
													 :stroke (:dasharray nil :base ,*default-stroke*))
									   :layer ,layer :id ,id)))))

