
(in-package :kaavio-user)

(load-stencil :uml-keyword-info)

(defparameter *uml-signal-sending-font*         nil)
(defparameter *uml-signal-sending-fill*      :white)
(defparameter *uml-signal-sending-stroke*    :black)
(defparameter *uml-signal-sending-direction* :right)
(defparameter *uml-signal-sending-depth*         15)
(defparameter *uml-signal-sending-margin*        10)

;;------------------------------------------------------------------------------
;;
;; class uml-signal-sending
;;
;;------------------------------------------------------------------------------
(defclass uml-signal-sending (kaavio:text-shape)
  ((text		:initform nil :initarg :text)		; (or keyword string)
   (keyword		:initform nil :initarg :keyword)	; (or nil uml-keyword-info)
   (direction	:initform nil :initarg :direction)	; keyword - :left, :right
   (depth		:initform nil :initarg :depth)		; number
   (margin2		:initform nil)))					; number ( margin for keyword )

(defmethod initialize-instance :after ((sig-send uml-signal-sending) &rest initargs)
  (declare (ignore initargs))
  (with-slots (keyword direction margin2) sig-send
	(setf keyword (and keyword (make-uml-keyword keyword)))
	(setf margin2 (if (null keyword)
					  0
					  (or (and *uml-signal-sending-font*
							   (slot-value *uml-signal-sending-font* 'kaavio::size))
						  (and *default-font*
							   (slot-value *default-font* 'kaavio::size))
						  12))))	;;ToDo : これはなんとかしないと。
  sig-send)

(defmethod check ((sig-send uml-signal-sending) canvas dict)
  (with-slots (text keyword direction depth margin2) sig-send
	(check-member   text       :nullable nil :types (or keyword string))
	(check-object   keyword    canvas dict :nullable t :class uml-keyword-info)
	(check-member   direction  :nullable nil :types keyword)
	(check-member   depth      :nullable nil :types number)
	(check-member   margin2    :nullable nil :types number)
	(check-keywords direction  :left :right))
  ;; this method must call super class' one.
  (call-next-method))

;; override of group::draw-group
(defmethod draw-group ((sig-send uml-signal-sending) writer)
  (let ((canvas (group-get-canvas sig-send)))
	(let ((top    (canvas-top    canvas))
		  (left   (canvas-left   canvas))
		  (width  (canvas-width  canvas))
		  (height (canvas-height canvas)))
	  (macrolet ((register-entity (entity)
				   `(check-and-draw-local-entity ,entity canvas writer)))
		(with-slots (keyword direction depth margin2
						kaavio::margin kaavio::fill kaavio::stroke) sig-send
		  (let ((half (/ depth 2))
				(*default-fill*   kaavio::fill)
				(*default-stroke* kaavio::stroke))
			;; draw body
			(if (eq direction :right)
				(polygon `((0 0)
						   (0 ,height)
						   (,(- width half) ,height)
						   (,(+ width half) ,(/ height 2))
						   (,(- width half) 0)
						   (0 0)))
				(polygon `((,half 0)
						   (,(- half) ,(/ height 2))
						   (,half ,height)
						   (,width ,height)
						   (,width 0)
						   (,half 0)))))
		  ;; draw keyword
		  (when keyword
			(uml-keyword-draw keyword
							  (+ left (/ width 2))
							  (+ top  kaavio::margin margin2) :center writer))
		  ;; draw text
		  (call-next-method)))))
  nil)

;for debug...
;(defmethod post-draw ((obj uml-signal-sending) writer)
;  (call-next-method)
;  (draw-canvas-frame (shape-get-subcanvas obj) writer))
 
(defmethod text-shape-calc-size ((sig-send uml-signal-sending))
  (multiple-value-bind (w h) (call-next-method)
	(with-slots (margin2) sig-send
	  (values w (+ h margin2)))))

(defmethod text-shape-paragraph-area ((sig-send uml-signal-sending))
  (with-slots (direction depth margin2) sig-send
	(let ((canvas (call-next-method)))
	  (incf (canvas-top    canvas) margin2)
	  (decf (canvas-height canvas) margin2)
	  (decf (canvas-width  canvas) (/ depth 2))
	  (when (eq direction :left)
		(incf (canvas-left canvas) (/ depth 2)))
	  canvas)))

;;ToDo : :CC の場合にちょっとマズいことになる‥‥‥
(defmethod shape-connect-point ((sig-send uml-signal-sending) type1 type2 arg)
  (let ((pt (rectangle-connect-point (shape-center sig-send)
									 (shape-width  sig-send)
									 (shape-height sig-send) type1 type2 arg)))
	(with-slots (direction depth) sig-send
	  (with-point (x y) pt
		(cond
		  ((and (eq direction :right)
				(eq type2     :right) (zerop arg)) (incf x (/ depth 2)))
		  ((and (eq direction  :left)
				(eq type2      :left) (zerop arg)) (decf x (/ depth 2))))))
	pt))
  
;;------------------------------------------------------------------------------
;;
;; macro uml-signal-sending
;;
;;------------------------------------------------------------------------------
(defmacro uml-signal-sending (center text &key keyword width height direction depth
											   font fill stroke margin link layer id)
  `(register-entity (make-instance 'uml-signal-sending
								   :center ,center
								   :width ,width :height ,height
								   :text ,text :font ,font
								   :keyword ,keyword
								   :direction (or ,direction *uml-signal-sending-direction*)
								   :depth     (or ,depth     *uml-signal-sending-depth*)
								   :margin   (or ,margin   *uml-signal-sending-margin*)
								   :fill     (or ,fill   *uml-signal-sending-fill*   *default-fill*   :white)
								   :stroke   (or ,stroke *uml-signal-sending-stroke* *default-stroke* :black)
								   :link ,link :layer ,layer :id ,id)))

