(in-package :kaavio-user)

(defparameter *uml-flow-final-radius*       15)
(defparameter *uml-flow-final-fill*     :white)
(defparameter *uml-flow-final-stroke*   :black)
(defparameter *uml-flow-final-filter*      nil)
(defparameter *uml-flow-final-layer*       nil)

;;------------------------------------------------------------------------------
;;
;; class uml-flow-final
;;
;;------------------------------------------------------------------------------
(defclass uml-flow-final (kaavio:circle) ())


(defmethod initialize-instance :after ((obj uml-flow-final) &rest initargs)
  (declare (ignore initargs))
  ;;(format t "initialize-instance :after called.~%")
  (with-slots (filter layer) obj
    (setf filter  (if (eq filter :none)
                      nil
                      (or filter *uml-flow-final-filter* *default-filter*)))
    (setf layer  (if (eq layer :none)
                     nil
                     (or layer *uml-flow-final-layer* *default-layer*))))
  obj)

;; no implementation
;;(defmethod check ((obj uml-flow-final) canvas dict) ...)

(defmethod post-draw ((obj uml-flow-final) writer)
  (let* ((canvas (shape-get-subcanvas obj))
         (radius (/ (canvas-width canvas) 2))
         (c      radius)
         (len    (/ radius (sqrt 2))))
    (with-slots (kaavio::clip-path) obj
      (macrolet ((register-entity (entity)
                   `(check-and-draw-local-entity ,entity canvas writer)))
        (let ((*default-stroke* (slot-value obj 'kaavio::stroke))
              (kaavio:*current-clip-path* kaavio::clip-path))
          (line `((,(- c len) ,(- c len)) (,(+ c len) ,(+ c len))))
          (line `((,(+ c len) ,(- c len)) (,(- c len) ,(+ c len))))))))
  (call-next-method)
; (draw-canvas-frame (shape-get-subcanvas obj) writer)  ;for debug...
  nil)


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-flow-final
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-flow-final}} position ${KEY} pivot radius fill stroke link layer filter id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `pivot` ---- `position` で指定した基準点が図形要素のどこにくるように描画するかを指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `radius` ---- 大きさを半径で指定します。
;;* `fill` ---- 内部の塗り潰しを指定します。
;;* `stroke` ---- 線を描画するストロークを指定します
;;* `link` ---- リンクにする場合、リンク先を指定します。
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;
;;${DESCRIPTION}
;;
;;　UML アクティビティ図におけるフロー終了を描画します。スタイルを統一したい場合、
;;with-uml-flow-final-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#アクティビティ図)
;;* [$$](#uml-flow-final)
;;* with-uml-flow-final-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-flow-final (position &key pivot radius fill stroke layer filter id)
  `(register-entity (make-instance 'uml-flow-final
                                   :position ,position :pivot ,pivot
                                   :radius (or ,radius *uml-flow-final-radius*)
                                   :fill   (or ,fill   *uml-flow-final-fill*   *default-fill*)
                                   :stroke (or ,stroke *uml-flow-final-stroke* *default-stroke*)
                                   :clip-path kaavio:*current-clip-path*
                                   :link nil :layer ,layer :filter ,filter :id ,id)))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-flow-final-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-flow-final-options}} (${KEY} radius fill stroke filter layer) ${BODY} body
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-flow-final マクロで描画される図形要素のデフォルトオプションを変更します。
;;キーワードパラメータ群の説明は uml-flow-final マクロを参照してください。
;;
;;${SEE_ALSO}
;;
;;* uml-flow-final マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-flow-final-options ((&key radius fill
                                             stroke filter layer) &rest body)
  (labels ((impl (params acc)
             (if (null params)
                 acc
                 (let ((value  (car  params))
                       (symbol (cadr params)))
                   (impl (cddr params)
                         (if (null value)
                             acc
                             (push (list symbol value) acc)))))))
    (let ((lst (impl (list radius   '*uml-flow-final-radius*
                           fill     '*uml-flow-final-fill*
                           stroke   '*uml-flow-final-stroke*
                           filter   '*uml-flow-final-filter*
                           layer    '*uml-flow-final-layer*) nil)))
      `(let ,lst
         ,@body))))

