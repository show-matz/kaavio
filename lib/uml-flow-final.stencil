(in-package :kaavio-user)

(defparameter *uml-flow-final-radius*       15)
(defparameter *uml-flow-final-fill*     :white)
(defparameter *uml-flow-final-stroke*   :black)

;;------------------------------------------------------------------------------
;;
;; class uml-flow-final
;;
;;------------------------------------------------------------------------------
(defclass uml-flow-final (kaavio:circle) ())

;; no implementation
;;(defmethod check ((obj uml-flow-final) canvas dict) ...)

(defmethod post-draw ((obj uml-flow-final) writer)
  (let* ((canvas (shape-get-subcanvas obj))
		 (radius (/ (canvas-width canvas) 2))
		 (c      radius)
		 (len    (/ radius (sqrt 2))))
	(macrolet ((register-entity (entity)
				 `(check-and-draw-local-entity ,entity canvas writer)))
	  (let ((*default-stroke* (slot-value obj 'kaavio::stroke)))
		(line `((,(- c len) ,(- c len)) (,(+ c len) ,(+ c len))))
		(line `((,(+ c len) ,(- c len)) (,(- c len) ,(+ c len)))))))
  (call-next-method)
;  (draw-canvas-frame (shape-get-subcanvas obj) writer)	;for debug...
  nil)


;;------------------------------------------------------------------------------
;;
;; macro uml-flow-final
;;
;;------------------------------------------------------------------------------
(defmacro uml-flow-final (center &key radius fill stroke layer id)
  `(register-entity (make-instance 'uml-flow-final
								   :center ,center
								   :radius (or ,radius *uml-flow-final-radius*)
								   :fill   (or ,fill   *uml-flow-final-fill*   *default-fill*)
								   :stroke (or ,stroke *uml-flow-final-stroke* *default-stroke*)
								   :link nil :layer ,layer :id ,id)))

