
(in-package :kaavio-user)

(defparameter *uml-partition-lines*     :mid)
(defparameter *uml-partition-header*      30)
(defparameter *uml-partition-font*       nil)
(defparameter *uml-partition-fill*    :white)
(defparameter *uml-partition-stroke*  :black)
(defparameter *uml-partition-layer*      nil)


(defun uml-partition-make-rows-cols (rows cols header)
  (cond
    ((and (integerp rows) (listp cols))
     (list :vertical
           (list header (- rows header))
           (mapcar #'second cols)))
    ((and (listp rows) (integerp cols))
     (list :horizontal
           (mapcar #'second rows)
           (list header (- cols header))))
    ((and (listp rows) (listp cols))
     (list :matrix
           (cons header (mapcar #'second rows))
           (cons header (mapcar #'second cols))))
    ((and (integerp rows) (integerp cols))
     (throw-exception "rows and cols are both integer."))
    (t (throw-exception "rows or cols is invalid."))))

(defun uml-partition-extract-header (rows cols)
  ;;For matches in with-lane, NO conversion to string at this point.
  (labels ((convert (lst)
             (let ((data (first lst)))
               (cond
                 ((keywordp data) data)
                 ((symbolp  data) data)
                 ((stringp  data) data)
                 (t nil)))))
    (cond
      ((and (integerp rows) (listp cols))
       (list nil (mapcar #'convert cols)))
      ((and (listp rows) (integerp cols))
       (list (mapcar #'convert rows) nil))
      ((and (listp rows) (listp cols))
       (list (cons nil (mapcar #'convert rows))
             (cons nil (mapcar #'convert cols))))
      ((and (integerp rows) (integerp cols))
       (throw-exception "rows and cols are both integer."))
      (t (throw-exception "rows or cols is invalid.")))))

(defun uml-partition-get-cell (obj name1 name2)
  (labels ((find-lane (name lst idx)
             (when lst
               (if (equal name (car lst))
                   idx
                   (find-lane name (cdr lst) (1+ idx))))))
    (with-slots (row-headers col-headers) obj
      (if name2
          (let ((row (find-lane name1 row-headers 0))
                (col (find-lane name2 col-headers 0)))
            (if (and row col)
                (cons row col)
                (throw-exception "ERROR : invalid lane name")))
          (let ((row (find-lane name1 row-headers 0)))
            (if row
                (cons row 1)
                (let ((col (find-lane name1 col-headers 0)))
                  (if col
                      (cons 1 col)
                      (throw-exception "ERROR : invalid lane name")))))))))
      
;;------------------------------------------------------------------------------
;;
;; class uml-partition
;;
;;------------------------------------------------------------------------------
(defclass uml-partition (kaavio:table)
  ((type         :initform nil :initarg :type)          ; keyword (:vertical :horizontal :matrix)
   (lines        :initform nil :initarg :lines)         ; keyword (:min :mid :max)
   (row-headers  :initform nil :initarg :row-headers)   ; list of string
   (col-headers  :initform nil :initarg :col-headers))) ; list of string


(defmethod initialize-instance :after ((obj uml-partition) &rest initargs)
  (declare (ignore initargs))
  ;;(format t "initialize-instance :after called.~%")
  (with-slots (layer) obj
    (setf layer  (if (eq layer :none)
                     nil
                     (or layer *uml-partition-layer* *default-layer*))))
  obj)

;; override of group::draw-group
(defmethod draw-group ((obj uml-partition) writer)
  (with-slots (type lines row-headers col-headers
               (rows kaavio::rows) (cols kaavio::cols)
               (stroke kaavio::stroke) (font kaavio::font) (clip-path kaavio::clip-path)) obj
    ;; draw table without stroke
    (let ((stroke-bkup stroke))
      (setf stroke (make-stroke :none))
      (call-next-method)
      (setf stroke stroke-bkup))
    (let* ((canvas (group-get-canvas obj))
           (width  (canvas-width  canvas))
           (height (canvas-height canvas))
           (kaavio:*current-clip-path* clip-path))
      (macrolet ((register-entity (entity)
                   `(check-and-draw-local-entity ,entity canvas writer)))
        ;; draw stroke
        (when (or (eq type :vertical) (eq type :matrix))
          (let ((x 0))
            (dolist (w (butlast cols))
              (incf x w)
              (line `((,x 0) (,x ,height)) :stroke stroke))))
        (when (or (eq type :horizontal) (eq type :matrix))
          (let ((y 0))
            (dolist (h (butlast rows))
              (incf y h)
              (line `((0 ,y) (,width ,y)) :stroke stroke))))
        (when (eq lines :mid)
          (ecase type
            ((:vertical)
             (line `((0 0) (0 ,height)))
             (line `((,width 0) (,width ,height))))
            ((:horizontal)
             (line `((0 0) (,width 0)))
             (line `((0 ,height) (,width ,height))))
            ((:matrix)
             (line `((,width  0) (,width ,height)))
             (line `((0 ,height) (,width ,height))))))
        (when (or (eq lines :mid) (eq lines :max))
          (when (eq type :vertical)
            (let ((header (car rows)))
              (line `((0 ,header) (,width ,header)))))
          (when (eq type :horizontal)
            (let ((header (car cols)))
              (line `((,header 0) (,header ,height))))))
        (when (eq lines :max)
          (rect (canvas-center canvas) width height :stroke stroke :fill :none))
        ;; draw headers
        (labels ((textize (data)
                   (cond
                     ((null     data) nil)
                     ((keywordp data) (string-downcase (symbol-name data)))
                     ((symbolp  data) (symbol-name data))
                     (t data)))
                 (impl (widths headers x funcs)
                   (when (and widths headers)
                     (let ((w   (car widths))
                           (txt (textize (car headers))))
                       (funcall funcs x w txt)
                       (impl (cdr widths) (cdr headers) (+ x w) funcs)))))
          (when col-headers
            (let ((height (first rows)))
              (impl cols col-headers 0
                    (lambda (x w txt)
                      (when txt
                        (paragraph (make-point (+ x (/ w 2)) (/ height 2))
                                   txt :align :center :valign :center :font font))))))
          (when row-headers
            (let ((width (first cols)))
              (impl rows row-headers 0
                    (lambda (y h txt)
                      (when txt
                        (paragraph (make-point (/ width 2) (+ y (/ h 2)))
                                   txt :align :center :valign :center :rotate -90 :font font)))))))))))

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-partition
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-partition}} position rows cols ${KEY} pivot lines header fills stroke font layer id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `rows` ---- 各レーンの名前と高さの情報をリストで与えるか、または全体の高さを数値で与えます。詳細は [$@ 節](#uml-partition)を参照してください。
;;* `cols` ---- 各レーンの名前と幅の情報をリストで与えるか、または全体の幅を数値で与えます。詳細は [$@ 節](#uml-partition)を参照してください。
;;* `pivot` ---- `position` で指定した基準点が図形要素のどこにくるように描画するかを指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `lines` ---- 枠線の描画の仕方を `:min :mid :max` のいずれかで指定します。それぞれのサンプルは [$@](F#uml-partition における lines パラメータのサンプル) を参照してください。
;;* `header` ---- ${{TODO}{まだ記述されていません。}}
;;* `fills` ---- ${{TODO}{まだ記述されていません。}}
;;* `stroke` ---- 外枠を描画するストロークを指定します
;;* `font` ---- フォントを指定します。
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;
;;${DESCRIPTION}
;;
;;　UML アクティビティ図におけるパーティションを描画します。各レーン内部の描画には
;;with-uml-partition-lane マクロを使用してください。また、スタイルを統一したい場合、
;;with-uml-action-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#アクティビティ図)
;;* [$$](#uml-partition)
;;* with-uml-partition-lane マクロ
;;* with-uml-partition-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-partition (position rows cols
                         &key pivot lines header fills stroke font layer id)
  (let ((g-rc     (gensym "RC"))
        (g-rows   (gensym "ROWS"))
        (g-cols   (gensym "COLS"))
        (g-names  (gensym "NAMES")))
    `(let* ((,g-rows   ,rows)
            (,g-cols   ,cols)
            (,g-rc     (uml-partition-make-rows-cols ,g-rows ,g-cols
                                                     (or ,header *uml-partition-header*)))
            (,g-names  (uml-partition-extract-header ,g-rows ,g-cols)))
       (register-entity (make-instance 'uml-partition
                                       :type   (first ,g-rc)
                                       :lines  (or ,lines *uml-partition-lines*)
                                       :row-headers  (first  ,g-names)
                                       :col-headers  (second ,g-names)
                                       :position ,position :pivot ,pivot
                                       :width  (reduce #'+ (third  ,g-rc) :initial-value 0)
                                       :height (reduce #'+ (second ,g-rc) :initial-value 0)
                                       :rows   (second ,g-rc)
                                       :cols   (third  ,g-rc)
                                       :texts  nil
                                       :fills  (or ,fills (list :rc *uml-partition-fill*))
                                       :stroke (or ,stroke *uml-partition-stroke* *default-stroke*)
                                       :font   (or ,font   *uml-partition-font*   *default-font*)
                                       :clip-path kaavio:*current-clip-path*
                                       :layer ,layer :id ,id)))))

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-partition-lane
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-partition-lane}} (id name ${OPTIONAL} name2) ${BODY} body
;;
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　${{TODO}{まだ記述されていません。}}
;;
;;${NO_SEE_ALSO}
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-partition-lane ((id name &optional name2) &body body)
  (let ((g-id (gensym "ID"))
        (g-rc (gensym "RC")))
    `(let* ((,g-id ,id)
            (,g-rc (uml-partition-get-cell
                        (kaavio::dict-get-entity (kaavio::get-dictionary) ,g-id) ,name ,name2)))
       (with-table-cell (,g-id (car ,g-rc) (cdr ,g-rc))
         ,@body))))
  

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-partition-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-partition-options}} (${KEY} lines header font fill stroke layer) ${BODY} body
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-partition マクロで描画される図形要素のデフォルトオプションを変更します。キーワード
;;パラメータ群の説明は uml-partition マクロを参照してください。
;;
;;${SEE_ALSO}
;;
;;* uml-partition マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-partition-options ((&key lines header
                                            font fill stroke layer) &rest body)
  (labels ((impl (params acc)
             (if (null params)
                 acc
                 (let ((value  (car  params))
                       (symbol (cadr params)))
                   (impl (cddr params)
                         (if (null value)
                             acc
                             (push (list symbol value) acc)))))))
    (let ((lst (impl (list lines    '*uml-partition-lines*
                           header   '*uml-partition-header*
                           font     '*uml-partition-font*
                           fill     '*uml-partition-fill*
                           stroke   '*uml-partition-stroke*
                           layer    '*uml-partition-layer*) nil)))
      `(let ,lst
         ,@body))))
