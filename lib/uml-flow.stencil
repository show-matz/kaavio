
(in-package :kaavio-user)

(load-stencil :uml-stereotype-info)


(defparameter *uml-flow-stroke*      :black)
(defparameter *uml-flow-arrow-size* :medium)
(defparameter *uml-flow-filter*         nil)
(defparameter *uml-flow-layer*          nil)
(defparameter *uml-flow-font*           nil)

;;------------------------------------------------------------------------------
;;
;; class uml-flow-spec
;;
;;------------------------------------------------------------------------------
(defclass uml-flow-spec ()
  ((guard   :initform nil :initarg :guard)    ; (or keyword string)
   (action  :initform nil :initarg :action)   ; (or keyword string)
   (offset  :initform nil :initarg :offset)   ; (or nil list)
   (font    :initform nil :initarg :font)))   ; (or nil font-info)


(defmethod initialize-instance :after ((obj uml-flow-spec) &rest initargs)
  (declare (ignore initargs))
  (with-slots (offset font) obj
    (setf offset (or offset (make-point 0 0)))
    (when font
      (setf font (make-font font)))))

(defmethod check ((spec uml-flow-spec) canvas dict)
  (with-slots (guard action offset font) spec
    (check-member guard  :nullable   t :types (or keyword string))
    (check-member action :nullable   t :types (or keyword string))
    (check-member offset :nullable nil :types cons)
    (when offset
      (with-point (x y) offset
        (check-member x   :nullable nil :types number)
        (check-member y   :nullable nil :types number)))
    (check-object font   canvas dict :nullable t :class font-info))
  nil)

(defun uml-flow-spec-to-string (obj)
  (with-slots (guard action) obj
    (format-string (when guard
                     (format-string "[" guard "]"))
                   (when action
                     (format-string "/" action)))))

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### function make-uml-flow-spec
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{make-uml-flow-spec}} ${REST} params
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　指定されたパラメータでフロー仕様情報を生成します。上記は簡潔な記述で柔軟なフロー仕様情報
;;の生成を可能にするためのもので、 `params` として渡されるパラメータ数に応じて以下のことを
;;します。
;;
;;* パラメータ数が 1 の場合
;;    * フロー仕様情報が渡された場合、それをそのまま返します
;;    * リスト lst が渡された場合、 `(apply #'make-uml-flow-spec lst)` を返します
;;    * 上記のいずれでもない prm の場合、 `(make-uml-flow-spec :guard prm)` を返します
;;* パラメータ数が 2 以上の場合
;;    * 後述します
;;
;;　パラメータ数が 2 以上の場合、make-uml-flow-spec 関数は実質的に以下の関数であるかのように
;;振舞います。
;;
;;<!-- stack:push li class='syntax' -->
;;
;;* ${{B}{make-uml-flow-spec}} ${KEY} guard action offset font
;;
;;<!-- stack:pop li -->
;;
;;　各パラメータの意味は以下の通りです。
;;
;;* `guard` ---- ガード条件をキーワードシンボルまたは文字列で指定します。
;;* `action` ---- 実行アクションをキーワードシンボルまたは文字列で指定します。
;;* `offset` ---- 描画位置調整に使うオフセット情報を座標値で指定します。
;;* `font` ---- フォントを指定します。
;;
;;${SEE_ALSO}
;;
;;* [$$](#uml-flow-spec)
;;
;;${NOTES}
;;
;;　通常、この関数を明示的に使用する必要はありません。uml-flow マクロの 
;;`:spec` に指定されたパラメータは内部でこの関数に渡されるため、 
;;`:spec '(:guard :when-idle :action :"OnIdle()"` といった記述でフロー仕様情報
;;を指定できます。
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defun make-uml-flow-spec (&rest params)
  (if (= 1 (length params))
      (let ((param (car params)))
        (cond
          ((typep   param  'uml-flow-spec) param)
          ((listp   param) (apply #'make-uml-flow-spec param))
          (t               (make-uml-flow-spec :guard param))))
      (destructuring-bind (&key guard action offset
                                (font  nil  font-p)) params
        (make-instance 'uml-flow-spec
                       :guard    guard
                       :action   action
                       :offset   offset
                       :font     (if font-p  font  (or *uml-flow-font*
                                                       kaavio:*default-font*))))))


;;------------------------------------------------------------------------------
;;
;; class uml-flow
;;
;;------------------------------------------------------------------------------
(defclass uml-flow (kaavio:connector)
  ((stereotype :initform nil :initarg :stereotype) ; (or nil uml-stereotype-info)
   (spec       :initform nil :initarg :spec)))     ; (or nil uml-flow-spec)

(defmethod initialize-instance :after ((flow uml-flow) &rest initargs)
  (declare (ignore initargs))
  (with-slots (stereotype spec) flow
    (setf stereotype (and stereotype (make-uml-stereotype stereotype)))
    (setf spec       (and spec       (make-uml-flow-spec  spec))))
  flow)


(defmethod check ((flow uml-flow) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (stereotype spec) flow 
    (check-object stereotype canvas dict :nullable t :class uml-stereotype-info)
    (check-object spec       canvas dict :nullable t :class uml-flow-spec))
  nil)


(defmethod entity-composition-p ((flow uml-flow))
  (with-slots (stereotype spec) flow
    (or stereotype
        spec
        (call-next-method))))

;;MEMO : uml-connection-draw-label と酷似している。共通化が可能なはずだがそこまで手が回ってない。
(defun uml-flow-draw-spec (flow x y sin cos clip-path writer)
  (with-slots (spec stereotype) flow
    (labels ((calc-width-and-height ()
               (let* ((width   0)
                      (height  0)
                      (lines   nil)
                      (offset  (if spec (slot-value spec 'offset) '(0 0)))
                      (st-font (and stereotype (slot-value stereotype 'font)))
                      (sp-font (and spec       (slot-value spec       'font)))
                      (sp-size (if  spec       (slot-value sp-font    'kaavio::size) 0))
                      (spacing (if  spec       (slot-value sp-font    'kaavio::line-spacing) 0)))
                 (when stereotype
                   (multiple-value-setq (width height)
                                        (font-calc-textarea st-font
                                                            (uml-stereotype-to-string stereotype))))
                 (when spec
                   (let ((text (fix-name (uml-flow-spec-to-string spec))))
                     (setf lines (kaavio::string/split text #\newline))
                     (multiple-value-bind (w h) (font-calc-textarea sp-font text)
                       (setf width (max width w))
                       (incf height spacing)
                       (incf height h))))
                 (values width height offset lines st-font sp-font sp-size spacing))))
      (multiple-value-bind (width height offset lines
                                  stype-font spec-font spec-size spacing) (calc-width-and-height)
        (let (;(x (+ x (* sin height)))
              (y (- y (* cos height))))
          (decf y (/ height 2))
          (when (< 0 sin) (incf x (/ width 2)))
          (when (< sin 0) (decf x (/ width 2)))
          (when stereotype
            (incf y (slot-value stype-font 'kaavio::size))
            (uml-stereotype-draw stereotype (+ x (point-x offset))
                                            (+ y (point-y offset))
                                            :center
                                            stype-font
                                            clip-path
                                            writer)
            (incf y spacing))
          (when spec
            (let ((font-property (to-property-strings spec-font)))
              (dolist (line lines)
                (incf y spec-size)
                (write-text-tag (+ x (point-x offset))
                                (+ y (point-y offset))
                                line writer :align :center
                                :font font-property :clip-path clip-path)
                (incf y spacing)))))))))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-flow
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-flow}} from to ${KEY} stereotype keyword spec style spacing filter layer id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `from` ---- 接続元となる要素の ID をキーワードで指定します。point 値も指定できます。
;;* `to` ---- 接続先となる要素の ID をキーワードで指定します。point 値も指定できます。
;;* `stereotype` ---- ステレオタイプを明示する場合はステレオタイプ情報を指定します。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `keyword` ---- キーワードを明示する場合はステレオタイプ情報を指定します。 `stereotype` が指定されている場合は無視されます。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `spec` ---- フローにガード条件やアクションを明示する場合に指定します。詳細は後述します。
;;* `style` ---- 接続線の引き方を指定します。詳細は [$@ 節](#コネクタ)を参照してください。
;;* `spacing` ---- 2 回以上折れ曲がる接続線における「自由な線分」の位置を調整するためのパラメータです。詳細は [$@ 節](#コネクタ)を参照してください。
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します。
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します。
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します。
;;
;;${DESCRIPTION}
;;
;;　UML アクティビティ図におけるフローを描画します。スタイルを統一したい場合、
;;with-uml-flow-options マクロを使うことができます。
;;
;;　`spec` パラメータに指定するフロー仕様は、 `:spec '(:guard "v = 666" :action "foo()")` と
;;いった要領で指定します。リスト内に名前付きパラメータを並べる形式で、以下のパラメータが指定
;;できます。
;;
;;<!-- stack:push li class='syntax' -->
;;
;;* ${KEY} guard action offset font
;;
;;<!-- stack:pop li -->
;;
;;　`:guard :action` はそれぞれガード条件とアクションで、それぞれ文字列で指定します。これに
;;よって、先ほどの例で言えば `[v = 666]/foo()` といったフロー仕様が表示されることになります。 
;;`:offset` は表示位置の調整を `(x y)` 形式で指定します。 `:font` はフォントの指定が必要な
;;場合に使用します。フォントの指定を省略した場合、with-uml-flow-options マクロで指定されて
;;いるフォントが使用されます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#アクティビティ図)
;;* [$$](#uml-flow)
;;* with-uml-flow-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-flow (from to &key stereotype keyword spec style spacing filter layer id)
  (let ((g-stype (gensym "STEREOTYPE"))
        (g-spec  (gensym "SPEC")))
    `(let ((,g-stype ,(or stereotype keyword))
           (,g-spec  ,spec))
       (register-entity (make-instance 'uml-flow
                                       :from ,from :to ,to
                                       :stereotype ,g-stype :spec ,g-spec
                                       :label (and (or ,g-stype ,g-spec)
                                                   #'uml-flow-draw-spec)
                                       :style ,style :spacing ,spacing
                                       :stroke (or *uml-flow-stroke* *default-stroke*)
                                       :clip-path *current-clip-path*
                                       :end1 nil
                                       :end2 (list :type :arrow :size *uml-flow-arrow-size*)
                                       :filter (or ,filter *uml-flow-filter* *default-filter*)
                                       :layer  (or ,layer  *uml-flow-layer*  *default-layer*)
                                       :id ,id)))))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-flow-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-flow-options}} (${KEY} stroke arrow-size font filter layer) ${BODY} body
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-flow マクロで描画される図形要素のデフォルトオプションを変更します。キーワード
;;パラメータ群の説明は uml-flow マクロを参照してください。
;;
;;${SEE_ALSO}
;;
;;* uml-flow マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-flow-options ((&key stroke arrow-size font filter layer) &rest body)
  (labels ((impl (params acc)
             (if (null params)
                 acc
                 (let ((value  (car  params))
                       (symbol (cadr params)))
                   (impl (cddr params)
                         (if (null value)
                             acc
                             (push (list symbol value) acc)))))))
    (let ((lst (impl (list  stroke     '*uml-flow-stroke*
                            arrow-size '*uml-flow-arrow-size*
                            font       '*uml-flow-font*
                            filter     '*uml-flow-filter*
                            layer      '*uml-flow-layer*) nil)))
      `(let ,lst
         ,@body))))
