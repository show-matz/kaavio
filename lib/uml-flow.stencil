(in-package :kaavio-user)

(load-stencil :uml-keyword-info)

(defparameter *uml-flow-spec-font*  nil)

(defparameter *uml-flow-stroke* :black)

;;------------------------------------------------------------------------------
;;
;; class uml-flow-spec
;;
;;------------------------------------------------------------------------------
(defclass uml-flow-spec ()
  ((guard	:initform nil :initarg :guard)	;: (or keyword string)
   (action	:initform nil :initarg :action)	;: (or keyword string)
   (offset	:initform nil :initarg :offset)	;: (or nil list)
   (font	:initform nil :initarg :font)))	;: (or nil font-info)


(defmethod initialize-instance :after ((obj uml-flow-spec) &rest initargs)
  (declare (ignore initargs))
  (with-slots (offset font) obj
	(setf offset (or offset (make-point 0 0)))
	(when font
	  (setf font (make-font font)))))

(defmethod check ((spec uml-flow-spec) canvas dict)
  (with-slots (guard action offset font) spec
	(check-member guard  :nullable   t :types (or keyword string))
	(check-member action :nullable   t :types (or keyword string))
	(check-member offset :nullable nil :types cons)
	(when offset
	  (with-point (x y) offset
		(check-member x   :nullable nil :types number)
		(check-member y   :nullable nil :types number)))
	(check-object font   canvas dict :nullable t :class font-info))
  nil)

(defun uml-flow-spec-to-string (obj)
  (with-slots (guard action) obj
	(format-string (when guard
					 (format-string "[" guard "]"))
				   (when action
					 (format-string "/" action)))))

(defun uml-flow-spec-draw (obj x y align writer)
  (let ((txt (uml-flow-spec-to-string obj)))
	(with-slots (offset font) obj
	  (write-text-tag (+ x (point-x offset))
					  (+ y (point-y offset))
					  txt writer :align align :font font))))

(defun make-uml-flow-spec (&rest params)
  (if (= 1 (length params))
	  (let ((param (car params)))
		(cond
		  ((typep   param  'uml-flow-spec) param)
		  ((listp   param) (apply #'make-uml-flow-spec param))
		  (t               (make-uml-flow-spec :guard param))))
	  (destructuring-bind (&key guard action offset
								(font  nil  font-p)) params
		(make-instance 'uml-flow-spec
					   :guard    guard
					   :action   action
					   :offset   offset
					   :font     (if font-p  font  (or *uml-flow-spec-font*
															kaavio:*default-font*))))))


;;------------------------------------------------------------------------------
;;
;; class uml-flow
;;
;;------------------------------------------------------------------------------
(defclass uml-flow (kaavio:connector)
  ((keyword	:initform nil :initarg :keyword)	; (or nil uml-keyword-info)
   (spec	:initform nil :initarg    :spec)))	; (or nil uml-flow-spec)

(defmethod initialize-instance :after ((flow uml-flow) &rest initargs)
  (declare (ignore initargs))
  (with-slots (keyword spec) flow
	(setf keyword (and keyword (make-uml-keyword   keyword)))
	(setf spec    (and spec    (make-uml-flow-spec spec))))
  flow)


(defmethod check ((flow uml-flow) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (keyword spec) flow 
	(check-object keyword canvas dict :nullable t :class uml-keyword-info)
	(check-object spec    canvas dict :nullable t :class uml-flow-spec))
  nil)
	

(defmethod entity-composition-p ((flow uml-flow))
  (with-slots (keyword spec) flow
	(or keyword
		spec
		(call-next-method))))


(defun uml-flow-draw-spec (tran x y sin cos writer)
  (with-slots (keyword spec) tran
	(labels ((calc-width-and-height ()
			   (let* ((width   0)
					  (height  0)
					  (offset  (if spec (slot-value spec 'offset) '(0 0)))
					  (k-font  (and keyword (slot-value keyword 'font)))
					  (k-size  (if  k-font  (slot-value k-font  'kaavio::size) 0))
					  (s-font  (and spec    (slot-value spec    'font)))
					  (s-size  (if  s-font  (slot-value s-font  'kaavio::size) 0))
					  (spacing (if  s-font  (slot-value s-font  'kaavio::line-spacing) 0)))
				 (when keyword
				   (multiple-value-setq (width height)
										(font-calc-textarea k-font
												 (uml-keyword-to-string keyword))))
				 (when spec
				   (incf height spacing)
				   (multiple-value-bind (w h)
					   (font-calc-textarea s-font (uml-flow-spec-to-string spec))
					 (setf width (max width w))
					 (incf height h)))
				 (values width height offset k-size s-size spacing))))
	  (multiple-value-bind (width height offset
							kwd-size spec-size spacing) (calc-width-and-height)
		(let (;(x (+ x (* sin height)))
			  (y (- y (* cos height))))
		  (decf y (/ height 2))
		  (when (< 0 sin) (incf x (/ width 2)))
		  (when (< sin 0) (decf x (/ width 2)))
		  (when keyword
			(incf y kwd-size)
			(uml-keyword-draw keyword (+ x (point-x offset))
									  (+ y (point-y offset)) :center writer)
			(incf y spacing))
		  (when spec
			(incf y spec-size)
			(uml-flow-spec-draw spec x y :center writer)))))))
		

;;------------------------------------------------------------------------------
;;
;; macro uml-flow
;;
;;------------------------------------------------------------------------------
(defmacro uml-flow (from to &key keyword spec style layer id)
  (let ((g-kwd  (gensym "KWD"))
		(g-spec (gensym "SPEC")))
	`(let ((,g-kwd  ,keyword)
		   (,g-spec ,spec))
	   (register-entity (make-instance 'uml-flow
									   :from ,from :to ,to
									   :keyword ,g-kwd :spec ,g-spec
									   :label (and (or ,g-kwd ,g-spec)
												   #'uml-flow-draw-spec)
									   :style ,style
									   :stroke (or *uml-flow-stroke* *default-stroke*)
									   :end1 nil :end2 :arrow :layer ,layer :id ,id)))))

