
(in-package :kaavio-user)

(defparameter *uml-fork-join-width*      10)
(defparameter *uml-fork-join-length*     40)
(defparameter *uml-fork-join-color*  :black)

;;------------------------------------------------------------------------------
;;
;; class uml-fork
;;
;;------------------------------------------------------------------------------
(defclass uml-fork (kaavio:rectangle) ())

(defmacro uml-fork-v (center &key width length fill link layer id)
  `(register-entity (make-instance 'uml-fork
								   :center ,center
								   :width  (or ,length *uml-fork-join-length*)
								   :height (or ,width  *uml-fork-join-width*)
								   :rx nil :ry nil :stroke :none
								   :fill   (or ,fill *uml-fork-join-color* *default-fill*)
								   :link ,link :layer ,layer :id ,id)))

(defmacro uml-fork-h (center &key width length fill link layer id)
  `(register-entity (make-instance 'uml-fork
								   :center ,center
								   :width  (or ,width  *uml-fork-join-width*)
								   :height (or ,length *uml-fork-join-length*)
								   :rx nil :ry nil :stroke :none
								   :fill   (or ,fill *uml-fork-join-color* *default-fill*)
								   :link ,link :layer ,layer :id ,id)))


;;------------------------------------------------------------------------------
;;
;; class uml-join
;;
;;------------------------------------------------------------------------------
(defclass uml-join (kaavio:rectangle)
  ((spec :initform nil :initarg :spec)))	; (or nil label-info)

(defmethod initialize-instance :after ((obj uml-join) &rest initargs)
  (declare (ignore initargs))
  (with-slots (spec) obj
	;;ToDo : spec で :position 指定が（実質的に）なければ join-v / join-h によって調整してやる？
	(setf spec (and spec (make-label spec))))
  obj)

(defmethod check ((obj uml-join) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (spec) obj
	(check-object spec canvas dict :nullable t :class  label-info))
  nil)

(defmethod entity-composition-p ((obj uml-join))
  t)  

(defmethod post-draw ((obj uml-join) writer)
  (with-slots (spec) obj
	(when spec
	  (draw-label spec obj writer)))
  (call-next-method)
;  (draw-canvas-frame (shape-get-subcanvas obj) writer)	;for debug...
  nil)

(defmacro uml-join-v (center &key spec width length fill link layer id)
  `(register-entity (make-instance 'uml-join
								   :center ,center :spec ,spec
								   :width  (or ,length *uml-fork-join-length*)
								   :height (or ,width  *uml-fork-join-width*)
								   :rx nil :ry nil :stroke :none
								   :fill   (or ,fill *uml-fork-join-color* *default-fill*)
								   :link ,link :layer ,layer :id ,id)))

(defmacro uml-join-h (center &key spec width length fill link layer id)
  `(register-entity (make-instance 'uml-join
								   :center ,center :spec ,spec
								   :width  (or ,width  *uml-fork-join-width*)
								   :height (or ,length *uml-fork-join-length*)
								   :rx nil :ry nil :stroke :none
								   :fill   (or ,fill *uml-fork-join-color* *default-fill*)
								   :link ,link :layer ,layer :id ,id)))
