
(in-package :kaavio-user)

(defparameter *uml-fork-join-width*      10)
(defparameter *uml-fork-join-length*     40)
(defparameter *uml-fork-join-color*  :black)
(defparameter *uml-fork-join-filter*    nil)
(defparameter *uml-fork-join-layer*     nil)


(defun uml-fork-join-fix-spec (direction spec)
  (when spec
    (let ((kaavio::*default-label-position* (ecase direction
                                              ((:h) :below)
                                              ((:v) :right))))
      (make-label spec))))
  
;;------------------------------------------------------------------------------
;;
;; class uml-fork-join
;;
;;------------------------------------------------------------------------------
(defclass uml-fork-join (kaavio:rectangle)
  ((spec :initform nil :initarg :spec)))    ; (or nil label-info)

(defmethod initialize-instance :after ((obj uml-fork-join) &rest initargs)
  (declare (ignore initargs))
  (with-slots (filter layer) obj
    (setf filter  (if (eq filter :none)
                      nil
                      (or filter *uml-fork-join-filter* *default-filter*)))
    (setf layer  (if (eq layer :none)
                     nil
                     (or layer *uml-fork-join-layer* *default-layer*))))
  obj)

(defmethod check ((obj uml-fork-join) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (spec) obj
    (check-object spec canvas dict :nullable t :class label-info))
  nil)

(defmethod entity-composition-p ((obj uml-fork-join))
  t)  

(defmethod post-draw ((obj uml-fork-join) writer)
  (with-slots (spec kaavio::clip-path) obj
    (when spec
      (draw-label spec obj kaavio::clip-path writer)))
  (call-next-method)
;  (draw-canvas-frame (shape-get-subcanvas obj) writer)    ;for debug...
  nil)

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-fork
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-fork}} position direction ${KEY} pivot width length fill link layer filter id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `direction` ---- 向きを `:h` か `:v` で指定します。横方向に流れるフローで使用する場合は `:h` 、縦方向なら `:v` です。
;;* `pivot` ---- `position` で指定した基準点が図形要素のどこにくるように描画するかを指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `width` ---- 幅を数値で指定します。省略した場合のデフォルト値は 10 です。
;;* `length` ---- 長さを数値で指定します。省略した場合のデフォルト値は 40 です。
;;* `fill` ---- 内部の塗り潰しを指定します。
;;* `link` ---- リンクにする場合、リンク先を指定します。
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;
;;${DESCRIPTION}
;;
;;　UML アクティビティ図におけるフォークを描画します。スタイルを統一したい場合、
;;with-uml-fork-join-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#アクティビティ図)
;;* [$$](#uml-fork)
;;* [$$](#uml-join)
;;* with-uml-fork-join-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-fork (position direction &key pivot width length fill link layer filter id)
  (let ((gw (gensym "WIDTH"))
        (gh (gensym "HEIGHT")))
    `(let ((,gw (or ,width  *uml-fork-join-width*))
           (,gh (or ,length *uml-fork-join-length*)))
       (register-entity (make-instance 'uml-fork-join
                                       :position ,position :pivot ,pivot :spec nil
                                       :width  (ecase ,direction ((:h) ,gw) ((:v) ,gh))
                                       :height (ecase ,direction ((:h) ,gh) ((:v) ,gw))
                                       :rx 0 :ry 0 :stroke :none
                                       :fill   (or ,fill *uml-fork-join-color* *default-fill*)
                                       :clip-path *current-clip-path*
                                       :link ,link :filter ,filter :layer ,layer :id ,id)))))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-join
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-join}} position direction ${KEY} pivot spec width length fill link filter layer id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `direction` ---- 向きを `:h` か `:v` で指定します。横方向に流れるフローで使用する場合は `:h` 、縦方向なら `:v` です。
;;* `pivot` ---- `position` で指定した基準点が図形要素のどこにくるように描画するかを指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `spec` ---- ジョイン仕様の指定をする場合、そのテキストをラベル形式で指定します。指定方法は [$@ 節](#ラベル)を参照してください。
;;* `width` ---- 幅を数値で指定します。省略した場合のデフォルト値は 10 です。
;;* `length` ---- 長さを数値で指定します。省略した場合のデフォルト値は 40 です。
;;* `fill` ---- 内部の塗り潰しを指定します。
;;* `link` ---- リンクにする場合、リンク先を指定します。
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;
;;${DESCRIPTION}
;;
;;　UML アクティビティ図におけるジョインを描画します。スタイルを統一したい場合、
;;with-uml-fork-join-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#アクティビティ図)
;;* [$$](#uml-fork)
;;* [$$](#uml-join)
;;* with-uml-fork-join-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-join (position direction &key pivot spec width length fill link filter layer id)
  (let ((gw (gensym "WIDTH"))
        (gh (gensym "HEIGHT")))
    `(let ((,gw (or ,width  *uml-fork-join-width*))
           (,gh (or ,length *uml-fork-join-length*)))
       (register-entity (make-instance 'uml-fork-join
                                       :position ,position :pivot ,pivot
                                       :spec (uml-fork-join-fix-spec ,direction ,spec)
                                       :width  (ecase ,direction ((:h) ,gw) ((:v) ,gh))
                                       :height (ecase ,direction ((:h) ,gh) ((:v) ,gw))
                                       :rx 0 :ry 0 :stroke :none
                                       :fill   (or ,fill *uml-fork-join-color* *default-fill*)
                                       :clip-path *current-clip-path*
                                       :link ,link :filter ,filter :layer ,layer :id ,id)))))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-fork-join-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-fork-join-options}} (${KEY} width length color filter layer) ${BODY} body
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-fork マクロおよび uml-join マクロで描画される図形要素のデフォルトオプションを
;;変更します。キーワードパラメータ群の説明はそれぞれのマクロを参照してください。
;;
;;${SEE_ALSO}
;;
;;* uml-fork マクロ
;;* uml-join マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-fork-join-options ((&key width length
                                            color filter layer) &rest body)
  (labels ((impl (params acc)
             (if (null params)
                 acc
                 (let ((value  (car  params))
                       (symbol (cadr params)))
                   (impl (cddr params)
                         (if (null value)
                             acc
                             (push (list symbol value) acc)))))))
    (let ((lst (impl (list width   '*uml-fork-join-width*
                           length  '*uml-fork-join-length*
                           color   '*uml-fork-join-color*
                           filter  '*uml-fork-join-filter*
                           layer   '*uml-fork-join-layer*) nil)))
      `(let ,lst
         ,@body))))

