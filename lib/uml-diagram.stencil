
(in-package :kaavio-user)

(defparameter *uml-diagram-font*      nil)
(defparameter *uml-diagram-fill*   :white)
(defparameter *uml-diagram-stroke* :black)
(defparameter *uml-diagram-margin*      5)


;;-------------------------------------------------------------------------------
;;
;; class uml-diagram
;;
;;-------------------------------------------------------------------------------
(defclass uml-diagram (kaavio:shape)
  ((topleft	:initform nil :initarg :topleft)	; point
   (width	:initform   0 :initarg :width)		; number
   (height	:initform   0 :initarg :height)		; number
   (title	:initform nil :initarg :title)		; (or keyword string)
   (margin	:initform   0 :initarg :margin)		; number
   (font	:initform nil :initarg :font)		; (or nil font-info)
   (fill	:initform nil :initarg :fill)		; (or nil fill-info)
   (stroke	:initform nil :initarg :stroke)))	; (or nil stroke-info)

(defmethod initialize-instance :after ((obj uml-diagram) &rest initargs)
  (declare (ignore initargs))
  (with-slots (margin font fill stroke) obj
	(setf margin (or margin   *uml-diagram-margin*))
	(setf font   (make-font   (or font   *uml-diagram-font*   *default-font*)))
	(setf fill   (make-fill   (or fill   *uml-diagram-fill*   *default-fill*   :white)))
	(setf stroke (make-stroke (or stroke *uml-diagram-stroke* *default-stroke* :black))))
  obj)

(defmethod check ((obj uml-diagram) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (topleft width height title margin font fill stroke) obj
	(unless (point-p topleft)
	  (throw-exception "topleft is not point."))
	(check-member width  :nullable nil :types number)
	(check-member height :nullable nil :types number)
	(check-member title  :nullable nil :types (or keyword string))
	(check-member margin :nullable nil :types number)
	(check-object font         canvas dict :nullable   t :class font-info)
	(check-object fill         canvas dict :nullable   t :class fill-info)
	(check-object stroke       canvas dict :nullable   t :class stroke-info)
	(setf topleft (canvas-fix-point canvas topleft))
	(setf title  (fix-name title)))
  nil)

(defmethod attribute-width ((obj uml-diagram))
  (slot-value obj 'width))

(defmethod attribute-height ((obj uml-diagram))
  (slot-value obj 'height))

(defmethod attribute-center ((obj uml-diagram))
  (with-slots (topleft width height) obj
	(point/xy+ topleft (/ width 2) (/ height 2))))

;;MEMO : use impelementation of shape...
;;(defmethod shape-connect-point ((obj uml-diagram) type1 type2 arg) ...)

  
;;MEMO : use impelementation of shape...
;;(defmethod shape-get-subcanvas ((obj uml-diagram)) ...)

(defmethod entity-composition-p ((obj uml-diagram))
  t)
  
(defmethod draw-entity ((obj uml-diagram) writer)
  (pre-draw obj writer)
  (let ((canvas (make-canvas (attribute-topleft obj)
							 (attribute-width   obj)
							 (attribute-height  obj))))
	(with-slots (width height title margin font fill stroke) obj
	  (macrolet ((register-entity (entity)
				   `(check-and-draw-local-entity ,entity canvas writer)))
		(let ((*default-font*   font)
			  (*default-fill*   fill)
			  (*default-stroke* stroke))
		  (rectangle (make-point (/ width 2) (/ height 2)) width height)
		  (paragraph (make-point margin margin) title :align :left :valign :top)
		  (multiple-value-bind (w h) (kaavio::caluculate-paragraph-shapesize
									  font (kaavio::string/split title #\newline))
			(incf w (* 2 margin))
			(incf h (* 2 margin))
			(path `((:move-to (0 ,h)
							  (,w ,h)
							  (,(+ w margin) ,(- h margin))
							  (,(+ w margin) 0))) :fill :none))))))
  (post-draw obj writer)
  nil)



;;-------------------------------------------------------------------------------
;;
;; macro uml-diagram
;;
;;-------------------------------------------------------------------------------
(defmacro uml-diagram (topleft width height title
							   &key margin font fill stroke layer id contents)
  (let ((code `(register-entity (make-instance 'uml-diagram
											   :topleft ,topleft
											   :width ,width :height ,height
											   :title ,title :margin ,margin
											   :font ,font :fill ,fill
											   :stroke ,stroke :layer ,layer :id ,id))))
	(if (null contents)
		code
		(let ((g-obj (gensym "OBJ")))
		  `(let* ((,g-obj ,code)
				  (canvas (shape-get-subcanvas ,g-obj)))
			 (declare (special canvas))
			 ,@contents)))))

