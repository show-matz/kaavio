
(in-package :kaavio-user)

(load-stencil :uml-common-base)
(load-stencil :uml-connection-common)
(load-stencil :uml-stereotype-info)
(load-stencil :uml-multiplicity-info)
(load-stencil :uml-role-info)

(defparameter *uml-association-stroke*      :black)
(defparameter *uml-association-arrow-size* :medium)
(defparameter *uml-association-filter*         nil)
(defparameter *uml-association-layer*          nil)
(defparameter *uml-association-font*           nil)


;;------------------------------------------------------------------------------
;;
;; class uml-association
;;
;;------------------------------------------------------------------------------
(defclass uml-association (kaavio:connector)
  ((arrows     :initform nil  :initarg  :arrows)      ; integer ( 0 - 2 )
   (name       :initform nil  :initarg  :name)        ; (or nil kaavio:label-info)
   (stereotype :initform nil  :initarg  :stereotype)  ; (or nil uml-stereotype-info)
   (role1      :initform nil  :initarg  :role1)       ; (or nil uml-role-info)
   (role2      :initform nil  :initarg  :role2)       ; (or nil uml-role-info)
   (mult1      :initform nil  :initarg  :mult1)       ; (or nil uml-multiplicity-info)
   (mult2      :initform nil  :initarg  :mult2)))     ; (or nil uml-multiplicity-info)


(defmethod initialize-instance :after ((ass uml-association) &rest initargs)
  (declare (ignore initargs))
  (with-slots (stereotype role1 role2 mult1 mult2) ass
    (setf stereotype (and stereotype (make-uml-stereotype   stereotype)))
    (setf role1      (and role1      (make-uml-role         role1  )))
    (setf role2      (and role2      (make-uml-role         role2  )))
    (setf mult1      (and mult1      (make-uml-multiplicity mult1  )))
    (setf mult2      (and mult2      (make-uml-multiplicity mult2  ))))
  ass)


(defmethod check ((ass uml-association) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (arrows name stereotype role1 role2 mult1 mult2) ass
    (check-member arrows     :nullable t :types integer)
    (check-object name       canvas dict :nullable t :class label-info)
    (check-object stereotype canvas dict :nullable t :class uml-stereotype-info)
    (check-object role1      canvas dict :nullable t :class uml-role-info)
    (check-object role2      canvas dict :nullable t :class uml-role-info)
    (check-object mult1      canvas dict :nullable t :class uml-multiplicity-info)
    (check-object mult2      canvas dict :nullable t :class uml-multiplicity-info)
    (when arrows
      (check-numbers arrows 0 1 2)))
  nil)

(defmethod entity-composition-p ((ass uml-association))
  (with-slots (name stereotype role1 role2 mult1 mult2) ass
    (or name
        stereotype
        role1
        role2
        mult1
        mult2
        (call-next-method))))

(defmethod post-draw ((ass uml-association) writer)
  (with-slots (role1 role2 mult1 mult2 kaavio::clip-path) ass
    (when role1 (uml-role-draw-beside-line         role1 ass :from kaavio::clip-path writer))
    (when role2 (uml-role-draw-beside-line         role2 ass :dest kaavio::clip-path writer))
    (when mult1 (uml-multiplicity-draw-beside-line mult1 ass :from kaavio::clip-path writer))
    (when mult2 (uml-multiplicity-draw-beside-line mult2 ass :dest kaavio::clip-path writer)))
  (call-next-method))
      


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-association
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{umL-association}} from to ${KEY} arrows stereotype keyword name style spacing role1 role2 mult1 mult2 filter layer id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `from` ---- 接続元となる要素の ID をキーワードで指定します。point 値も指定できます。
;;* `to` ---- 接続先となる要素の ID をキーワードで指定します。point 値も指定できます。
;;* `arrow` ---- 関連の終端に矢印を描画する場合は 1 を、両端に矢印を描画する場合は 2 を指定します。
;;* `stereotype` ---- ステレオタイプを明示する場合はステレオタイプ情報を指定します。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `keyword` ---- キーワードを明示する場合はステレオタイプ情報を指定します。 `stereotype` が指定されている場合は無視されます。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `name` ---- 関連に名前をつける場合、ラベル形式で指定します。
;;* `style` ---- 接続線の引き方を指定します。詳細は [$@ 節](#コネクタ)を参照してください。
;;* `spacing` ---- 2 回以上折れ曲がる接続線における「自由な線分」の位置を調整するためのパラメータです。詳細は [$@ 節](#コネクタ)を参照してください。
;;* `role1` ---- `from` 側にロールを明示する場合はロール情報を指定します。詳細は [$@ 節](#uml-role-info) を参照してください。
;;* `role2` ---- `to` 側にロールを明示する場合はロール情報を指定します。詳細は [$@ 節](#uml-role-info) を参照してください。
;;* `mult1` ---- `from` 側に多重度を明示する場合は多重度情報を指定します。詳細は [$@ 節](#uml-multiplicity-info) を参照してください。
;;* `mult2` ---- `to` 側に多重度を明示する場合は多重度情報を指定します。詳細は [$@ 節](#uml-multiplicity-info) を参照してください。
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します。
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します。
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します。
;;
;;${DESCRIPTION}
;;
;;　クラス図を始めとする各種の UML ダイアグラムにおける関連を描画します。スタイルを統一
;;したい場合、with-uml-association-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#クラス図)
;;* [$$](#uml-association)
;;* with-uml-association-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-association (from to &key arrows stereotype keyword name style spacing
                                     role1 role2 mult1 mult2 filter layer id)
  (let ((g-arr   (gensym "ARROWS"))
        (g-stype (gensym "STEREOTYPE"))
        (g-name  (gensym "NAME")))
    `(let ((,g-arr   ,arrows)
           (,g-stype ,(or stereotype keyword))
           (,g-name  ,name))
       (register-entity (make-instance 'uml-association
                                       :from ,from :to ,to
                                       :stereotype ,g-stype :style ,style :spacing ,spacing
                                       :name (uml-make-label *uml-association-font* ,g-name)
                                       :label (and (or ,g-stype ,g-name)
                                                   #'uml-connection-draw-label)
                                       :stroke (or *uml-association-stroke* *default-stroke*)
                                       :clip-path *current-clip-path*
                                       :end1 (and ,g-arr (integerp ,g-arr) (= ,g-arr 2)
                                                  (list :type :arrow :size *uml-association-arrow-size*))
                                       :end2 (and ,g-arr (integerp ,g-arr) (< 0 ,g-arr 3)
                                                  (list :type :arrow :size *uml-association-arrow-size*))
                                       :role1 ,role1 :role2 ,role2
                                       :mult1 ,mult1 :mult2 ,mult2
                                       :filter (or ,filter *uml-association-filter* *default-filter*)
                                       :layer  (or ,layer  *uml-association-layer*  *default-layer*)
                                       :id ,id)))))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-association-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-association-options}} (${KEY} stroke arrow-size font filter layer) ${BODY} body
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-association マクロで描画される図形要素のデフォルトオプションを変更します。キーワード
;;パラメータ群の説明は uml-association マクロを参照してください。
;;
;;${SEE_ALSO}
;;
;;* uml-association マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-association-options ((&key stroke arrow-size font filter layer) &rest body)
  (labels ((impl (params acc)
             (if (null params)
                 acc
                 (let ((value  (car  params))
                       (symbol (cadr params)))
                   (impl (cddr params)
                         (if (null value)
                             acc
                             (push (list symbol value) acc)))))))
    (let ((lst (impl (list  stroke     '*uml-association-stroke*
                            arrow-size '*uml-association-arrow-size*
                            font       '*uml-association-font*
                            filter     '*uml-association-filter*
                            layer      '*uml-association-layer*) nil)))
      `(let ,lst
         ,@body))))

