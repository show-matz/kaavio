
(in-package :kaavio-user)

(load-stencil :uml-common-base)

(defparameter *uml-usecase-font*         nil)
(defparameter *uml-usecase-fill*      :white)
(defparameter *uml-usecase-stroke*    :black)
(defparameter *uml-usecase-margin*        20)
(defparameter *uml-usecase-filter*       nil)
(defparameter *uml-usecase-layer*        nil)

;;------------------------------------------------------------------------------
;;
;; class uml-usecase
;;
;;------------------------------------------------------------------------------
(defclass uml-usecase (kaavio:text-shape)
  ((stereotype :initform nil :initarg :stereotype) ; (or nil uml-stereotype-info)
   (text       :initform nil :initarg :text)       ; (or keyword string)
   (filter     :initform nil :initarg :filter)))   ; (or nil keyword)

(defmethod initialize-instance :after ((obj uml-usecase) &rest initargs)
  (declare (ignore initargs))
  ;;(format t "initialize-instance :after called.~%")
  (with-slots (stereotype filter layer) obj
    (setf stereotype (and stereotype (make-uml-stereotype stereotype)))
    (setf filter  (if (eq filter :none)
                      nil
                      (or filter *uml-usecase-filter* *default-filter*)))
    (setf layer   (if (eq layer :none)
                      nil
                      (or layer *uml-usecase-layer* *default-layer*))))
  obj)

(defmethod check ((obj uml-usecase) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  ;;(format t "check called.~%")
  (with-slots (stereotype filter) obj
    (check-object stereotype canvas dict :nullable t :class uml-stereotype-info)
    (check-member filter                 :nullable t :types keyword)))


;; override of group::draw-group
(defmethod draw-group ((obj uml-usecase) writer)
  (let ((canvas (group-get-canvas obj)))
    (let ((width  (canvas-width  canvas))
          (height (canvas-height canvas)))
      (macrolet ((register-entity (entity)
                   `(check-and-draw-local-entity ,entity canvas writer)))
        (with-slots (stereotype filter
                      (text kaavio::text) (font kaavio::font) (margin kaavio::margin)
                      (fill kaavio::fill) (stroke kaavio::stroke) (clip-path kaavio::clip-path)) obj
          (let ((*current-clip-path* clip-path))
            ;; draw usecase body
            (writer-write writer "<g" (write-when filter " filter='url(#" it ")' ") ">")
            (writer-incr-level writer)
            ;;
            (ellipse `(,(/ width 2) ,(/ height 2))
                     (/ width 2) (/ height 2) :fill fill :stroke stroke)
            ;; draw text
            (let ((cv (uml-draw-textarea obj stereotype writer)))
              (declare (ignorable cv))
;              (rect (canvas-center cv)
;                    (canvas-width cv) (canvas-height cv)
;                    :fill '(:color :red :opacity 0.1) :stroke :red)
              )
            (writer-decr-level writer)
            (writer-write writer "</g>"))))))
  nil)

;for debug...
;(defmethod post-draw ((obj uml-usecase) writer)
;  (call-next-method)
;  (draw-canvas-frame (shape-get-subcanvas obj) writer))
 

(defmethod text-shape-calc-size ((obj uml-usecase))
  (multiple-value-bind (w h) (call-next-method)
    (values w (+ h (slot-value obj 'kaavio::margin)))))

(defmethod text-shape-paragraph-area ((obj uml-usecase))
  (shape-get-subcanvas obj))

(defmethod shape-get-subcanvas ((obj uml-usecase))
  (make-canvas (attribute-topleft obj)
               (attribute-width   obj)
               (attribute-height  obj)))

(defmethod shape-connect-point ((obj uml-usecase) type1 type2 arg)
  (ellipse-connect-point (attribute-center obj)
                         (/ (attribute-width  obj) 2)
                         (/ (attribute-height obj) 2) type1 type2 arg))
  
;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-usecase
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-usecase}} position text ${KEY} pivot stereotype keyword width height font fill stroke margin link filter layer id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `text` ---- ユースケースのテキストを指定します。改行を含むことで複数行を記述できます。
;;* `pivot` ---- `position` で指定した基準点が図形要素のどこにくるように描画するかを指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `stereotype` ---- ステレオタイプを明示する場合はステレオタイプ情報を指定します。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `keyword` ---- キーワードを明示する場合はステレオタイプ情報を指定します。 `stereotype` が指定されている場合は無視されます。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `width` ---- 幅を自動決定せず、明示的に指定したい場合に数値で指定します。
;;* `height` ---- 高さを自動決定せず、明示的に指定したい場合に数値で指定します。
;;* `font` ---- フォントを指定します。
;;* `fill` ---- 内部の塗り潰しを指定します。
;;* `stroke` ---- 外枠を描画するストロークを指定します
;;* `margin` ---- テキストの周囲に確保する余白を数値で指定します。デフォルト値は 20 です。
;;* `link` ---- リンクにする場合、リンク先を指定します。
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;
;;${DESCRIPTION}
;;
;;　UML ユースケース図におけるユースケースを描画します。スタイルを統一したい場合、
;;with-uml-action-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#ユースケース図)
;;* [$$](#uml-usecase)
;;* with-uml-usecase-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-usecase (position text &key pivot stereotype keyword width height font
                                          fill stroke margin link filter layer id)
  `(register-entity
        (make-instance 'uml-usecase
                       :position ,position :pivot ,pivot
                       :width ,width :height ,height
                       :text ,text :stereotype ,(or stereotype keyword)
                       :margin   (or ,margin *uml-usecase-margin*)
                       :font     (or ,font   *uml-usecase-font*   *default-font*)
                       :fill     (or ,fill   *uml-usecase-fill*   *default-fill*   :white)
                       :stroke   (or ,stroke *uml-usecase-stroke* *default-stroke* :black)
                       :clip-path kaavio:*current-clip-path*
                       :link ,link :filter ,filter :layer ,layer :id ,id)))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-usecase-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-usecase-options}} (${KEY} font fill stroke margin filter layer) ${BODY} body
;;
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-usecase マクロで描画される図形要素のデフォルトオプションを変更します。キーワード
;;パラメータ群の説明は uml-usecase マクロを参照してください。
;;
;;${SEE_ALSO}
;;
;;* uml-usecase マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-usecase-options ((&key (font   nil font-p)
                                          (fill   nil fill-p)
                                          (stroke nil stroke-p)
                                          (margin nil margin-p)
                                          (filter nil filter-p)
                                          (layer  nil layer-p)) &rest body)
  (let ((bindings nil))
    (labels ((impl (arg-p binding)
               (when arg-p (push binding bindings))))
      (impl font-p   `(*uml-usecase-font*   (make-font2   *uml-usecase-font*   ,font)))
      (impl fill-p   `(*uml-usecase-fill*   (make-fill2   *uml-usecase-fill*   ,fill)))
      (impl stroke-p `(*uml-usecase-stroke* (make-stroke2 *uml-usecase-stroke* ,stroke)))
      (impl margin-p `(*uml-usecase-margin* ,margin))
      (impl filter-p `(*uml-usecase-filter* ,filter))
      (impl layer-p  `(*uml-usecase-layer*  ,layer)))
    `(let ,(nreverse bindings)
       ,@body)))
