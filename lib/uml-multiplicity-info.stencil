
(in-package :kaavio-user)

(defparameter *uml-multiplicity-font*     nil)

;;------------------------------------------------------------------------------
;;
;; class uml-multiplicity-info
;;
;;------------------------------------------------------------------------------
(defclass uml-multiplicity-info ()
  ((min     :initform nil :initarg :min)        ; (or keyword integer)
   (max     :initform nil :initarg :max)        ; (or keyword integer)
   (offset  :initform nil :initarg :offset)     ; (or nil list)
   (font    :initform nil :initarg :font)))     ; (or nil font-info)

(defmethod initialize-instance :after ((mul uml-multiplicity-info) &rest initargs)
  (declare (ignore initargs))
  (with-slots (offset font) mul
    (setf offset (or offset (make-point 0 0)))
    (when font
      (setf font (make-font font)))))

(defmethod check ((mul uml-multiplicity-info) canvas dict)
  (with-slots (min max offset font) mul
    (check-member min      :nullable nil :types (or keyword integer))
    (check-member max      :nullable nil :types (or keyword integer))
    (check-member offset   :nullable   t :types cons)
    (when offset
      (with-point (x y) offset
        (check-member x    :nullable nil :types number)
        (check-member y    :nullable nil :types number)))
    (check-object font     canvas dict :nullable t :class font-info)
    (when (keywordp min)
      (check-keywords min :*))
    (when (keywordp max)
      (check-keywords max :*)))
  nil)

(defun uml-multiplicity-to-string (mul)
  (with-slots (min max) mul
    (if (eql min max)
        (format-string min)
        (format-string min ".." max))))

(defun uml-multiplicity-draw (mul x y align clip-path writer)
  (let ((txt (uml-multiplicity-to-string mul)))
    (with-slots (font) mul
      (write-text-tag x y txt writer :align align :font font :clip-path clip-path))))

;; type := :from|:dest
(defun uml-multiplicity-draw-beside-line (mul line type clip-path writer)
  (unless (typep line 'kaavio:line)
    (throw-exception "multiplicity-info : line parameter is not line object"))
  (with-slots (offset font) mul
    (destructuring-bind (p1 . p2) (kaavio::line-get-endpoints line type)
      (let* ((degree  120)
             (distance 10)
             (x1    (point-x p2))
             (y1    (point-y p2))
             (x2    (+ x1 (* distance (kaavio::math/cos3 p1 p2 degree)) (point-x offset)))
             (y2    (+ y1 (* distance (kaavio::math/sin3 p1 p2 degree)) (point-y offset)))
             (align (if (< x1 x2) :left :right)))
        (when (< y1 y2)
          (incf y2 (slot-value font 'kaavio::size)))
        (uml-multiplicity-draw mul x2 y2 align clip-path writer)))))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### function make-uml-multiplicity
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{make-uml-multiplicity}} ${REST} params
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　指定されたパラメータで多重度情報を生成します。上記は簡潔な記述で柔軟な多重度情報の生成を
;;可能にするためのもので、 `params` として渡されるパラメータ数に応じて以下のことをします。
;;
;;* パラメータ数が 1 の場合
;;    * ドットリストを使った多重度指定（ car / cdr それぞれが `:*` または整数値） `cons` の場合、 `(make-uml-multiplicity :min (car param) :max (cdr param))` を返します。
;;    * 多重度情報が渡された場合、それをそのまま返します。
;;    * リスト lst が渡された場合、 `(apply #'make-uml-multiplicity lst)` を返します。
;;    * 上記のいずれでもない prm の場合、 `(make-uml-multiplicity :min prm :max prm)` を返します。
;;* パラメータ数が 2 以上の場合
;;    * 後述します。
;;
;;　パラメータ数が 2 以上の場合、make-uml-multiplicity 関数は実質的に以下の関数であるかのように
;;振舞います。
;;
;;<!-- stack:push li class='syntax' -->
;;
;;* ${{B}{make-uml-multiplicity}} ${KEY} min max offset font
;;
;;<!-- stack:pop li -->
;;
;;　各パラメータの意味は以下の通りです。
;;
;;* `min` ---- 多重度の最小値を指定します。整数または `:*` です。
;;* `max` ---- 多重度の最大値を指定します。整数または `:*` です。
;;* `offset` ---- 描画位置調整のためのオフセット情報を `(x y)` 形式で指定します。
;;* `font` ---- フォントを指定します。
;;
;;${SEE_ALSO}
;;
;;* [$$](#uml-multiplicity-info)
;;* [$$](#uml-aggregation)
;;* [$$](#uml-association)
;;* [$$](#uml-composition)
;;
;;${NOTES}
;;
;;　通常、この関数を明示的に使用する必要はありません。uml-assciation マクロの `:mult1` などに
;;指定されたパラメータは内部でこの関数に渡されるため、 `:mult1 1` や `:mult1 '(0 . 5)` 、あるいは 
;;`:mult1 '(:min 5 :max 100 :offset (-5 3))` といった記述で多重度情報を指定できます。
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defun make-uml-multiplicity (&rest params)
  (labels ((minmaxp (param)
             (and (consp param)
                  (or (eq :* (car param))
                      (integerp (car param)))
                  (or (eq :* (cdr param))
                      (integerp (cdr param))))))
    (if (= 1 (length params))
        (let ((param (car params)))
          (cond
            ((minmaxp param) (make-uml-multiplicity :min (car param)
                                                    :max (cdr param)))
            ((typep   param  'uml-multiplicity-info) param)
            ((listp   param) (apply #'make-uml-multiplicity param))
            (t               (make-uml-multiplicity :min param :max param))))
        (destructuring-bind (&key min max offset
                                  (font     nil     font-p)) params
          (make-instance 'uml-multiplicity-info
                         :min      min
                         :max      max
                         :offset   offset
                         :font     (if font-p     font     (or *uml-multiplicity-font*
                                                               kaavio:*default-font*)))))))

