
(in-package :kaavio-user)

;;------------------------------------------------------------------------------
;;
;; class uml-keyword-info
;;
;;------------------------------------------------------------------------------
(defclass uml-keyword-info ()
  ((name    :initform nil :initarg :name)))    ; (or keyword string)


;; no implementation...
;(defmethod initialize-instance :after ((kwd uml-keyword-info) &rest initargs)
;  (declare (ignore initargs))
;  )

(defmethod check ((kwd uml-keyword-info) canvas dict)
  (with-slots (name) kwd
    (check-member name  :nullable nil :types (or keyword string)))
  nil)

(defun uml-keyword-to-string (kwd)
  (format-string "«" (slot-value kwd 'name) "»"))

(defun uml-keyword-draw (kwd x y align font clip-path writer)
  (let ((txt (uml-keyword-to-string kwd)))
    (write-text-tag x y txt writer :align align :font (make-font font) :clip-path clip-path)))


(defun uml-keyword-draw-beside-line (kwd line font clip-path writer)
  (multiple-value-bind (x y sin cos) (kaavio::line-get-center line)    ;;ToDo : export!?
    (declare (ignorable x y sin cos))
    (let* ((font (make-font font))
           (f-size (slot-value font 'kaavio::size))
           (offset f-size)
           (align (cond ((zerop sin) :center)
                        ((<  0  sin) :left)
                        (t           :right))))
      (incf y (/ f-size 2))
      (uml-keyword-draw kwd (+ x (* sin offset))
                            (- y (* cos offset)) align font clip-path writer))))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### function make-uml-keyword
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{make-uml-keyword}} ${REST} params
;;
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　${{TODO}{まだ記述されていません。}}
;;
;;${NO_SEE_ALSO}
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defun make-uml-keyword (&rest params)
  (if (= 1 (length params))
      (let ((param (car params)))
        (cond
          ((typep param 'uml-keyword-info) param)
          ((listp param) (apply #'make-uml-keyword param))
          (t             (make-uml-keyword :name param))))
      (destructuring-bind (&key (name  nil  name-p)) params
        (make-instance 'uml-keyword-info
                       :name  (if name-p  name  nil)))))

