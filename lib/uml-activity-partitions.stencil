
(in-package :kaavio-user)

(defparameter *uml-activity-partitions-lines*     :mid)
(defparameter *uml-activity-partitions-margin*       5)
(defparameter *uml-activity-partitions-font*       nil)
(defparameter *uml-activity-partitions-fill*    :white)
(defparameter *uml-activity-partitions-stroke*  :black)


(defun uml-activity-partitions-calc-title-height (lst margin font &optional cur)
  (if (null lst)
	  (+ cur (* 2 margin))
	  (multiple-value-bind (w h) (font-calc-textarea font (caar lst))
		(declare (ignore w))
		(uml-activity-partitions-calc-title-height (cdr lst)
												   margin font (max h cur)))))

;;------------------------------------------------------------------------------
;;
;; class uml-activity-partitions
;;
;;------------------------------------------------------------------------------
(defclass uml-activity-partitions (kaavio:entity)
  ((topleft			:initform nil :initarg :topleft)		; point
   (vertical		:initform nil :initarg :vertical)		; (or number list)
   (horizontal		:initform nil :initarg :horizontal)		; (or number list)
   (lines			:initform nil :initarg :lines)			; keyword - :min :mid :max
   (margin			:initform nil :initarg :margin)			; number
   (mode			:initform nil)							; keyword - :matrix :vertical :horizontal
   (height-cache-v	:initform nil)							; (or nil number)
   (height-cache-h	:initform nil)							; (or nil number)
   (font			:initform nil :initarg :font)			; (or nil font-info)
   (fill			:initform nil :initarg :fill)			; (or nil fill-info)
   (stroke			:initform nil :initarg :stroke)))		; (or nil stroke-info)

(defmethod initialize-instance :after ((obj uml-activity-partitions) &rest initargs)
  (declare (ignore initargs))
  (with-slots (lines margin font fill stroke) obj
	(setf lines  (or lines  :mid))
	(setf margin (or margin *uml-activity-partitions-margin*))
	(setf font   (make-font   (or font   *uml-activity-partitions-font*   *default-font*      nil)))
	(setf fill   (make-fill   (or fill   *uml-activity-partitions-fill*   *default-fill*   :white)))
	(setf stroke (make-stroke (or stroke *uml-activity-partitions-stroke* *default-stroke* :black))))
  obj)

(defmethod check ((obj uml-activity-partitions) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (topleft vertical horizontal lines margin mode
					   height-cache-v height-cache-h font fill stroke) obj
	(unless (point-p topleft)
	  (throw-exception "topleft is not point."))
	(check-member vertical   :nullable nil :types (or number list))
	(check-member horizontal :nullable nil :types (or number list))
	(labels ((check-&-fix (lst acc)
			   (if (null lst)
				   (nreverse acc)
				   (let* ((ent (car lst)))
					 (unless (and (listp ent)
								  (= 2 (length ent))
								  (or (stringp (car ent)) (keywordp (car ent)))
								  (numberp (cadr ent)))
					   (throw-exception "invalid entry : ~A" ent))
					 (check-&-fix (cdr lst) 
								  (push (list (fix-name (car ent)) (cadr ent)) acc))))))
	  (when (listp vertical)   (setf vertical   (check-&-fix vertical   nil)))
	  (when (listp horizontal) (setf horizontal (check-&-fix horizontal nil))))
	(check-member lines      :nullable nil :types keyword)
	(check-keywords lines :min :mid :max)
	(check-member margin     :nullable nil :types number)
	(setf mode (cond
				 ((and (listp   vertical) (listp   horizontal)) :matrix)
				 ((and (listp   vertical) (numberp horizontal)) :vertical)
				 ((and (numberp vertical) (listp   horizontal)) :horizontal)
				 (t (throw-exception "invalid combination of vertical & horizontal."))))
	(when (or (eq mode :matrix) (eq mode :vertical))
	  (setf height-cache-v
			(uml-activity-partitions-calc-title-height vertical margin font 0)))
	(when (or (eq mode :matrix) (eq mode :horizontal))
	  (setf height-cache-h
			(uml-activity-partitions-calc-title-height horizontal margin font 0)))
	(check-object font     canvas dict :nullable t :class   font-info)
	(check-object fill     canvas dict :nullable t :class   fill-info)
	(check-object stroke   canvas dict :nullable t :class stroke-info)
	(setf topleft (point+ topleft (canvas-topleft canvas))))
  nil)


(defun uml-activity-partitions-draw-4-vertical (obj writer)
  (with-slots (topleft vertical horizontal lines
					   margin height-cache-v font fill stroke) obj
	(let ((width            (reduce #'+ vertical :key #'second :initial-value 0))
		  (height           (+ height-cache-v horizontal))
		  (*default-font*   font)
		  (*default-fill*   fill)
		  (*default-stroke* stroke))
	  (let ((canvas (make-canvas topleft width height)))
		(declare (special canvas))
		(macrolet ((register-entity (entity)
					 `(check-and-draw-local-entity ,entity canvas writer)))
		  ;; draw background fill.
		  (unless (eq :none (slot-value fill 'kaavio::color))
			(rectangle (make-point (/ width  2)
								   (/ height 2)) width height :fill fill :stroke :none))
		  ;; draw lines.
		  (let ((x      0)
				(data nil))
			(when (or (eq lines :mid) (eq lines :max))
			  (push `(:move-to (0 ,height-cache-v) (,width ,height-cache-v)) data))
			(when (or (eq lines :max))
			  (push `(:move-to (0       0) (,width       0)) data)
			  (push `(:move-to (0 ,height) (,width ,height)) data))
			(push `(:move-to (,x 0) (,x ,height)) data)
			(dolist (ent vertical)
			  (let ((w (second ent)))
				(incf x w)
				(push `(:move-to (,x 0) (,x ,height)) data)))
			(path (nreverse data) :fill :none))
		  ;; draw titles.
		  (let ((x 0))
			(dolist (ent vertical)
			  (let ((w (second ent)))
				(paragraph (make-point (+ x (/ w 2)) (/ height-cache-v 2))
						   (first ent) :align :center :valign :center)
				(incf x w)))))))))

(defun uml-activity-partitions-draw-4-horizontal (obj writer)
  (with-slots (topleft vertical horizontal lines
					   margin height-cache-h font fill stroke) obj
	(let ((width            (+ height-cache-h vertical))
		  (height           (reduce #'+ horizontal :key #'second :initial-value 0))
		  (*default-font*   font)
		  (*default-fill*   fill)
		  (*default-stroke* stroke))
	  (let ((canvas (make-canvas topleft width height)))
		(declare (special canvas))
		(macrolet ((register-entity (entity)
					 `(check-and-draw-local-entity ,entity canvas writer)))
		  ;; draw background fill.
		  (unless (eq :none (slot-value fill 'kaavio::color))
			(rectangle (make-point (/ width  2)
								   (/ height 2)) width height :fill fill :stroke :none))
		  ;; draw lines.
		  (let ((y      0)
				(data nil))
			(when (or (eq lines :mid) (eq lines :max))
			  (push `(:move-to (,height-cache-h 0) (,height-cache-h ,height)) data))
			(when (or (eq lines :max))
			  (push `(:move-to (0      0) (0      ,height)) data)
			  (push `(:move-to (,width 0) (,width ,height)) data))
			(push `(:move-to (0 ,y) (,width ,y)) data)
			(dolist (ent horizontal)
			  (let ((h (second ent)))
				(incf y h)
				(push `(:move-to (0 ,y) (,width ,y)) data)))
			(path (nreverse data) :fill :none))
		  ;; draw titles.
		  (let ((y 0))
			(dolist (ent horizontal)
			  (let ((h (second ent)))
				(paragraph (make-point (/ height-cache-h 2) (+ y (/ h 2)))
						   (first ent) :rotate -90 :align :center :valign :center)
				(incf y h)))))))))

(defun uml-activity-partitions-draw-4-matrix (obj writer)
  (with-slots (topleft vertical horizontal lines margin
					   height-cache-v height-cache-h font fill stroke) obj
	(let ((width            (+ height-cache-h
							   (reduce #'+ vertical   :key #'second :initial-value 0)))
		  (height           (+ height-cache-v
							   (reduce #'+ horizontal :key #'second :initial-value 0)))
		  (*default-font*   font)
		  (*default-fill*   fill)
		  (*default-stroke* stroke))
	  (let ((canvas (make-canvas topleft width height)))
		(declare (special canvas))
		(macrolet ((register-entity (entity)
					 `(check-and-draw-local-entity ,entity canvas writer)))
		  ;; draw background fill.
		  (unless (eq :none (slot-value fill 'kaavio::color))
			(rectangle (make-point (/ width  2)
								   (/ height 2)) width height :fill fill :stroke :none))
		  ;; draw lines.
		  (let ((data nil))
			(when (or (eq lines :mid) (eq lines :max))
			  (push `(:move-to (0 ,height-cache-v) (,width  ,height-cache-v)) data)
			  (push `(:move-to (,height-cache-h 0) (,height-cache-h ,height)) data))
			(when (or (eq lines :max))
			  (push `(:move-to (0       0) (,width       0)) data)
			  (push `(:move-to (0       0) (0      ,height)) data)
			  #|(push `(:move-to (0 ,height) (,width ,height)) data)|#
			  #|(push `(:move-to (,width  0) (,width ,height)) data)|#)
			(let ((x height-cache-h))
			  (push `(:move-to (,x 0) (,x ,height)) data)
			  (dolist (ent vertical)
				(let ((w (second ent)))
				  (incf x w)
				  (push `(:move-to (,x 0) (,x ,height)) data))))
			(let ((y height-cache-v))
			  (push `(:move-to (0 ,y) (,width ,y)) data)
			  (dolist (ent horizontal)
				(let ((h (second ent)))
				  (incf y h)
				  (push `(:move-to (0 ,y) (,width ,y)) data))))
			(path (nreverse data) :fill :none))
		  ;; draw titles - vertical.
		  (let ((x height-cache-h))
			(dolist (ent vertical)
			  (let ((w (second ent)))
				(paragraph (make-point (+ x (/ w 2)) (/ height-cache-v 2))
						   (first ent) :align :center :valign :center)
				(incf x w))))
		  ;; draw titles - horizontal.
		  (let ((y height-cache-v))
			(dolist (ent horizontal)
			  (let ((h (second ent)))
				(paragraph (make-point (/ height-cache-h 2) (+ y (/ h 2)))
						   (first ent) :rotate -90 :align :center :valign :center)
				(incf y h)))))))))
  
;; override of entity::draw-entity
(defmethod draw-entity ((obj uml-activity-partitions) writer)
  (with-slots (mode) obj
	(let ((handler (ecase mode
					 ((:vertical)   #'uml-activity-partitions-draw-4-vertical)
					 ((:horizontal) #'uml-activity-partitions-draw-4-horizontal)
					 ((:matrix)     #'uml-activity-partitions-draw-4-matrix))))
	  (funcall handler obj writer))))


(labels ((recur (lst key base)
		   (if (null lst)
			   (throw-exception "ERROR : Key not found ~A." key)
			   (let ((entry (car lst)))
				 (if (string= key (first entry))
					 (values base (second entry))
					 (recur (cdr lst) key (+ base (second entry))))))))

  (defun uml-activity-partitions-get-subcanvas-4-vertical (obj keys)
	(unless (= 1 (length keys))
	  (throw-exception "ERROR : Invalid key length."))
	(with-slots (topleft vertical horizontal height-cache-v) obj
	  (multiple-value-bind (x w) (recur vertical
										(fix-name (first keys)) (point-x topleft))
		(multiple-value-bind (y h) (values (+ (point-y topleft) height-cache-v) horizontal)
		  (make-canvas (make-point x y :absolute) w h)))))

  (defun uml-activity-partitions-get-subcanvas-4-horizontal (obj keys)
	(unless (= 1 (length keys))
	  (throw-exception "ERROR : Invalid key length."))
	(with-slots (topleft vertical horizontal height-cache-h) obj
	  (multiple-value-bind (x w) (values (+ (point-x topleft) height-cache-h) vertical)
		(multiple-value-bind (y h) (recur horizontal
										  (fix-name (first keys)) (point-y topleft))
		  (make-canvas (make-point x y :absolute) w h)))))

  (defun uml-activity-partitions-get-subcanvas-4-matrix (obj keys)
	(unless (= 2 (length keys))
	  (throw-exception "ERROR : Invalid key length."))
	(with-slots (topleft vertical horizontal
						 height-cache-v height-cache-h) obj
	  (multiple-value-bind (x w) (recur vertical (fix-name (first keys))
										(+ (point-x topleft) height-cache-h))
		(multiple-value-bind (y h) (recur horizontal (fix-name (second keys))
										  (+ (point-y topleft) height-cache-v))
		  (make-canvas (make-point x y :absolute) w h))))))
  
(defun uml-activity-partitions-get-subcanvas (obj &rest keys)
  (let ((handler (ecase (slot-value obj 'mode)
				   ((:vertical)   #'uml-activity-partitions-get-subcanvas-4-vertical)
				   ((:horizontal) #'uml-activity-partitions-get-subcanvas-4-horizontal)
				   ((:matrix)     #'uml-activity-partitions-get-subcanvas-4-matrix))))
	(funcall handler obj keys)))


;;------------------------------------------------------------------------------
;;
;; macro uml-activity-partitions
;;
;;------------------------------------------------------------------------------
(defmacro uml-activity-partitions (topleft vertical horizontal
								   &key lines margin font fill stroke layer contents)
  (labels ((generate-contents-code (obj-sym lst acc)
			 (if (null lst)
				 (nreverse acc)
				 (let ((entry (car lst))
					   (rest  (cdr lst)))
				   (push `(let ((canvas (uml-activity-partitions-get-subcanvas
															 ,obj-sym ,@(car entry))))
							(declare (special canvas))
							,@(cdr entry)) acc)
				   (generate-contents-code obj-sym rest acc)))))
	(let ((code `(register-entity (make-instance 'uml-activity-partitions
												 :topleft ,topleft
												 :vertical ,vertical
												 :horizontal ,horizontal
												 :lines ,lines :margin ,margin :font ,font
												 :fill ,fill :stroke ,stroke :layer ,layer))))
	  (if (null contents)
		  code
		  (let ((g-obj (gensym "OBJ")))
			`(let ((,g-obj ,code))
			   ,@(generate-contents-code g-obj contents nil)))))))
