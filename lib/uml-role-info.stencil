
(in-package :kaavio-user)

(defparameter *uml-role-font*     nil)

;;------------------------------------------------------------------------------
;;
;; class uml-role-info
;;
;;------------------------------------------------------------------------------
(defclass uml-role-info ()
  ((name    :initform nil :initarg :name)        ; (or keyword string)
   (offset  :initform nil :initarg :offset)      ; (or nil list)
   (font    :initform nil :initarg :font)))      ; (or nil font-info)

(defmethod initialize-instance :after ((rol uml-role-info) &rest initargs)
  (declare (ignore initargs))
  (with-slots (offset font) rol
    (setf offset (or offset (make-point 0 0)))
    (when font
      (setf font (make-font font)))))

(defmethod check ((rol uml-role-info) canvas dict)
  (with-slots (name offset font) rol
    (check-member name     :nullable nil :types (or keyword string))
    (check-member offset   :nullable   t :types cons)
    (when offset
      (with-point (x y) offset
        (check-member x    :nullable nil :types number)
        (check-member y    :nullable nil :types number)))
    (check-object font     canvas dict :nullable t :class font-info))
  nil)

(defun uml-role-to-string (rol)
  (format-string (slot-value rol 'name)))

(defun uml-role-draw (rol x y align clip-path writer)
  (let ((txt (uml-role-to-string rol)))
    (with-slots (font) rol
      (write-text-tag x y txt writer :align align :font font :clip-path clip-path))))

;; type := :from|:dest
(defun uml-role-draw-beside-line (rol line type clip-path writer)
  (unless (typep line 'kaavio:line)
    (throw-exception "role-info : line parameter is not line object"))
  (with-slots (offset font) rol
    (destructuring-bind (p1 . p2) (kaavio::line-get-endpoints line type)
      (let* ((degree  240)
             (distance 10)
             (x1    (point-x p2))
             (y1    (point-y p2))
             (x2    (+ x1 (* distance (kaavio::math/cos3 p1 p2 degree)) (point-x offset)))
             (y2    (+ y1 (* distance (kaavio::math/sin3 p1 p2 degree)) (point-y offset)))
             (align (if (< x1 x2) :left :right)))
        (when (< y1 y2)
          (incf y2 (slot-value font 'kaavio::size)))
        (uml-role-draw rol x2 y2 align clip-path writer)))))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### function make-uml-role
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{make-uml-role}} ${REST} params
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　指定されたパラメータでロール情報を生成します。上記は簡潔な記述で柔軟なロール情報の生成を
;;可能にするためのもので、 `params` として渡されるパラメータ数に応じて以下のことをします。
;;
;;* パラメータ数が 1 の場合
;;    * ロール情報が渡された場合、それをそのまま返します
;;    * リスト lst が渡された場合、 `(apply #'make-uml-role lst)` を返します
;;    * 上記のいずれでもない prm の場合、 `(make-uml-role prm :offset '(0 0))` を返します
;;* パラメータ数が 2 以上の場合
;;    * 後述します
;;
;;　パラメータ数が 2 以上の場合、make-uml-role 関数は実質的に以下の関数であるかのように振舞います。
;;
;;<!-- stack:push li class='syntax' -->
;;
;;* ${{B}{make-uml-role}} name ${KEY} offset font
;;
;;<!-- stack:pop li -->
;;
;;　各パラメータの意味は以下の通りです。
;;
;;* `name` ---- ロールの名前をキーワードシンボルまたは文字列で指定します。
;;* `offset` ---- 描画位置調整のためのオフセット情報を `(x y)` 形式で指定します。
;;* `font` ---- フォントを指定します。
;;
;;${SEE_ALSO}
;;
;;* [$$](#uml-role-info)
;;* [$$](#uml-aggregation)
;;* [$$](#uml-association)
;;* [$$](#uml-composition)
;;
;;${NOTES}
;;
;;　通常、この関数を明示的に使用する必要はありません。uml-assciation マクロの `:role1` などに
;;指定されたパラメータは内部でこの関数に渡されるため、 `:role1 "target"` あるいは 
;;`:role1 '("target" :offset (-5 3))` といった記述でロール情報を指定できます。
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defun make-uml-role (&rest params)
  (if (= 1 (length params))
      (let ((param (car params)))
        (cond
          ((typep param 'uml-role-info) param)
          ((listp param) (apply #'make-uml-role param))
          (t             (make-uml-role param :offset '(0 0)))))
      (destructuring-bind (name &key offset
                                (font     nil     font-p)) params
        (make-instance 'uml-role-info
                       :name     name
                       :offset   offset
                       :font     (if font-p     font     (or *uml-role-font*
                                                             kaavio:*default-font*))))))

