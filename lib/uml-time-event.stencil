
(in-package :kaavio-user)

(defparameter *uml-time-event-fill*         :white)
(defparameter *uml-time-event-stroke*       :black)
(defparameter *uml-time-event-width*            20)
(defparameter *uml-time-event-height-ratio*    1.5)


;;------------------------------------------------------------------------------
;;
;; class uml-time-event
;;
;;------------------------------------------------------------------------------
(defclass uml-time-event (kaavio:group)
  ((name	:initform nil :initarg :name)		; (or nil label-info)
   (fill	:initform nil :initarg :fill)		; (or nil fill-info)
   (stroke	:initform nil :initarg :stroke)))	; (or nil stroke-info)

(defmethod initialize-instance :after ((event uml-time-event) &rest initargs)
  (declare (ignore initargs))
  (with-slots (name fill stroke) event
	(setf name   (and name (make-label name)))
	(setf fill   (make-fill   (or fill   *uml-time-event-fill*   *default-fill*  )))
	(setf stroke (make-stroke (or stroke *uml-time-event-stroke* *default-stroke*))))
  event)

(defmethod check ((event uml-time-event) canvas dict)
  (with-slots (name fill stroke) event
	(check-object name   canvas dict :nullable t :class  label-info)
	(check-object fill   canvas dict :nullable t :class   fill-info)
	(check-object stroke canvas dict :nullable t :class stroke-info))
  ;; this method must call super class' one.
  (call-next-method))

;; override of group::draw-group
(defmethod draw-group ((event uml-time-event) writer)
  (with-slots (name fill stroke) event
	(let* ((canvas (group-get-canvas event))
		   (width  (canvas-width  canvas))
		   (height (canvas-height canvas))
		   (*default-fill*   fill)
		   (*default-stroke* stroke))
	  (macrolet ((register-entity (entity)
				   `(check-and-draw-local-entity ,entity canvas writer)))
		;; draw note body
		(polygon `((0 0)
				   (,width 0)
				   (0 ,height)
				   (,width ,height)
				   (0 0)))))
	(when name
	  (draw-label name event writer)))
  nil)

;for debug...
;(defmethod post-draw ((obj uml-time-event) writer)
;  (call-next-method)
;  (draw-canvas-frame (shape-get-subcanvas obj) writer))
 

(defmethod shape-connect-point ((event uml-time-event) type1 type2 arg)
  (declare (ignore type1))
  (let* ((canvas (group-get-canvas event)))
	(with-canvas (cc width height) canvas
		(let* ((qw      (/ width  4))
			   (qh      (/ height 4))
			   (topleft (xy+ cc (- (/ width 2)) (- (/ height 2)))))
		  (ecase type2
			((:center) (call-next-method))
			((:top)    (point/xy+ topleft (* qw (+ arg 2))                0))
			((:bottom) (point/xy+ topleft (* qw (+ arg 2))           height))
			((:left)   (point/xy+ topleft                0 (* qh (+ arg 2))))
			((:right)  (point/xy+ topleft            width (* qh (+ arg 2)))))))))



;;------------------------------------------------------------------------------
;;
;; macro uml-time-event
;;
;;------------------------------------------------------------------------------
(defmacro uml-time-event (center name &key width height fill stroke link layer id)
  `(register-entity (make-instance 'uml-time-event
								   :center ,center
								   :name ,name
								   :width  (or ,width *uml-time-event-width*)
								   :height (or ,height
											   (* *uml-time-event-height-ratio*
												  (or ,width *uml-time-event-width*)))
								   :fill ,fill :stroke ,stroke
								   :link ,link :layer ,layer :id ,id)))
