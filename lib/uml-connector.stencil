
(in-package :kaavio-user)

(defparameter *uml-connector-font*      nil)
(defparameter *uml-connector-fill*   :white)
(defparameter *uml-connector-stroke* :black)
(defparameter *uml-connector-size*       20)
(defparameter *uml-connector-filter*    nil)
(defparameter *uml-connector-layer*     nil)


;;------------------------------------------------------------------------------
;;
;; class uml-connector
;;
;;------------------------------------------------------------------------------
(defclass uml-connector (kaavio:group)
  ((position2 :initform nil :initarg :position2) ; point
   (pivot2  :initform :CC  :initarg :pivot2)     ; keyword
   (name    :initform nil  :initarg :name)       ; (or nil keyword)
   (size    :initform   0  :initarg :size)       ; number
   (fill    :initform nil  :initarg :fill)       ; (or nil fill-info)
   (stroke  :initform nil  :initarg :stroke)     ; (or nil stroke-info)
   (font    :initform nil  :initarg :font)       ; (or nil font-info)
   (clip-path :initform nil :initarg :clip-path) ; (or nil symbol)
   (filter  :initform nil  :initarg :filter)))   ; (or nil keyword)

(defmethod initialize-instance :after ((con uml-connector) &rest initargs)
  (declare (ignore initargs))
  (with-slots (pivot2 fill stroke font filter layer) con
    (setf pivot2 (or pivot2 :CC))
    (setf fill   (make-fill   (or fill   *uml-connector-fill*   *default-fill*  )))
    (setf stroke (make-stroke (or stroke *uml-connector-stroke* *default-stroke*)))
    (setf font   (make-font   (or font   *uml-connector-font*   *default-font*  )))
    (setf filter  (if (eq filter :none)
                      nil
                      (or filter *uml-connector-filter* *default-filter*)))
    (setf layer  (if (eq layer :none)
                     nil
                     (or layer *uml-connector-layer* *default-layer*))))
  con)

(defmethod check ((con uml-connector) canvas dict)
  (with-slots (position2 pivot2 name fill stroke clip-path font) con
    (check-member pivot2             :nullable nil :types keyword)
    (check-member name               :nullable t :types     keyword)
    (check-object fill   canvas dict :nullable t :class   fill-info)
    (check-object stroke canvas dict :nullable t :class stroke-info)
    (check-member clip-path          :nullable t :types      symbol)
    (check-object font   canvas dict :nullable t :class   font-info)
    (if name
        (setf name (subseq (symbol-name name) 0 1))
        (let* ((tmp (symbol-name (slot-value con 'kaavio::id)))
               (len (length tmp)))
          (setf name (subseq tmp (1- len) len))))
    (setf position2 (canvas-fix-point canvas position2)))
  (with-slots (size kaavio::width kaavio::height) con
    (setf kaavio::width  size)
    (setf kaavio::height size))
  ;; this method must call super class' one.
  (call-next-method))

(defmethod shape-cc-center ((con uml-connector) type)
  (with-slots ((position1 kaavio::position)
               (pivot1 kaavio::pivot)
               position2 pivot2
               (width kaavio::width) (height kaavio::height)) con
    (if (eq type :from)
        (kaavio::shape-calc-center-using-pivot position2 pivot2 width height)
        (kaavio::shape-calc-center-using-pivot position1 pivot1 width height))))

(defmethod shape-connect-point ((con uml-connector) type1 type2 arg)
  (if (eq type1 :from)
      (circle-connect-point (shape-cc-center con :from)
                            (/ (slot-value con 'size) 2) :from type2 arg)
      (circle-connect-point (shape-cc-center con :dest)
                            (/ (slot-value con 'size) 2) :dest type2 arg)))

;; override of group::draw-group
(defmethod draw-group ((con uml-connector) writer)
  (with-slots (name size fill stroke font clip-path filter) con
    (let* ((center1 (shape-cc-center con :dest))
           (center2 (shape-cc-center con :from))
           (canvas (group-get-canvas con))
           (diff (point- center2 center1))
           (x (/ size 2))
           (y (/ size 2))
           (r (/ size 2))
           (fsize (slot-value font 'kaavio::size))
           (*default-fill*     fill)
           (*default-stroke* stroke)
           (*default-font*     font)
           (kaavio:*current-clip-path* clip-path))
      (declare (special canvas))
      (macrolet ((register-entity (entity)
                   `(check-and-draw-local-entity ,entity canvas writer)))
        (when filter
          (writer-write writer "<g " (write-when filter "filter='url(#" it ")' ") ">")
          (writer-incr-level writer))
        (circle (make-point x y) r)
        (circle (make-point (+ x (point-x diff)) (+ y (point-y diff))) r)
        (when filter
          (writer-decr-level writer)
          (writer-write writer "</g>"))
        (text (make-point x (+ y (/ fsize 2))) name :align :center)
        (text (make-point (+ x (point-x diff))
                          (+ y (point-y diff) (/ fsize 2))) name :align :center))))
  nil)

;for debug...
;(defmethod post-draw ((obj uml-connector) writer)
;  (call-next-method)
;  (draw-canvas-frame (shape-get-subcanvas obj) writer))
 


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-connector
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-connector}} position1 position2 id ${KEY} pivot1 pivot2 name size fill stroke font filter layer
;;
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　${{TODO}{まだ記述されていません。}}
;;
;;${NO_SEE_ALSO}
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-connector (position1 position2 id &key pivot1 pivot2 name
                                                  size fill stroke font filter layer)
  `(register-entity (make-instance 'uml-connector
                                   :position  ,position1 :pivot  ,pivot1
                                   :position2 ,position2 :pivot2 ,pivot2
                                   :name ,name
                                   :size    (or ,size   *uml-connector-size*)
                                   :font    (or ,font   *uml-connector-font*)
                                   :fill    (or ,fill   *uml-connector-fill*)
                                   :stroke  (or ,stroke *uml-connector-stroke*)
                                   :clip-path *current-clip-path*
                                   :link nil :filter ,filter :layer ,layer :id ,id)))

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-connector-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-connector-options}} (${KEY} font fill stroke size filter layer) ${BODY} body
;;
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　${{TODO}{まだ記述されていません。}}
;;
;;${NO_SEE_ALSO}
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-connector-options ((&key font fill stroke
                                            size filter layer) &rest body)
  (labels ((impl (params acc)
             (if (null params)
                 acc
                 (let ((value  (car  params))
                       (symbol (cadr params)))
                   (impl (cddr params)
                         (if (null value)
                             acc
                             (push (list symbol value) acc)))))))
    (let ((lst (impl (list font     '*uml-connector-font*
                           fill     '*uml-connector-fill*
                           stroke   '*uml-connector-stroke*
                           size     '*uml-connector-size*
                           filter   '*uml-connector-filter*
                           layer    '*uml-connector-layer*) nil)))
      `(let ,lst
         ,@body))))
