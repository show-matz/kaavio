(in-package :kaavio-user)

(load-stencil :uml-common-base)
(load-stencil :uml-multiplicity-info)

(defparameter *uml-class-font*           nil)
(defparameter *uml-class-fill*        :white)
(defparameter *uml-class-stroke*      :black)
(defparameter *uml-class-filter*         nil)
(defparameter *uml-class-layer*          nil)
(defparameter *uml-class-width*           70)
(defparameter *uml-class-height*          30)
(defparameter *uml-class-name-margin*      5)
(defparameter *uml-class-margin*           5)
(defparameter *uml-class-draw-emptybox*  nil)


;;-------------------------------------------------------------------------------
;;
;; interface for attribute & operation.
;;
;;-------------------------------------------------------------------------------
(defclass uml-class-stuff () ())

(defgeneric uml-class-stuff-class-scope-p (stuff)
  (:method ((stuff uml-class-stuff))
    nil))

(defgeneric uml-class-stuff-abstract-p (stuff)
  (:method ((stuff uml-class-stuff))
    nil))

(defgeneric uml-class-stuff-to-string (stuff)
  (:method ((stuff uml-class-stuff))
    ""))

(defmethod check ((stuff uml-class-stuff) canvas dict)
  (declare (ignore canvas dict))
  nil)

;;-------------------------------------------------------------------------------
;;
;; class uml-class-omission
;;
;;-------------------------------------------------------------------------------
(defclass uml-class-omission (uml-class-stuff) ())

(defmethod uml-class-stuff-to-string ((obj uml-class-omission))
  "...")


;;-------------------------------------------------------------------------------
;;
;; class uml-class-stereotype
;;
;;-------------------------------------------------------------------------------
(defclass uml-class-stereotype (uml-class-stuff)
  ((info  :initform nil  :initarg  :info)))   ; uml-stereotype-info

(defmethod check ((stuff uml-class-stereotype) canvas dict)
  (with-slots (info) stuff 
    (check-object info canvas dict :nullable nil :class uml-stereotype-info)
    (check info canvas dict))
  nil)

(defmethod uml-class-stuff-to-string ((stuff uml-class-stereotype))
  (uml-stereotype-to-string (slot-value stuff 'info)))


;;-------------------------------------------------------------------------------
;;
;; class uml-class-attribute
;;
;;-------------------------------------------------------------------------------
(defclass uml-class-attribute (uml-class-stuff)
  ((visibility     :initform nil :initarg :visibility)     ; keyword - :none :public :private :protected :derived :package
   (name           :initform nil :initarg :name)           ; (or keyword string)
   (type           :initform nil :initarg :type)           ; (or nil keyword string)
   (multiplicity   :initform nil :initarg :multiplicity)   ; (or nil number  string)
   (default-value  :initform nil :initarg :default-value)  ; (or number keyword string)
   (property       :initform nil :initarg :property)       ; (or keyword string)
   (scope          :initform nil :initarg :scope)))        ; keyword - :instance :class

(defmethod check ((attr uml-class-attribute) canvas dict)
  (declare (ignore canvas dict))
  (with-slots (visibility name type
                  multiplicity default-value property scope)  attr
    (check-member visibility    :nullable nil :types keyword)
    (check-member name          :nullable nil :types (or string keyword))
    (check-member type          :nullable   t :types (or string keyword))
    (check-member multiplicity  :nullable   t :types (or string number))
    (check-member default-value :nullable   t :types (or number keyword string))
    (check-member property      :nullable   t :types (or string keyword))
    (check-member scope         :nullable nil :types keyword)
    (check-keywords visibility :none :public :private :protected :package :derived)
    (check-keywords scope      :instance :class))
  nil)

(defmethod uml-class-stuff-class-scope-p ((attr uml-class-attribute))
  (eq (slot-value attr 'scope) :class))

;; use implementaion of base class.
;;(defmethod uml-class-stuff-abstract-p ((attr uml-class-attribute))
;;  nil)

(defmethod uml-class-stuff-to-string ((attr uml-class-attribute))
  (with-slots (visibility name type
                multiplicity default-value property) attr
    (format-string (ecase visibility
                     ((:none)      " ")
                     ((:public)    "+")
                     ((:private)   "-")
                     ((:protected) "#")
                     ((:package)   "~")
                     ((:derived)   "/"))
                   name
                   (when type          (format-string ":"   type))
                   (when multiplicity  (format-string "["   multiplicity "]"))
                   (when default-value (format-string " = " default-value))
                   (when property      (format-string "{"   property "}")))))

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### function make-uml-class-attribute
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{make-uml-class-attribute}} ${REST} params
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　指定されたパラメータでクラス属性情報を生成します。上記は簡潔な記述で柔軟なクラス属性情報
;;の生成を可能にするためのもので、 `params` として渡されるパラメータ数に応じて以下のことを
;;します。
;;
;;* パラメータ数が 1 の場合
;;    * `:<<STEREOTYPE>>`  形式のキーワードシンボルがの場合、ステレオタイプ情報を作成して返します
;;    * キーワードシンボル `:etc` の場合、文字列 `...` を表示する省略情報を作成して返します
;;    * 上記のいずれでもないキーワードシンボルまたは文字列 `param` の場合、 `(make-uml-class-attribute :none param)` を返します
;;    * クラス属性情報オブジェクト `obj` の場合、それをそのまま返します
;;    * リスト lst が渡された場合、 `(apply #'make-uml-class-attribute lst)` を返します
;;    * 上記のいずれでもない prm の場合、 `(make-uml-class-attribute :none param)` を返します
;;* パラメータ数が 2 以上の場合
;;    * 後述します
;;
;;　パラメータ数が 2 以上の場合、make-uml-class-attribute 関数は実質的に以下の関数であるかのように
;;振舞います。
;;
;;<!-- stack:push li class='syntax' -->
;;
;;* ${{B}{make-uml-class-attribute}} visibility name ${KEY} type multiplicity default property scope
;;
;;<!-- stack:pop li -->
;;
;;　各パラメータの意味は以下の通りです。
;;
;;* `visibility` ---- 可視性を `:none :public :private :protected :package :derived` のいずれかで指定します。
;;* `name` ---- 属性の名称を文字列またはキーワードシンボルで指定します。
;;* `type` ---- 型を文字列またはキーワードシンボルで指定します。
;;* `multiplicity` ---- 多重度を整数値または文字列で指定します。
;;* `default` ---- 属性のデフォルト値を数値、文字列またはキーワードシンボルで指定します。
;;* `property` ---- 属性のプロパティ値を文字列またはキーワードシンボルで指定します。
;;* `scope` ---- 属性のスコープを `:instance :class` のいずれかで指定します。
;;
;;${SEE_ALSO}
;;
;;* make-uml-class-operation 関数
;;
;;${NOTES}
;;
;;　通常、この関数を明示的に使用する必要はありません。 `uml-class` マクロの `:attributes` に
;;指定されたリストの要素は内部でこの関数に渡されるため、 `'(:private "m_data" :type :string)` 
;;などといった記述でクラス属性情報を指定できます。
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defun make-uml-class-attribute (&rest params)
  (labels ((name-p (param)
             (or (keywordp param) (stringp param))))
    (if (= 1 (length params))
        (let* ((param (car params))
               (tmp   (uml-stereotype-keyword-p param)))
          (if tmp
              ;;MEMO : attributes 内部で :<<stereotype>> 形式でステレオタイプを指定する場合、フォントは
              ;;       個別指定できない。これは実質的に問題にならないと思うので仕様とする。
              (make-instance 'uml-class-stereotype
                             :info (make-instance 'uml-stereotype-info :name tmp))
              (cond
                ((eq param :etc) (make-instance 'uml-class-omission))
                ((name-p param)  (make-uml-class-attribute :none param))
                ((typep param 'uml-class-attribute) param)
                ((listp param)   (apply #'make-uml-class-attribute param))
                (t               (make-uml-class-attribute :none param)))))
        (destructuring-bind (visibility name &key type
                                  multiplicity default property scope) params
          (make-instance 'uml-class-attribute
                         :visibility    (or visibility :none)
                         :name          name
                         :type          type
                         :multiplicity  multiplicity
                         :default-value default
                         :property      property
                         :scope         (or scope :instance))))))


;;-------------------------------------------------------------------------------
;;
;; class uml-class-operation-param
;;
;;-------------------------------------------------------------------------------
(defclass uml-class-operation-param (uml-class-stuff)
  ((io             :initform nil :initarg :io)               ; (or nil keyword) - :in :out :inout
   (name           :initform nil :initarg :name)             ; (or keyword string)
   (type           :initform nil :initarg :type)             ; (or nil keyword string)
   (default-value  :initform nil :initarg :default-value)))  ; (or number keyword string)


(defmethod check ((prm uml-class-operation-param) canvas dict)
  (declare (ignore canvas dict))
  (with-slots (io name type default-value) prm
    (check-member io            :nullable   t :types keyword)
    (check-member name          :nullable nil :types (or string keyword))
    (check-member type          :nullable   t :types (or string keyword))
    (check-member default-value :nullable   t :types (or number keyword string))
    (when io
      (check-keywords io :in :out :inout)))
  nil)

;; use implementaion of base class.
;;(defmethod uml-class-stuff-class-scope-p ((prm uml-class-operation-param))
;;  nil)

;; use implementaion of base class.
;;(defmethod uml-class-stuff-abstract-p ((prm uml-class-operation-param))
;;  nil)

(defmethod uml-class-stuff-to-string ((prm uml-class-operation-param))
  (with-slots (io name type default-value) prm
    (format-string (when io (format-string io " "))
                   name
                   (when type (format-string ":" type))
                   (when default-value (format-string "=" default-value)))))

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### function make-uml-class-operation-param
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{make-uml-class-operation-param}} ${REST} params
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　指定されたパラメータでクラス操作パラメータ情報を生成します。上記は簡潔な記述で柔軟なクラス操作パラメータ情報
;;の生成を可能にするためのもので、 `params` として渡されるパラメータ数に応じて以下のことを
;;します。
;;
;;* パラメータ数が 1 の場合
;;    * キーワードシンボル `:etc` の場合、文字列 `...` を表示する省略情報を作成して返します
;;    * 上記に該当しないキーワードシンボルまたは文字列 `param` の場合、 `param` を名前とするクラス操作パラメータ情報を作成して返します
;;    * クラス操作パラメータ情報オブジェクト `obj` の場合、それをそのまま返します
;;    * リスト `lst` が渡された場合、 `(apply #'make-uml-class-operation-param lst)` を返します
;;    * 上記のいずれでもない `prm` の場合、 `prm` を名前とするクラス操作パラメータ情報を作成して返します
;;* パラメータ数が 2 以上の場合
;;    * 後述します
;;
;;　パラメータ数が 2 以上の場合、make-uml-class-operation-param 関数は実質的に以下の関数であるかのように
;;振舞います。
;;
;;<!-- stack:push li class='syntax' -->
;;
;;* ${{B}{make-uml-class-operation-param}} name ${KEY} io type default
;;
;;<!-- stack:pop li -->
;;
;;　各パラメータの意味は以下の通りです。
;;
;;* `name` ---- 操作パラメータの名称を文字列またはキーワードシンボルで指定します。
;;* `io` ---- 入出力に関する指定を `:in :out :inout` のいずれかで 指定します。省略可能です。
;;* `type` ---- 型を文字列またはキーワードシンボルで指定します。
;;* `default` ---- パラメータのデフォルト値を数値、文字列またはキーワードシンボルで指定します。
;;
;;${SEE_ALSO}
;;
;;* make-uml-class-operation 関数
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defun make-uml-class-operation-param (&rest params)
  (labels ((name-p (param)
             (or (keywordp param) (stringp param))))
    (if (= 1 (length params))
        (let ((param (car params)))
          (cond
            ((eq param :etc) (make-instance 'uml-class-omission))
            ((name-p param)  (make-instance 'uml-class-operation-param :name param))
            ((typep param 'uml-class-operation-param) param)
            ((listp param)   (apply #'make-uml-class-operation-param param))
            (t               (make-instance 'uml-class-operation-param :name param))))
        (destructuring-bind (name &key io type default) params
          (make-instance 'uml-class-operation-param
                         :io            io
                         :name          name
                         :type          type
                         :default-value default)))))

;;-------------------------------------------------------------------------------
;;
;; class uml-class-operation
;;
;;-------------------------------------------------------------------------------
(defclass uml-class-operation (uml-class-stuff)
  ((visibility :initform nil :initarg :visibility) ; keyword - :none :public :private :protected :package
   (name       :initform nil :initarg :name)       ; (or keyword string)
   (abstract   :initform nil :initarg :abstract)   ; boolean
   (parameters :initform nil :initarg :parameters) ; list of uml-class-operation-param
   (type       :initform nil :initarg :type)       ; (or nil keyword string)
   (property   :initform nil :initarg :property)   ; (or nil keyword string)
   (scope      :initform nil :initarg :scope)))    ; keyword - :instance, :class

(defmethod initialize-instance :after ((op uml-class-operation) &rest initargs)
  (declare (ignore initargs))
  (with-slots (parameters) op
    (setf parameters (mapcar (lambda (entry)
                               (make-uml-class-operation-param entry)) parameters)))
  op)

(defmethod check ((op uml-class-operation) canvas dict)
  (with-slots (visibility name abstract
                      parameters type property scope) op
    (check-member visibility :nullable nil :types keyword)
    (check-member name       :nullable nil :types (or string keyword))
    (check-member parameters :nullable   t :types list)
    (check-member type       :nullable   t :types (or string keyword))
    (check-member property   :nullable   t :types (or string keyword))
    (check-member scope      :nullable nil :types keyword)
    (check-keywords visibility :none :public :private :protected :package)
    (check-keywords scope      :instance :class)
    (dolist (param parameters)
      (check-object param canvas dict :class uml-class-stuff)
      (check param canvas dict))
    (when (and abstract (eq scope :class))
      (throw-caution "Method ~A is abstract and class-scope." name)))
  nil)

(defmethod uml-class-stuff-class-scope-p ((op uml-class-operation))
  (eq (slot-value op 'scope) :class))

(defmethod uml-class-stuff-abstract-p ((op uml-class-operation))
  (slot-value op 'abstract))

(defmethod uml-class-stuff-to-string ((op uml-class-operation))
  (labels ((uml-format-class-operation-params (parameters)
             (when parameters
               (with-output-to-string (stream)
                 (do ((params parameters (cdr params))
                      (idx 0 (incf idx)))
                     ((null params))
                   (unless (zerop idx)
                     (princ "," stream))
                   (princ (uml-class-stuff-to-string (car params)) stream))))))
    (with-slots (visibility name parameters type property) op
      (format-string (ecase visibility
                       ((:none)      " ")
                       ((:public)    "+")
                       ((:private)   "-")
                       ((:protected) "#")
                       ((:package)   "~"))
                     name
                     "(" (uml-format-class-operation-params parameters) ")"
                     (when type     (format-string ":" type))
                     (when property (format-string "{" property "}"))))))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### function make-uml-class-operation
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{make-uml-class-operation}} ${REST} params
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　指定されたパラメータでクラス操作情報を生成します。上記は簡潔な記述で柔軟なクラス操作情報
;;の生成を可能にするためのもので、 `params` として渡されるパラメータ数に応じて以下のことを
;;します。
;;
;;* パラメータ数が 1 の場合
;;    * `:<<STEREOTYPE>>`  形式のキーワードシンボルがの場合、ステレオタイプ情報を作成して返します
;;    * キーワードシンボル `:etc` の場合、文字列 `...` を表示する省略情報を作成して返します
;;    * 上記のいずれでもないキーワードシンボルまたは文字列 `param` の場合、 `(make-uml-class-operation :none param)` を返します
;;    * クラス操作情報オブジェクト `obj` の場合、それをそのまま返します
;;    * リスト `lst` が渡された場合、 `(apply #'make-uml-class-operation lst)` を返します
;;    * 上記のいずれでもない prm の場合、 `(make-uml-class-operation :none param)` を返します
;;* パラメータ数が 2 以上の場合
;;    * 後述します
;;
;;　パラメータ数が 2 以上の場合、make-uml-class-operation 関数は実質的に以下の関数であるかのように
;;振舞います。
;;
;;<!-- stack:push li class='syntax' -->
;;
;;* ${{B}{make-uml-class-operation}} visibility name ${KEY} abstract parameters type property scope
;;
;;<!-- stack:pop li -->
;;
;;　各パラメータの意味は以下の通りです。
;;
;;* `visibility` ---- 可視性を `:none :public :private :protected :package` のいずれかで指定します。
;;* `name` ---- 操作の名称を文字列またはキーワードシンボルで指定します。
;;* `abstract` ---- 抽象操作か否かを真偽値で指定します。 `:scope` が `:class` の場合に真を指定するとエラーになります。
;;* `parameters` ---- パラメータ情報をリストで指定します。このリストの各要素は `make-uml-class-operation-param` 関数に渡されます。詳細は [$@ 節](#function make-uml-class-operation-param) を参照してください。
;;* `type` ---- 型を文字列またはキーワードシンボルで指定します。
;;* `property` ---- 操作のプロパティ値を文字列またはキーワードシンボルで指定します。
;;* `scope` ---- 操作のスコープを `:instance :class` のいずれかで指定します。
;;
;;${SEE_ALSO}
;;
;;* make-uml-class-operation-param 関数
;;* make-uml-class-attribute 関数
;;
;;${NOTES}
;;
;;　通常、この関数を明示的に使用する必要はありません。 `uml-class` マクロの `:operations` に
;;指定されたリストの要素は内部でこの関数に渡されるため、 `'(:public "DoSomething" :type :integer)` 
;;などといった記述でクラス操作情報を指定できます。
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defun make-uml-class-operation (&rest params)
  (labels ((name-p (param)
             (or (keywordp param) (stringp param))))
    (if (= 1 (length params))
        (let* ((param (car params))
               (tmp   (uml-stereotype-keyword-p param)))
          (if tmp
              ;;MEMO : operations 内部で :<<stereotype>> 形式でステレオタイプを指定する場合、フォントは
              ;;       個別指定できない。これは実質的に問題にならないと思うので仕様とする。
              (make-instance 'uml-class-stereotype
                             :info (make-instance 'uml-stereotype-info :name tmp))
              (cond
                ((eq param :etc) (make-instance 'uml-class-omission))
                ((name-p param)  (make-uml-class-operation :none param))
                ((typep param 'uml-class-operation) param)
                ((listp param)   (apply #'make-uml-class-operation param))
                (t               (make-uml-class-operation :none param)))))
        (destructuring-bind (visibility name &key abstract 
                                parameters type property scope) params
          (make-instance 'uml-class-operation
                         :visibility  (or visibility :none)
                         :name        name
                         :abstract    abstract
                         :parameters  parameters
                         :type        type
                         :property    property
                         :scope       (or scope :instance))))))

;;-------------------------------------------------------------------------------
;;
;; class uml-class
;;
;;-------------------------------------------------------------------------------
(defclass uml-class (kaavio:group)
  ((name                :initform nil :initarg :name)               ; (or keyword string)
   (stereotype          :initform nil :initarg :stereotype)         ; uml-stereotype-info
   (multiplicity        :initform nil :initarg :multiplicity)       ; (or nil uml-multiplicity-info)
   (abstract-p          :initform nil :initarg :abstract-p)         ; boolean
   (active-p            :initform nil :initarg :active-p)           ; boolean
   (attributes          :initform nil :initarg :attributes)         ; list
   (operations          :initform nil :initarg :operations)         ; list
   (template            :initform nil :initarg :template)           ; string
   (responsibilities    :initform nil :initarg :responsibilities)   ; string
   (emptybox            :initform nil :initarg :emptybox)           ; boolean
   (font                :initform nil :initarg :font)               ; (or nil font-info)
   (fill                :initform nil :initarg :fill)               ; (or nil fill-info)
   (stroke              :initform nil :initarg :stroke)             ; (or nil stroke-info)
   (clip-path           :initform nil :initarg :clip-path)          ; (or nil symbol)
   (filter              :initform nil :initarg :filter)             ; (or nil keyword)
   (name-actual-height  :initform nil)                              ; number
   (heights-cache       :initform nil)    #|list of box heights|#   ; list
   (margin-cache        :initform nil)                              ; number
   (name-margin-cache   :initform nil)))                            ; number


(defmethod initialize-instance :after ((cls uml-class) &rest initargs)
  (declare (ignore initargs))
  (with-slots (stereotype multiplicity
                    font fill stroke filter layer
                    margin-cache name-margin-cache) cls
    (setf stereotype (and stereotype (make-uml-stereotype stereotype)))
    (setf multiplicity (and multiplicity (make-uml-multiplicity multiplicity)))
    (setf font    (make-font   (or font   *uml-class-font*   *default-font*)))
    (setf fill    (make-fill   (or fill   *uml-class-fill*   *default-fill*)))
    (setf stroke  (make-stroke (or stroke *uml-class-stroke* *default-stroke*)))
    (setf filter (if (eq filter :none)
                     nil
                     (or filter *uml-class-filter* *default-filter*)))
    (setf layer  (if (eq layer :none)
                     nil
                     (or layer *uml-class-layer* *default-layer*)))
    (setf margin-cache      *uml-class-margin*)
    (setf name-margin-cache *uml-class-name-margin*))
  cls)

(defun uml-class-caluculate-shapesize (cls)
  (with-slots (name stereotype font attributes operations active-p
                kaavio::width kaavio::height emptybox
                responsibilities heights-cache margin-cache name-margin-cache) cls
    (let ((total-height  0)
          (total-width   0)
          (name-height   0)
          (size    (slot-value font 'kaavio::size))
          (spice   (slot-value font 'kaavio::width-spice))
          (spacing (slot-value font 'kaavio::line-spacing)))
      (setf heights-cache nil)
      (labels ((get-width (line margin)
                 (+ (* 2 margin) (* (length line) size spice)))
               (get-object-width (obj margin)
                 (get-width (uml-class-stuff-to-string obj) margin))
               (calc-box (lst fnc tail-p v-margin &optional h-margin)
                 (unless h-margin
                   (setf h-margin v-margin))
                 (if (null lst)
                     (cons 0 (if (and tail-p emptybox) (* 2 v-margin) 0))
                     (cons (apply #'max (mapcar (lambda (x)
                                                  (funcall fnc x h-margin)) lst))
                           (+ (* 2 v-margin)
                              (* (length lst) size)
                              (* (1- (length lst)) spacing))))))
        ;; name
        (let ((lst (kaavio::string/split (fix-name name) #\newline)))
          (when stereotype
            (setf lst (cons (uml-stereotype-to-string stereotype) lst)))
          (let ((w.h (calc-box lst #'get-width nil margin-cache
                               (+ margin-cache name-margin-cache))))
            (setf name-height  (cdr w.h))
            (setf total-width  (max (car w.h) kaavio::width))
            (setf total-height (max (cdr w.h) kaavio::height))
            (push total-height heights-cache)))
        ;; members
        (let ((w.h (calc-box attributes #'get-object-width
                             (or operations responsibilities) margin-cache)))
          (setf total-width  (max total-width (car w.h)))
          (incf total-height (cdr w.h))
          (push (cdr w.h) heights-cache))
        ;; operations
        (let ((w.h (calc-box operations #'get-object-width
                             (not (null responsibilities)) margin-cache)))
          (setf total-width  (max total-width (car w.h)))
          (incf total-height (cdr w.h))
          (push (cdr w.h) heights-cache))
        ;; responsibilities
        (let* ((lst (when responsibilities (cons "Responsibilities"
                                                  responsibilities)))
               (w.h (calc-box lst #'get-width nil margin-cache)))
          (setf total-width  (max total-width (car w.h)))
          (incf total-height (cdr w.h))
          (push (cdr w.h) heights-cache)))
      (when active-p
        (incf total-width (* 2 margin-cache)))
      (setf heights-cache (nreverse heights-cache))
      (values total-width total-height name-height))))


(defmethod check ((cls uml-class) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (name stereotype multiplicity attributes operations template 
                    responsibilities font fill stroke clip-path name-actual-height) cls
    (check-member name             :nullable nil :types (or string keyword))
    (check-object stereotype canvas dict :nullable t :class uml-stereotype-info)
    (check-object multiplicity canvas dict :nullable t :class uml-multiplicity-info)
    (check-member attributes       :nullable   t :types list)
    (check-member operations       :nullable   t :types list)
    (check-member template         :nullable   t :types string)
    (check-member responsibilities :nullable   t :types string)
    (check-object font   canvas dict :nullable t :class   font-info)
    (check-object fill   canvas dict :nullable t :class   fill-info)
    (check-object stroke canvas dict :nullable t :class stroke-info)
    (check-member clip-path        :nullable   t :types symbol)
    (setf attributes (mapcar #'make-uml-class-attribute attributes))
    (dolist (attribute attributes)
      (check-object attribute canvas dict :nullable nil :class uml-class-stuff)
      (check attribute canvas dict))
    (setf operations (mapcar #'make-uml-class-operation operations))
    (dolist (operation operations)
      (check-object operation canvas dict :nullable nil :class uml-class-stuff)
      (check operation canvas dict))
    (when responsibilities
      (setf responsibilities (kaavio::string/split (fix-name responsibilities) #\newline)))
    (multiple-value-bind (w h nh) (uml-class-caluculate-shapesize cls)
      (setf name-actual-height nh)
      (setf (slot-value cls 'kaavio::width)  w)
      (setf (slot-value cls 'kaavio::height) h)))
  nil)

;;MEMO : use impelementation of shape...
;;(defmethod shape-connect-point ((cls uml-class) type1 type2 arg) ...)

;;MEMO : use impelementation of group...
;;(defmethod group-get-canvas ((cls uml-class)) ...)

;;MEMO : use impelementation of shape...
;;(defmethod shape-get-subcanvas ((grp group)) ...)

;; override of group::draw-group
(defmethod draw-group ((cls uml-class) writer)
  (let ((canvas (group-get-canvas cls)))
    (with-slots (name stereotype multiplicity
                  active-p abstract-p template
                  attributes operations responsibilities emptybox
                  name-actual-height margin-cache heights-cache font fill stroke filter clip-path) cls
      (with-canvas (cc width height) canvas
        (let ((font-size (slot-value font 'kaavio::size))
              (spice     (slot-value font 'kaavio::width-spice))
              (spacing   (slot-value font 'kaavio::line-spacing))
              (topleft   (xy+ cc (- (/ width 2)) (- (/ height 2)))))
          (macrolet ((register-entity (entity)
                       `(check-and-draw-local-entity ,entity canvas writer)))
            (let ((left             0)
                  (right            width)
                  (*default-font*   font)
                  (*default-fill*   fill)
                  (*default-stroke* stroke)
                  (*default-filter* filter)
                  (kaavio:*current-clip-path* clip-path))
              ;; draw whole box
              (rectangle (make-point (/ width 2) (/ height 2)) width height)
              (when active-p
                ;; line of active-class
                (setf left  margin-cache
                      right (- width margin-cache))
                (line `((,left  0) (,left  ,height)))
                (line `((,right 0) (,right ,height))))
              (let ((y 0)
                    (center (/ width 2)))
                ;; draw name box.
                (let ((height (car heights-cache))
                      (names  (kaavio::string/split (fix-name name) #\newline)))
                  (setf y (+ (/ (- height name-actual-height) 2) margin-cache))
                  ;; stereotype and name
                  (when stereotype
                    (incf y font-size)
                    (uml-stereotype-draw stereotype
                                         (+ (canvas-left canvas) center)
                                         (+ (canvas-top  canvas) y) :center font clip-path writer)
                    (incf y spacing))
                  (dolist (name names)
                    (incf y font-size)
                    (text (make-point center y) name :align :center
                          :font (when abstract-p
                                  (make-font :style :italic :base font)))
                    (incf y spacing))
                  (setf y height))
                ;; draw multiplicity ( if exists ).
                (when multiplicity
                  (let* ((font  (slot-value multiplicity 'font))
                         (fsize (slot-value font         'kaavio::size))
                         (x (- (+ (point-x topleft) width) margin-cache))
                         (y    (+ (point-y topleft) fsize  margin-cache)))
                    (uml-multiplicity-draw multiplicity x y :right clip-path writer)))
                ;; draw template box ( if exists ).
                (when template
                  (rectangle (make-point width 0)
                             (+ (* 2 margin-cache)
                                (* (length template) font-size spice))
                             (+ font-size (* 2 margin-cache))
                             :stroke `(:dasharray (3 3) :base ,stroke))
                  (text (make-point width (/ font-size 2)) template :align :center))
                (labels ((additional-box (fnc lst tail-p &optional title)
                           (if (null lst)
                               (when (and tail-p emptybox)
                                 (line `((,left ,y) (,right ,y)))
                                 (incf y (* 2 margin-cache)))
                               (progn
                                 (line `((,left ,y) (,right ,y)))
                                 (incf y margin-cache)
                                 (when title
                                   (incf y font-size)
                                   (text (make-point (/ width 2) y) title :align :center)
                                   (incf y spacing))
                                 (dolist (entry lst)
                                   (unless (eq entry (car lst))
                                     (incf y spacing))
                                   (incf y font-size)
                                   (text (make-point (+ left margin-cache) y)
                                         (funcall fnc entry)
                                         :font (unless (stringp entry)
                                                 (cond
                                                   ((uml-class-stuff-abstract-p entry)
                                                    (make-font :style :italic :base font))
                                                   ((uml-class-stuff-class-scope-p entry)
                                                    (make-font :decoration :underline :base font))
                                                   (t nil)))))
                                 (incf y margin-cache)))))
                  ;; attributes box
                  (additional-box #'uml-class-stuff-to-string
                                  attributes (or operations responsibilities))
                  ;; operations box
                  (additional-box #'uml-class-stuff-to-string
                                                 operations responsibilities)
                  ;; responsibilities box
                  (additional-box #'identity responsibilities nil "Responsibilities"))))))))))
                  
;;for debug...
;(defmethod post-draw ((cls uml-class) writer)
;  (call-next-method)
;  (draw-canvas-frame (group-get-canvas #|shape-get-subcanvas|# cls) writer))
 

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-class
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-class}} position name ${KEY} pivot width height stereotype keyword multiplicity abstract active template attributes operations responsibilities emptybox font fill stroke link filter layer id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `name` ---- クラスの名前を文字列で指定します。
;;* `pivot` ---- `position` で指定した基準点が図形要素のどこにくるように描画するかを指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `width` ---- 幅を自動決定せず、明示的に指定したい場合に数値で指定します。
;;* `height` ---- 高さを自動決定せず、明示的に指定したい場合に数値で指定します。
;;* `stereotype` ---- ステレオタイプを明示する場合はステレオタイプ情報を指定します。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `keyword` ---- キーワードを明示する場合はステレオタイプ情報を指定します。 `stereotype` が指定されている場合は無視されます。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `multiplicity` ---- 多重度を数値または文字列で指定します。
;;* `abstract` ---- 抽象クラスであることを明示する場合は `t` を指定します。
;;* `active` ---- アクティブクラスであることを明示する場合は `t` を指定します。
;;* `template` ---- クラステンプレートの場合、そのテンプレート引数を文字列で指定します。
;;* `attributes` ---- クラスの属性を明示する場合、クラス属性情報のリストを指定します。指定方法については [$@ 節](#uml-class)を参照してください。
;;* `operations` ---- クラスの操作を明示する場合、クラス操作情報のリストを指定します。指定方法については [$@ 節](#uml-class)を参照してください。
;;* `responsibilities` ---- クラスの責務を明示する場合、文字列で指定します。改行コードを含むことで複数行を記述できます。
;;* `emptybox` ---- 属性、操作、責務で空になるボックスを描画する場合は `t` を指定します。
;;* `font` ---- フォントを指定します。
;;* `fill` ---- 内部の塗り潰しを指定します。
;;* `stroke` ---- 外枠を描画するストロークを指定します
;;* `link` ---- リンクにする場合、リンク先を指定します。
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;
;;${DESCRIPTION}
;;
;;　UML クラス図などで使用されるクラスを描画します。スタイルを統一したい場合、
;;with-uml-class-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#クラス図)
;;* [$$](#uml-class)
;;* with-uml-class-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-class (position name &key pivot width height stereotype keyword
                                      multiplicity abstract active template
                                      attributes operations responsibilities
                                      (emptybox nil emptybox-p)
                                      font fill stroke filter link layer id)
  `(register-entity (make-instance 'uml-class
                                   :position ,position :pivot ,pivot :name ,name
                                   :width  (or ,width  *uml-class-width*)
                                   :height (or ,height *uml-class-height*)
                                   :multiplicity ,multiplicity
                                   :stereotype ,(or stereotype keyword) :abstract-p ,abstract
                                   :active-p ,active :template ,template
                                   :attributes ',attributes
                                   :operations ',operations
                                   :responsibilities ,responsibilities
                                   :emptybox ,(if emptybox-p
                                                  emptybox
                                                  '*uml-class-draw-emptybox*)
                                   :font ,font :fill ,fill :stroke ,stroke
                                   :clip-path *current-clip-path*
                                   :link ,link :filter ,filter :layer ,layer :id ,id)))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-class-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-class-options}} (${KEY} font fill stroke filter layer width height name-margin margin draw-emptybox) ${BODY} body
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-class マクロで描画される図形要素のデフォルトオプションを変更します。キーワード
;;パラメータ群の説明は uml-class マクロを参照してください。
;;
;;${SEE_ALSO}
;;
;;* uml-class マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-class-options ((&key font fill stroke filter layer width height
                                             name-margin margin draw-emptybox) &rest body)
  (labels ((impl (params acc)
             (if (null params)
                 acc
                 (let ((value  (car  params))
                       (symbol (cadr params)))
                   (impl (cddr params)
                         (if (null value)
                             acc
                             (push (list symbol value) acc)))))))
    (let ((lst (impl (list font          '*uml-class-font*
                           fill          '*uml-class-fill*
                           stroke        '*uml-class-stroke*
                           filter        '*uml-class-filter*
                           layer         '*uml-class-layer*
                           width         '*uml-class-width*
                           height        '*uml-class-height*
                           name-margin   '*uml-class-name-margin*
                           margin        '*uml-class-margin*
                           draw-emptybox '*uml-class-draw-emptybox*) nil)))
      `(let ,lst
         ,@body))))

