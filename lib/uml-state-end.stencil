(in-package :kaavio-user)

(defparameter *uml-state-end-radius*       15)
(defparameter *uml-state-end-ratio*       0.6)
(defparameter *uml-state-end-fill*     :white)
(defparameter *uml-state-end-stroke*   :black)

;;------------------------------------------------------------------------------
;;
;; class uml-state-end
;;
;;------------------------------------------------------------------------------
(defclass uml-state-end (kaavio:circle)
  ((ratio :initform 0 :initarg :ratio)))	; number

(defmethod check ((obj uml-state-end) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (ratio) obj
	(check-member ratio :nullable nil :types number))
  nil)

(defmethod post-draw ((obj uml-state-end) writer)
  (with-slots (ratio stroke) obj
	(let* ((canvas (shape-get-subcanvas obj))
		   (center (/ (canvas-width canvas) 2))
		   (radius (* center ratio))
		   (fill   (slot-value (slot-value obj 'kaavio::stroke) 'kaavio::color)))
	  (macrolet ((register-entity (entity)
				   `(check-and-draw-local-entity ,entity canvas writer)))
		(circle (make-point center center) radius :fill fill :stroke :none))))
  (call-next-method)
;  (draw-canvas-frame (shape-get-subcanvas obj) writer)	;for debug...
  nil)


;;------------------------------------------------------------------------------
;;
;; macro uml-state-end
;;
;;------------------------------------------------------------------------------
(defmacro uml-state-end (position &key pivot radius ratio fill stroke link layer id)
  `(register-entity (make-instance 'uml-state-end
								   :position ,position :pivot ,pivot
								   :radius (or ,radius *uml-state-end-radius*)
								   :ratio  (or ,ratio  *uml-state-end-ratio*)
								   :fill   (or ,fill   *uml-state-end-fill*   *default-fill*)
								   :stroke (or ,stroke *uml-state-end-stroke* *default-stroke*)
								   :link ,link :layer ,layer :id ,id)))

