
(in-package :kaavio-user)

(load-stencil :uml-common-base)

(defparameter *uml-note-font*         nil)
(defparameter *uml-note-fill*      :white)
(defparameter *uml-note-stroke*    :black)
(defparameter *uml-note-margin*        10)
(defparameter *uml-note-crease*        20)
(defparameter *uml-note-dasharray* '(3 3))
(defparameter *uml-note-filter*       nil)
(defparameter *uml-note-layer*        nil)

;;------------------------------------------------------------------------------
;;
;; class uml-note
;;
;;------------------------------------------------------------------------------
(defclass uml-note (kaavio:text-shape)
  ((stereotype :initform nil :initarg :stereotype) ; (or nil uml-stereotype-info)
   (targets    :initform nil :initarg :targets)    ; list of (or keyword symbol point)
   (crease     :initform nil :initarg :crease)     ; number
   (dasharray  :initform nil :initarg :dasharray)  ; list of integers
   (filter     :initform nil :initarg :filter)))   ; (or nil keyword)


(defmethod initialize-instance :after ((obj uml-note) &rest initargs)
  (declare (ignore initargs))
  ;;(format t "initialize-instance :after called.~%")
  (with-slots (stereotype targets crease dasharray filter layer) obj
    (setf stereotype (and stereotype (make-uml-stereotype stereotype)))
    (setf targets (cond
                    ((point-p targets) (list targets))
                    ((listp   targets) targets)
                    (t                 (list targets))))
    (setf crease  (or crease *uml-note-crease*))
    (setf dasharray *uml-note-dasharray*)
    (setf filter  (if (eq filter :none)
                      nil
                      (or filter *uml-note-filter* *default-filter*)))
    (setf layer  (if (eq layer :none)
                     nil
                     (or layer *uml-note-layer* *default-layer*))))
  obj)

(defmethod check ((obj uml-note) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  ;;(format t "check called.~%")
  (with-slots (stereotype targets crease dasharray filter) obj
    (check-object stereotype canvas dict :nullable t :class uml-stereotype-info)
    (check-member targets :nullable   t :types list)
    (dolist (target targets)
      (unless (point-p target)
        (check-member target :nullable nil :types symbol)))
    (check-member crease    :nullable nil :types number)
    (check-member dasharray :nullable nil :types list)
    (setf targets
          (mapcar (lambda (target)
                    (if (point-p target)
                        target
                        (let ((ent (kaavio::dict-get-entity dict target)))
                          (unless ent
                            (throw-exception "ERROR : entity '~A' not found in dictionary." target))
                          ent))) targets))
    (check-member filter   :nullable   t :types keyword)))


;; override of group::draw-group
(defmethod draw-group ((obj uml-note) writer)
  (let ((canvas (group-get-canvas obj)))
    (let ((width  (canvas-width  canvas))
          (height (canvas-height canvas)))
      (macrolet ((register-entity (entity)
                   `(check-and-draw-local-entity ,entity canvas writer)))
        (with-slots (stereotype crease filter
                      (text kaavio::text) (font kaavio::font) (margin kaavio::margin)
                      (fill kaavio::fill) (stroke kaavio::stroke) (clip-path kaavio::clip-path)) obj
          (let ((*current-clip-path* clip-path))
            ;; draw note body
            (writer-write writer "<g " (to-property-strings stroke)
                                       (write-when filter "filter='url(#" it ")' ") ">")
            (writer-incr-level writer)
            ;;
            (let ((*mute-stroke* t))
              (polygon `((0 ,(/ height 2))
                         (0 ,height)
                         (,width ,height)
                         (,width ,crease)
                         (,(- width crease) 0)
                         (0 0)
                         (0 ,(/ height 2))) :fill fill)
              ;; crease
              (line `((,width ,crease)
                      (,(- width crease) ,crease) (,(- width crease) 0))))
            (writer-decr-level writer)
            (writer-write writer "</g>")
            ;; draw text
            (let ((cv (uml-draw-textarea obj stereotype writer)))
              (declare (ignorable cv))
;              (rect (canvas-center cv)
;                    (canvas-width cv) (canvas-height cv)
;                    :fill '(:color :red :opacity 0.1) :stroke :red)
              ))))))
  nil)

;for debug...
;(defmethod post-draw ((obj uml-note) writer)
;  (call-next-method)
;  (draw-canvas-frame (shape-get-subcanvas obj) writer))
 

(defun draw-connection (obj writer)
  (let* ((canvas (group-get-canvas obj))
         (width  (canvas-width  canvas))
         (height (canvas-height canvas)))
    (macrolet ((register-entity (entity)
                 `(check-and-draw-local-entity ,entity canvas writer)))
      (with-slots (targets dasharray kaavio::stroke) obj
        ;; draw connections
        (let ((canvas (make-canvas '(0 0) width height))
              (st (make-stroke :dasharray dasharray :base kaavio::stroke)))
          (if (= 1 (length targets))
              (line (resolve-connector-points obj (car targets) :CC nil) :stroke st)
              (progn
                (writer-write writer "<g " (to-property-strings st) ">")
                (writer-incr-level writer)
                (let ((*mute-stroke* t))
                  (dolist (ent targets)
                    (line (resolve-connector-points obj ent :CC nil))))
                (writer-decr-level writer)
                (writer-write writer "</g>")))))))
  nil)

(defmethod draw-entity ((obj uml-note) writer)
  (let ((result (call-next-method)))
    (draw-connection obj writer)
    result))

(defmethod text-shape-calc-size ((obj uml-note))
  (with-slots (kaavio::width kaavio::height) obj
    (values kaavio::width kaavio::height)))

;;MEMO : uml-note は暗黙に :valign :top だが　paragraph-area の調整によってそれを実現している。
(defmethod text-shape-paragraph-area ((obj uml-note))
  ;;(format t "text-shape-paragraph-area called.~%")
  (with-slots (stereotype (text kaavio::text)
                          (font kaavio::font) (margin kaavio::margin)) obj
    (multiple-value-bind (w height) (uml-calc-textarea font text stereotype)
      (declare (ignore w))
      (incf height (* margin 2))
      (make-canvas (attribute-topleft obj)
                   (attribute-width   obj) height))))

;;MEMO : uml-note のサブキャンバスは常に shape と同じ（つまりテキストと重なる可能性がある）
(defmethod shape-get-subcanvas ((obj uml-note))
  ;;(format t "shape-get-subcanvas called.~%")
  (make-canvas (attribute-topleft obj)
               (attribute-width   obj)
               (attribute-height  obj)))

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-note
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-note}} position width height text ${KEY} pivot stereotype keyword targets margin crease font fill stroke link layer filter id contents
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `width` ---- 幅を数値で指定します。
;;* `height` ---- 高さを数値で指定します。
;;* `text` ---- 内部に配置するテキストを指定します。改行を含む複数行の文字列が使用できます。
;;* `pivot` ---- `position` で指定した基準点が図形要素のどこにくるように描画するかを指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `stereotype` ---- ステレオタイプを明示する場合はステレオタイプ情報を指定します。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `keyword` ---- キーワードを明示する場合はステレオタイプ情報を指定します。 `stereotype` が指定されている場合は無視されます。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `targets` ---- 点線で接続する対象を指定します。対象はその ID をキーワードシンボルで指定するか、接続点の具体的な座標値です。対象が単一の場合はそのまま指定可能しますが、複数の対象に（複数の点線で）接続する場合、リストにして指定してください。
;;* `margin` ---- 余白の大きさを指定します。省略した場合のデフォルト値は10です。
;;* `crease` ---- 右上部分の折り返しの大きさを変更したい場合、その大きさを数値で指定します。省略した場合のデフォルト値は20です。
;;* `font` ---- フォントを指定します。
;;* `fill` ---- 内部の塗り潰しを指定します。
;;* `stroke` ---- 外枠を描画するストロークを指定します
;;* `link` ---- リンクにする場合、リンク先を指定します。
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;* `contents` ---- 内部をサブキャンバスとした描画をしたい場合、その内容を指定します。
;;
;;${DESCRIPTION}
;;
;;　各種の UML ダイアグラムで使用されるノートを描画します。スタイルを統一
;;したい場合、with-uml-note-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#uml-note)
;;* with-uml-note-options マクロ
;;
;;${NOTES}
;;
;;　ノートから `targets` に引かれる点線は、 `stroke` で指定したストロークの `dasharray` を
;;差し替えたものが使用されます。これはデフォルトで `'(3 3)` ですが、uml-note マクロではこれを
;;個別に指定することはできません。 `dasharray` を変更したい場合、with-uml-note-options マクロ
;;を使用してください。
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-note (position width height text
                            &key pivot stereotype keyword targets
                                 margin crease font
                                 fill stroke link layer filter id contents)
  (let ((code `(register-entity (make-instance 'uml-note
                                               :position ,position :pivot ,pivot
                                               :width ,width :height ,height
                                               :text ,text :stereotype ,(or stereotype keyword)
                                               :targets ,targets
                                               :align  :left :valign :top
                                               :margin (or ,margin *uml-note-margin*)
                                               :font ,font
                                               :fill   (or ,fill *uml-note-fill*)
                                               :stroke (or ,stroke *uml-note-stroke*)
                                               :crease ,crease :link ,link
                                               :clip-path kaavio:*current-clip-path*
                                               :layer ,layer :filter ,filter :id ,id))))
    (if (null contents)
        code
        (let ((g-obj (gensym "OBJ")))
          `(let* ((,g-obj ,code)
                  (canvas (shape-get-subcanvas ,g-obj)))
             (declare (special canvas))
             ,@contents)))))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-note-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-note-options}} (${KEY} margin crease font fill stroke filter layer dasharray) ${BODY} body
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-note マクロで描画される図形要素のデフォルトオプションを変更します。キーワード
;;パラメータ群の説明は uml-note マクロを参照してください。ただし、以下はこのマクロで
;;のみ指定可能です。
;;
;;* `dasharray` ---- uml-note からその `targets` に引かれる点線の仕様を指定します。詳細は [$@ 節](#ストローク)を参照してください。
;;
;;${SEE_ALSO}
;;
;;* uml-note マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-note-options ((&key margin crease font
                                       fill stroke layer filter dasharray) &rest body)
  (labels ((impl (params acc)
             (if (null params)
                 acc
                 (let ((value  (car  params))
                       (symbol (cadr params)))
                   (impl (cddr params)
                         (if (null value)
                             acc
                             (push (list symbol value) acc)))))))
    (let ((lst (impl (list margin    '*uml-note-margin*
                           crease    '*uml-note-crease*
                           font      '*uml-note-font*
                           fill      '*uml-note-fill*
                           stroke    '*uml-note-stroke*
                           layer     '*uml-note-layer*
                           filter    '*uml-note-filter*
                           dasharray '*uml-note-dasharray*) nil)))
      `(let ,lst
         ,@body))))
