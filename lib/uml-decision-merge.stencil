
(in-package :kaavio-user)

(defparameter *uml-decision-merge-font*            nil)
(defparameter *uml-decision-merge-fill*         :white)
(defparameter *uml-decision-merge-stroke*       :black)
(defparameter *uml-decision-merge-width*            40)
(defparameter *uml-decision-merge-height*           30)
(defparameter *uml-decision-merge-margin*            5)
(defparameter *uml-decision-merge-filter*          nil)
(defparameter *uml-decision-merge-layer*           nil)


;;-------------------------------------------------------------------------------
;;
;; class uml-decision-merge
;;
;;-------------------------------------------------------------------------------
(defclass uml-decision-merge (kaavio:text-shape)
  ((filter :initform nil :initarg  :filter)))   ; (or nil keyword)
   

(defmethod initialize-instance :after ((obj uml-decision-merge) &rest initargs)
  (declare (ignore initargs))
  (with-slots (filter layer) obj
    (setf filter (if (eq filter :none)
                     nil
                     (or filter *uml-decision-merge-filter* *default-filter*)))
    (setf layer  (if (eq layer :none)
                     nil
                     (or layer *uml-decision-merge-layer* *default-layer*))))
  obj)

(defmethod check ((obj uml-decision-merge) canvas dict)
  (with-slots (kaavio::text) obj
    (unless kaavio::text
      (setf kaavio::text "")))
  ;; this method must call super class' one.
  (call-next-method))

(defmethod shape-connect-point ((obj uml-decision-merge) type1 type2 arg)
  (with-slots (kaavio::text kaavio::width kaavio::height) obj
    (let ((center (attribute-center obj)))
      (if (string= "" kaavio::text)
          (kaavio::diamond-connect-point   center kaavio::width kaavio::height type1 type2 arg)
          (kaavio::rectangle-connect-point center kaavio::width kaavio::height type1 type2 arg)))))
  
;;MEMO : use impelementation of shape...
;;(defmethod shape-get-subcanvas ((obj uml-decision-merge)) ...)

;; override of group::draw-group
(defmethod draw-group ((obj uml-decision-merge) writer)
  ;;(format t "draw-group called.~%")
  (let ((canvas (group-get-canvas obj)))
    (let ((width  (canvas-width  canvas))
          (height (canvas-height canvas)))
      (macrolet ((register-entity (entity)
                   `(check-and-draw-local-entity ,entity canvas writer)))
        (with-slots (kaavio::text filter
                         kaavio::font kaavio::margin
                         kaavio::fill kaavio::stroke kaavio::clip-path) obj
          (let ((kaavio:*current-clip-path* kaavio::clip-path))
            (when filter
              (writer-write writer "<g filter='url(#" filter ")' >")
              (writer-incr-level writer))
            (let ((*default-filter* filter)
                  (*default-fill*   kaavio::fill)
                  (*default-stroke* kaavio::stroke))
              (if (string/= "" kaavio::text)
                  (let ((offset (/ height 3)))
                    (polygon `((,offset 0)
                               (0 ,(/ height 2))
                               (,offset ,height)
                               (,(- width offset) ,height)
                               (,width ,(/ height 2))
                               (,(- width offset) 0))))
                  (let ((half-w (/ width  2))
                        (half-h (/ height 2)))
                    (polygon `((,half-w 0)
                               (0 ,half-h)
                               (,half-w ,height)
                               (,width ,half-h)
                               (,half-w 0))))))
            (when filter
              (writer-decr-level writer)
              (writer-write writer "</g>"))
            ;; draw text
            (call-next-method))))))
  nil)


;for debug...
;(defmethod post-draw ((obj uml-decision-merge) writer)
;  ;;(format t "post-draw called.~%")
;  (call-next-method)
;  (with-slots (contents-p) obj
;    (when contents-p
;      (draw-canvas-frame (shape-get-subcanvas obj) writer))))
 

(defmethod text-shape-calc-size ((obj uml-decision-merge))
  ;;(format t "text-shape-calc-size called.~%")
  (multiple-value-bind (width height) (call-next-method)
    (with-slots ((margin kaavio::margin)) obj
      (incf height (* margin 2)))
    (values (cl:max width  *uml-decision-merge-width*)
            (cl:max height *uml-decision-merge-height*))))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-decision
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-decision}} position ${KEY} pivot text width height margin font fill stroke link layer filter id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `pivot` ---- `position` で指定した基準点が図形要素のどこにくるように描画するかを指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `text` ---- 分岐に関する情報をテキストで指定します。
;;* `width` ---- 幅を自動決定せず、明示的に指定したい場合に数値で指定します。
;;* `height` ---- 高さを自動決定せず、明示的に指定したい場合に数値で指定します。
;;* `margin` ---- テキスト描画における「余白」のサイズです。省略した場合のデフォルト値は 5 です。
;;* `font` ---- フォントを指定します。
;;* `fill` ---- 内部の塗り潰しを指定します。
;;* `stroke` ---- 外枠を描画するストロークを指定します
;;* `link` ---- リンクにする場合、リンク先を指定します。
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;
;;${DESCRIPTION}
;;
;;　UML アクティビティ図におけるデジジョン（条件による分岐）を描画します。スタイルを
;;統一したい場合、with-uml-decision-merge-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#アクティビティ図)
;;* [$$](#uml-decision)
;;* [$$](#uml-merge)
;;* with-uml-decision-merge-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-decision (position &key pivot text width height margin
                                    font fill stroke link layer filter id)
  `(register-entity (make-instance 'uml-decision-merge
                                   :position ,position :pivot ,pivot
                                   :text ,text :width ,width :height ,height
                                   :margin  (or ,margin *uml-decision-merge-margin*)
                                   :font    (or ,font   *uml-decision-merge-font*)
                                   :fill    (or ,fill   *uml-decision-merge-fill*)
                                   :stroke  (or ,stroke *uml-decision-merge-stroke*)
                                   :clip-path kaavio:*current-clip-path*
                                   :link ,link :layer ,layer :filter ,filter :id ,id)))

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-merge
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-merge}} position ${KEY} pivot width height font fill stroke link layer filter id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `pivot` ---- `position` で指定した基準点が図形要素のどこにくるように描画するかを指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `width` ---- 幅を自動決定せず、明示的に指定したい場合に数値で指定します。
;;* `height` ---- 高さを自動決定せず、明示的に指定したい場合に数値で指定します。
;;* `font` ---- フォントを指定します。
;;* `fill` ---- 内部の塗り潰しを指定します。
;;* `stroke` ---- 外枠を描画するストロークを指定します
;;* `link` ---- リンクにする場合、リンク先を指定します。
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;
;;${DESCRIPTION}
;;
;;　UML アクティビティ図におけるマージを描画します。スタイルを統一したい場合、
;;with-uml-decision-merge-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#アクティビティ図)
;;* [$$](#uml-decision)
;;* [$$](#uml-merge)
;;* with-uml-decision-merge-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-merge (position &key pivot width height
                                   font fill stroke link layer filter id)
  `(register-entity (make-instance 'uml-decision-merge
                                   :position ,position :pivot ,pivot
                                   :text nil :width ,width :height ,height
                                   :margin  *uml-decision-merge-margin*
                                   :font    (or ,font   *uml-decision-merge-font*)
                                   :fill    (or ,fill   *uml-decision-merge-fill*)
                                   :stroke  (or ,stroke *uml-decision-merge-stroke*)
                                   :clip-path kaavio:*current-clip-path*
                                   :link ,link :layer ,layer :filter ,filter :id ,id)))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-decision-merge-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-decision-merge-options}} (${KEY} font fill stroke width height margin filter layer) ${BODY} body
;;
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-decision マクロおよび uml-merge マクロで描画される図形要素のデフォルトオプションを
;;変更します。キーワードパラメータ群の説明はそれぞれのマクロを参照してください。
;;
;;${SEE_ALSO}
;;
;;* uml-decision マクロ
;;* uml-merge マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-decision-merge-options ((&key (font   nil font-p)
                                                 (fill   nil fill-p)
                                                 (stroke nil stroke-p)
                                                 (width  nil width-p)
                                                 (height nil height-p)
                                                 (margin nil margin-p)
                                                 (filter nil filter-p)
                                                 (layer  nil layer-p)) &rest body)
  (let ((bindings nil))
    (labels ((impl (arg-p binding)
               (when arg-p (push binding bindings))))
      (impl font-p   `(*uml-decision-merge-font*   (make-font2   *uml-decision-merge-font*   ,font)))
      (impl fill-p   `(*uml-decision-merge-fill*   (make-fill2   *uml-decision-merge-fill*   ,fill)))
      (impl stroke-p `(*uml-decision-merge-stroke* (make-stroke2 *uml-decision-merge-stroke* ,stroke)))
      (impl width-p  `(*uml-decision-merge-width*  ,width))
      (impl height-p `(*uml-decision-merge-height* ,height))
      (impl margin-p `(*uml-decision-merge-margin* ,margin))
      (impl filter-p `(*uml-decision-merge-filter* ,filter))
      (impl layer-p  `(*uml-decision-merge-layer*  ,layer)))
    `(let ,(nreverse bindings)
       ,@body)))
