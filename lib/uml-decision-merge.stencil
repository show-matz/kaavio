
(in-package :kaavio-user)

(defparameter *uml-decision-fill*       :white)
(defparameter *uml-decision-stroke*     :black)
(defparameter *uml-decision-size*           40)
(defparameter *uml-decision-height-ratio* 0.75)

(defparameter *uml-merge-fill*          :white)
(defparameter *uml-merge-stroke*        :black)
(defparameter *uml-merge-size*              40)
(defparameter *uml-merge-height-ratio*    0.75)


(defun uml-decision-merge-connect-point (center width height type1 type2 arg)
  ;;ToDo : ivIbc7vn2EJ : 面倒くさいので ellipse 実装に転送して終わりにする。気が向いたらちゃんとやる。
  (ellipse-connect-point center (/ width 2) (/ height 2) type1 type2 arg))

;;-------------------------------------------------------------------------------
;;
;; class uml-decision-merge
;;
;;-------------------------------------------------------------------------------
(defclass uml-decision-merge (kaavio:shape)
  ((center			:initform nil :initarg :center)			; point
   (size			:initform   0 :initarg :size)			; number
   (height-ratio	:initform   0 :initarg :height-ratio)	; number
   (fill			:initform nil :initarg :fill)			; (or nil fill-info)
   (stroke			:initform nil :initarg :stroke)))		; (or nil stroke-info)

(defmethod initialize-instance :after ((obj uml-decision-merge) &rest initargs)
  (declare (ignore initargs))
  (with-slots (fill stroke) obj
	(setf fill    (make-fill   (or fill   *default-fill*  )))
	(setf stroke  (make-stroke (or stroke *default-stroke*))))
  obj)

(defmethod check ((obj uml-decision-merge) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  (with-slots (center size height-ratio fill stroke) obj
	(check-member size         :nullable nil :types number)
	(check-member height-ratio :nullable nil :types number)
	(check-object fill         canvas dict :nullable   t :class fill-info)
	(check-object stroke       canvas dict :nullable   t :class stroke-info)
	(setf center (canvas-fix-point canvas center)))
  nil)

(defmethod attribute-width ((obj uml-decision-merge))
  (slot-value obj 'size))

(defmethod attribute-height ((obj uml-decision-merge))
  (* (slot-value obj 'size) (slot-value obj 'height-ratio)))

(defmethod attribute-center ((obj uml-decision-merge))
  (slot-value obj 'center))

(defmethod shape-connect-point ((obj uml-decision-merge) type1 type2 arg)
  (with-slots (center size height-ratio) obj
	(uml-decision-merge-connect-point center size
									  (* size height-ratio) type1 type2 arg)))
  
;;MEMO : use impelementation of shape...
;;(defmethod shape-get-subcanvas ((obj uml-decision-merge)) ...)

(defmethod entity-composition-p ((obj uml-decision-merge))
  nil)
  
(defmethod draw-entity ((obj uml-decision-merge) writer)
  (pre-draw obj writer)
  (let ((canvas (make-canvas (attribute-topleft obj)
							 (attribute-width   obj)
							 (attribute-height  obj))))
	(with-slots (center size height-ratio fill stroke) obj
	  (let* ((width  (canvas-width  canvas))
			 (height (canvas-height canvas))
			 (half-w (/ width  2))
			 (half-h (/ height 2)))
		(macrolet ((register-entity (entity)
					 `(check-and-draw-local-entity ,entity canvas writer)))
		  (let ((*default-fill*   fill)
				(*default-stroke* stroke))
			(polygon `((,half-w 0)
					   (0 ,half-h)
					   (,half-w ,height)
					   (,width ,half-h)
					   (,half-w 0))))))))
  (post-draw obj writer)
  nil)



;;-------------------------------------------------------------------------------
;;
;; macro uml-decision
;;
;;-------------------------------------------------------------------------------
(defmacro uml-decision (center &key size height-ratio fill stroke layer id)
  `(register-entity (make-instance 'uml-decision-merge
								   :center ,center
								   :size	(or ,size         *uml-decision-size*)
								   :height-ratio
											(or ,height-ratio *uml-decision-height-ratio*)
								   :fill	(or ,fill         *uml-decision-fill*)
								   :stroke	(or ,stroke       *uml-decision-stroke*)
								   :link nil :layer ,layer :id ,id)))

;;-------------------------------------------------------------------------------
;;
;; macro uml-merge
;;
;;-------------------------------------------------------------------------------
(defmacro uml-merge (center &key size height-ratio fill stroke layer id)
  `(register-entity (make-instance 'uml-decision-merge
								   :center ,center
								   :size	(or ,size         *uml-merge-size*)
								   :height-ratio
											(or ,height-ratio *uml-merge-height-ratio*)
								   :fill	(or ,fill         *uml-merge-fill*)
								   :stroke	(or ,stroke       *uml-merge-stroke*)
								   :link nil :layer ,layer :id ,id)))
