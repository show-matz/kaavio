
(in-package :kaavio-user)

(load-stencil :uml-common-base)

(defparameter *uml-signal-font*         nil)
(defparameter *uml-signal-fill*      :white)
(defparameter *uml-signal-stroke*    :black)
(defparameter *uml-signal-direction* :right)
(defparameter *uml-signal-width*         80)
(defparameter *uml-signal-height*        40)
(defparameter *uml-signal-depth*         15)
(defparameter *uml-signal-margin*        10)
(defparameter *uml-signal-filter*       nil)
(defparameter *uml-signal-layer*        nil)

;;------------------------------------------------------------------------------
;;
;; class uml-signal
;;
;;------------------------------------------------------------------------------
(defclass uml-signal (kaavio:text-shape)
  ((type       :initform nil :initarg :type)       ; keyword - :send, :receive
   (stereotype :initform nil :initarg :stereotype) ; (or nil uml-stereotype-info)
   (direction  :initform nil :initarg :direction)  ; keyword - :left, :right
   (depth      :initform nil :initarg :depth)      ; number
   (filter     :initform nil :initarg :filter)))   ; (or nil keyword)

(defmethod initialize-instance :after ((obj uml-signal) &rest initargs)
  (declare (ignore initargs))
  ;;(format t "initialize-instance :after called.~%")
  (with-slots (stereotype direction filter layer) obj
    (setf stereotype (and stereotype (make-uml-stereotype stereotype)))
    (setf filter  (if (eq filter :none)
                      nil
                      (or filter *uml-signal-filter* *default-filter*)))
    (setf layer  (if (eq layer :none)
                     nil
                     (or layer *uml-signal-layer* *default-layer*))))
  obj)

(defmethod check ((obj uml-signal) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  ;;(format t "check called.~%")
  (with-slots (type stereotype direction depth filter) obj
    (check-member   type       :nullable nil :types keyword)
    (check-object   stereotype canvas dict :nullable t :class uml-stereotype-info)
    (check-member   direction  :nullable nil :types keyword)
    (check-member   depth      :nullable nil :types number)
    (check-member   filter     :nullable   t :types keyword)
    (check-keywords type       :send :receive)
    (check-keywords direction  :left :right)))

;;MEMO: :CC の場合にちょっとマズいことになるが、これはあきらめる
(defmethod shape-connect-point ((obj uml-signal) type1 type2 arg)
  (let ((pt (rectangle-connect-point (attribute-center obj)
                                     (attribute-width  obj)
                                     (attribute-height obj) type1 type2 arg)))
    (with-slots (type direction depth) obj
      (with-point (x y) pt
        (if (eq type :send)
            (cond
              ((and (eq direction :right)
                    (eq type2     :right) (zerop arg)) (incf x (/ depth 2)))
              ((and (eq direction  :left)
                    (eq type2      :left) (zerop arg)) (decf x (/ depth 2))))
            (cond
              ((and (eq direction :right)
                    (eq type2     :right) (zerop arg)) (decf x (/ depth 2)))
              ((and (eq direction  :left)
                    (eq type2      :left) (zerop arg)) (incf x (/ depth 2)))))))
    pt))
  
;; override of group::draw-group
(defmethod draw-group ((obj uml-signal) writer)
  (let ((canvas (group-get-canvas obj)))
    (let ((width  (canvas-width  canvas))
          (height (canvas-height canvas)))
      (macrolet ((register-entity (entity)
                   `(check-and-draw-local-entity ,entity canvas writer)))
        (with-slots (type direction stereotype depth filter
                      (text kaavio::text) (font kaavio::font) (margin kaavio::margin)
                      (fill kaavio::fill) (stroke kaavio::stroke) (clip-path kaavio::clip-path)) obj
          (let ((half                (/ depth 2))
                (*default-filter*    filter)
                (*default-fill*      fill)
                (*default-stroke*    stroke)
                (*current-clip-path* clip-path))
            ;; draw signal body
            (if (eq type :send)
                (if (eq direction :right)
                    (polygon `((0 0)
                               (0 ,height)
                               (,(- width half) ,height)
                               (,(+ width half) ,(/ height 2))
                               (,(- width half) 0)
                               (0 0)))
                    (polygon `((,half 0)
                               (,(- half) ,(/ height 2))
                               (,half ,height)
                               (,width ,height)
                               (,width 0)
                               (,half 0))))
                (if (eq direction :right)
                    (polygon `((0 0)
                               (0 ,height)
                               (,(+ width half) ,height)
                               (,(- width half) ,(/ height 2))
                               (,(+ width half) 0)
                               (0 0)))
                    (polygon `((,(- half) 0)
                               (,half ,(/ height 2))
                               (,(- half) ,height)
                               (,width ,height)
                               (,width 0)
                               (,(- half) 0)))))
            ;; draw text
            (let ((cv (uml-draw-textarea obj stereotype writer)))
              (declare (ignorable cv))
;              (rect (canvas-center cv)
;                    (canvas-width cv) (canvas-height cv)
;                    :fill '(:color :red :opacity 0.1) :stroke :red)
              ))))))
  nil)

;for debug...
;(defmethod post-draw ((obj uml-signal) writer)
;  (call-next-method)
;  (draw-canvas-frame (shape-get-subcanvas obj) writer))
 
(defmethod text-shape-calc-size ((obj uml-signal))
  ;;(format t "text-shape-calc-size called.~%")
  (multiple-value-bind (width height) (call-next-method)
    (with-slots (stereotype contents-p (font kaavio::font) (margin kaavio::margin)) obj
      ;; MEMO: 縦方向の margin は上記 call-next-method の結果に含まれている
      ;(incf height (* margin 2))
      ;; stereotype (if exists).
      (when stereotype
        (let ((font (or (slot-value stereotype 'font) font)))
          (multiple-value-bind (w h)
                (font-calc-textarea font (uml-stereotype-to-string stereotype))
            (setf width (cl:max width (+ w (* margin 2))))
            (incf height h)))))
    (values (cl:max width  *uml-signal-width*)
            (cl:max height *uml-signal-height*))))

(defmethod text-shape-paragraph-area ((obj uml-signal))
  (shape-get-subcanvas obj))

(defmethod shape-get-subcanvas ((obj uml-signal))
  (make-canvas (attribute-topleft obj)
               (attribute-width   obj)
               (attribute-height  obj)))

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-signal
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-signal}} position type text ${KEY} pivot stereotype keyword width height direction depth font fill stroke margin link filter layer id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `type` ---- シグナルの送信か受信かに応じて `:send` または `:receive` のいずれかを指定します。
;;* `text` ---- 送信／受信アクションの名前を文字列で指定します。
;;* `pivot` ---- `position` で指定した基準点が図形要素のどこにくるように描画するかを指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `stereotype` ---- ステレオタイプを明示する場合はステレオタイプ情報を指定します。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `keyword` ---- キーワードを明示する場合はステレオタイプ情報を指定します。 `stereotype` が指定されている場合は無視されます。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `width` ---- 幅を自動決定せず、明示的に指定したい場合に数値で指定します。
;;* `height` ---- 高さを自動決定せず、明示的に指定したい場合に数値で指定します。
;;* `direction` ---- 送信／受信を示す ＜ や Σ を描画する方向を `:left` または `:right` で指定します。
;;* `depth` ---- 送信／受信を示す ＜ や Σ の大きさを数値で指定します。デフォルト値は 15 です。
;;* `font` ---- フォントを指定します。
;;* `fill` ---- 内部の塗り潰しを指定します。
;;* `stroke` ---- 外枠を描画するストロークを指定します
;;* `margin` ---- テキストの余白を指定します。幅や高さを明示的に指定した場合は無視されます。
;;* `link` ---- リンクにする場合、リンク先を指定します。
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;
;;${DESCRIPTION}
;;
;;　UML アクティビティ図におけるシグナルの送信／受信アクションを描画します。スタイルを統一
;;したい場合、with-uml-signal-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#アクティビティ図)
;;* [$$](#uml-signal)
;;* with-uml-signal-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-signal (position type text &key pivot stereotype keyword width height direction depth
                                              font fill stroke margin link filter layer id)
  `(register-entity
        (make-instance 'uml-signal
                       :position ,position :pivot ,pivot
                       :type ,type :width ,width :height ,height
                       :text ,text :stereotype ,(or stereotype keyword) 
                       :direction (or ,direction *uml-signal-direction*)
                       :depth     (or ,depth     *uml-signal-depth*)
                       :margin   (or ,margin   *uml-signal-margin*)
                       :font     (or ,font   *uml-signal-font*   *default-font*)
                       :fill     (or ,fill   *uml-signal-fill*   *default-fill*   :white)
                       :stroke   (or ,stroke *uml-signal-stroke* *default-stroke* :black)
                       :clip-path kaavio:*current-clip-path*
                       :link ,link :filter ,filter :layer ,layer :id ,id)))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-signal-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-signal-options}} (${KEY} font fill stroke width height direction depth margin filter layer) ${BODY} body
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-signal マクロで描画される図形要素のデフォルトオプションを変更します。キーワード
;;パラメータ群の説明は uml-signal マクロを参照してください。
;;
;;${SEE_ALSO}
;;
;;* uml-signal マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-signal-options ((&key (font       nil font-p)
                                         (fill       nil fill-p)
                                         (stroke     nil stroke-p)
                                         (width      nil width-p)
                                         (height     nil height-p)
                                         (direction  nil direction-p)
                                         (depth      nil depth-p)
                                         (margin     nil margin-p)
                                         (filter     nil filter-p)
                                         (layer      nil layer-p)) &rest body)
  (let ((bindings nil))
    (labels ((impl (arg-p binding)
               (when arg-p (push binding bindings))))
      (impl font-p       `(*uml-signal-font*       (make-font2   *uml-signal-font*   ,font)))
      (impl fill-p       `(*uml-signal-fill*       (make-fill2   *uml-signal-fill*   ,fill)))
      (impl stroke-p     `(*uml-signal-stroke*     (make-stroke2 *uml-signal-stroke* ,stroke)))
      (impl width-p      `(*uml-signal-width*      ,width))
      (impl height-p     `(*uml-signal-height*     ,height))
      (impl direction-p  `(*uml-signal-direction*  ,direction))
      (impl depth-p      `(*uml-signal-depth*      ,depth))
      (impl margin-p     `(*uml-signal-margin*     ,margin))
      (impl filter-p     `(*uml-signal-filter*     ,filter))
      (impl layer-p      `(*uml-signal-layer*      ,layer)))
    `(let ,(nreverse bindings)
       ,@body)))
