
(in-package :kaavio-user)

(defparameter *uml-port-fill*   :white)
(defparameter *uml-port-stroke* :black)
(defparameter *uml-port-size*       16)
(defparameter *uml-port-filter*    nil)
(defparameter *uml-port-layer*     nil)

;;------------------------------------------------------------------------------
;;
;; class uml-port
;;
;;------------------------------------------------------------------------------
(defclass uml-port (kaavio:group)
  ((name    :initform nil :initarg :name)        ; (or nil label-info)
   (fill    :initform nil :initarg :fill)        ; (or nil fill-info)
   (stroke  :initform nil :initarg :stroke)      ; (or nil stroke-info)
   (clip-path :initform nil :initarg :clip-path) ; (or nil symbol)
   (filter  :initform nil :initarg :filter)))    ; (or nil keyword)


(defmethod initialize-instance :after ((port uml-port) &rest initargs)
  (declare (ignore initargs))
  (with-slots (name fill stroke filter layer) port
    (setf name    (and name (make-label name)))
    (setf fill    (make-fill   (or fill   *uml-port-fill*   *default-fill*)))
    (setf stroke  (make-stroke (or stroke *uml-port-stroke* *default-stroke*)))
    (setf filter  (if (eq filter :none)
                      nil
                      (or filter *uml-port-filter* *default-filter*)))
    (setf layer  (if (eq layer :none)
                     nil
                     (or layer *uml-port-layer* *default-layer*))))
  port)

(defmethod check ((port uml-port) canvas dict)
  (with-slots (name fill stroke clip-path) port
    (check-object name   canvas dict :nullable   t :class  label-info)
    (check-object fill   canvas dict :nullable   t :class   fill-info)
    (check-object stroke canvas dict :nullable   t :class stroke-info)
    (check-member clip-path          :nullable   t :types      symbol))
    ;; this method must call super class' one.
    (call-next-method))

;; override of group::draw-group
(defmethod draw-group ((port uml-port) writer)
  (let ((canvas (group-get-canvas port)))
    (with-slots (name size offset fill stroke clip-path filter) port
      (with-canvas (cc width height) canvas
        (let* ((x (/ width  2))
               (y (/ height 2))
               (kaavio:*current-clip-path* clip-path))
          (macrolet ((register-entity (entity)
                       `(check-and-draw-local-entity ,entity canvas writer)))
            (let ((*default-fill*   fill)
                  (*default-stroke* stroke))
              (rectangle `(,x ,y) width height :filter filter))
            (when name
              (draw-label name port clip-path writer)))))))
  nil)

;;for debug...
;(defmethod post-draw ((port uml-port) writer)
;  (call-next-method)
;  (draw-canvas-frame (group-get-canvas #|shape-get-subcanvas|# port) writer))
 

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-port
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-port}} position ${KEY} name size fill stroke layer filter id
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `name` ---- ポート名を文字列またはキーワードシンボルで指定します。
;;* `size` ---- 描画されるポートのサイズを指定します。
;;* `fill` ---- 内部の塗り潰しを指定します。
;;* `stroke` ---- 外枠を描画するストロークを指定します
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;
;;${DESCRIPTION}
;;
;;　UML コンポーネント図などにおけるポートを描画します。スタイルを統一したい場合、
;;with-uml-port-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#コンポーネント図)
;;* [$$](#uml-port)
;;* with-uml-port-options マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-port (position &key name size fill stroke filter layer id)
  `(register-entity (make-instance 'uml-port
                                   :position ,position :pivot :CC
                                   :name ,name
                                   :height  (or ,size   *uml-port-size*)
                                   :width   (or ,size   *uml-port-size*)
                                   :fill    (or ,fill   *uml-port-fill*)
                                   :stroke  (or ,stroke *uml-port-stroke*)
                                   :clip-path *current-clip-path*
                                   :link nil :layer ,layer
                                   :filter ,filter :id ,id)))

;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-port-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-port-options}} (${KEY} fill stroke size filter layer) ${BODY} body
;;
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-port マクロで描画される図形要素のデフォルトオプションを変更します。キーワード
;;パラメータ群の説明は uml-port マクロを参照してください。
;;
;;${SEE_ALSO}
;;
;;* uml-port マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-port-options ((&key (fill   nil fill-p)
                                       (stroke nil stroke-p)
                                       (size   nil size-p)
                                       (filter nil filter-p)
                                       (layer  nil layer-p)) &rest body)
  (let ((bindings nil))
    (labels ((impl (arg-p binding)
               (when arg-p (push binding bindings))))
      (impl fill-p   `(*uml-port-fill*   (make-fill2   *uml-port-fill*   ,fill)))
      (impl stroke-p `(*uml-port-stroke* (make-stroke2 *uml-port-stroke* ,stroke)))
      (impl size-p   `(*uml-port-size*   ,size))
      (impl filter-p `(*uml-port-filter* ,filter))
      (impl layer-p  `(*uml-port-layer*  ,layer)))
    `(let ,(nreverse bindings)
       ,@body)))
