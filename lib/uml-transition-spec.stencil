(in-package :kaavio-user)

(defparameter *uml-transition-spec-font*  nil)

;;------------------------------------------------------------------------------
;;
;; class uml-transition-spec
;;
;;------------------------------------------------------------------------------
(defclass uml-transition-spec ()
  ((trigger	:initform nil :initarg :trigger)	; (or keyword string)
   (guard	:initform nil :initarg :guard)		; (or keyword string)
   (action	:initform nil :initarg :action)		; (or keyword string)
   (offset	:initform nil :initarg :offset)		; (or nil list)
   (font	:initform nil :initarg :font)))		; (or nil font-info)


(defmethod initialize-instance :after ((obj uml-transition-spec) &rest initargs)
  (declare (ignore initargs))
  (with-slots (offset font) obj
	(setf offset (or offset (make-point 0 0)))
	(when font
	  (setf font (make-font font)))))

(defmethod check ((mul uml-transition-spec) canvas dict)
  (with-slots (trigger guard action offset font) mul
	(check-member trigger :nullable t :types (or keyword string))
	(check-member guard   :nullable t :types (or keyword string))
	(check-member action  :nullable t :types (or keyword string))
	(check-member offset  :nullable t :types cons)
	(when offset
	  (with-point (x y) offset
		(check-member x   :nullable nil :types number)
		(check-member y   :nullable nil :types number)))
	(check-object font    canvas dict :nullable t :class font-info))
  nil)

(defun uml-transition-spec-to-string (obj)
  (with-slots (trigger guard action) obj
	(format-string trigger
				   (when guard
					 (format-string "[" guard "]"))
				   (when action
					 (format-string "/" action)))))

(defun uml-transition-spec-draw (obj x y align writer)
  (let ((txt (uml-transition-spec-to-string obj))
		(txt-anchor (ecase align
					  ((:left)   "start")
					  ((:center) "middle")
					  ((:right)  "end"))))
	(with-slots (font) obj
	  (write-text-tag x y txt-anchor txt writer :font font))))


;;------------------------------------------------------------------------------
;;
;; macro uml-transition-spec
;;
;;------------------------------------------------------------------------------
(defun make-uml-transition-spec (&rest params)
  (if (= 1 (length params))
	  (let ((param (car params)))
		(cond
		  ((typep   param  'uml-transition-spec) param)
		  ((listp   param) (apply #'make-uml-transition-spec param))
		  (t               (make-uml-transition-spec :trigger param))))
	  (destructuring-bind (&key trigger guard action offset
								(font  nil  font-p)) params
		(make-instance 'uml-transition-spec
					   :trigger   trigger
					   :guard     guard
					   :action    action
					   :offset    offset
					   :font     (if font-p  font  (or *uml-transition-spec-font*
															kaavio:*default-font*))))))

