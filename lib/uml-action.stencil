
(in-package :kaavio-user)

(load-stencil :uml-common-base)
(load-stencil :uml-icon-setting)

(defparameter *uml-action-font*               nil)
(defparameter *uml-action-fill*            :white)
(defparameter *uml-action-stroke*          :black)
(defparameter *uml-action-width*               80)
(defparameter *uml-action-height*              40)
(defparameter *uml-action-corner-r*             6)
(defparameter *uml-action-margin*              10)
(defparameter *uml-action-rake*               nil)
(defparameter *uml-action-filter*             nil)
(defparameter *uml-action-layer*              nil)
(defparameter *uml-action-icon-setting* (make-uml-icon-setting :fill   :none
                                                               :stroke '(:color :black :width 2)
                                                               :size   14
                                                               :pivot  :BR
                                                               :offset '(-10 -10)))


;;------------------------------------------------------------------------------
;;
;; class uml-action
;;
;;------------------------------------------------------------------------------
(defclass uml-action (kaavio:text-shape)
  ((stereotype  :initform nil  :initarg  :stereotype) ; (or nil uml-stereotype-info)
   (contents-p  :initform nil  :initarg  :contents-p) ; boolean
   (rake        :initform nil  :initarg  :rake)       ; boolean
   (corner-r    :initform nil  :initarg  :corner-r)   ; number
   (filter      :initform nil  :initarg  :filter)     ; (or nil keyword)
   (icon        :initform nil  :initarg :icon)))      ; uml-icon-setting

(defmethod initialize-instance :after ((action uml-action) &rest initargs)
  (declare (ignore initargs))
  ;;(format t "initialize-instance :after called.~%")
  (with-slots (stereotype filter icon layer) action
    (setf stereotype (and stereotype (make-uml-stereotype stereotype)))
    (setf filter  (if (eq filter :none)
                      nil
                      (or filter *uml-action-filter* *default-filter*)))
    (setf icon   (make-uml-icon-setting icon))
    (setf layer  (if (eq layer :none)
                     nil
                     (or layer *uml-action-layer* *default-layer*))))
  action)

(defmethod check ((action uml-action) canvas dict)
  ;; this method must call super class' one.
  (call-next-method)
  ;;(format t "check called.~%")
  (with-slots (stereotype corner-r filter icon) action
    (check-object stereotype canvas dict :nullable t :class uml-stereotype-info)
    (check-member corner-r :nullable nil :types number)
    (check-member filter   :nullable   t :types keyword)
    (check-object icon     canvas dict :nullable nil :class uml-icon-setting)))

(defmethod shape-connect-point ((action uml-action) type1 type2 arg)
  (rectangle-connect-point (attribute-center action)
                           (attribute-width  action)
                           (attribute-height action) type1 type2 arg))

;;MEMO : use impelementation of group...
;;(defmethod group-get-canvas ((action uml-action)) ...)

;; override of group::draw-group
(defmethod draw-group ((action uml-action) writer)
  (let ((canvas (group-get-canvas action)))
    (let ((width  (canvas-width  canvas))
          (height (canvas-height canvas)))
      (macrolet ((register-entity (entity)
                   `(check-and-draw-local-entity ,entity canvas writer)))
        (with-slots (stereotype corner-r rake filter icon
                      (text kaavio::text) (font kaavio::font) (margin kaavio::margin)
                      (fill kaavio::fill) (stroke kaavio::stroke) (clip-path kaavio::clip-path)) action
          (let ((*current-clip-path* clip-path))
            ;; draw action body
            (writer-write writer "<g " (write-when filter "filter='url(#" it ")' ") ">")
            (writer-incr-level writer)
            ;;
            (rectangle (make-point (/ width 2) (/ height 2))
                       width height :rx corner-r :stroke stroke :fill fill)
            ;; rake icon
            (when rake
              (with-slots (stroke size pivot offset) icon
                (let ((h size)
                      (w (* size 5/7))
                      (topleft (uml-icon-setting-decide-topleft width height pivot size offset))
                      (kaavio:*default-stroke* stroke))
                  (path `((:move-to ,(x+ topleft (/ size 2)))
                          :relative
                          (:line-to (0 ,h))
                          (:move-to (,(- (/ w 2)) 0))
                          (:line-to (0 ,(- (/ h 2))))
                          (:line-to (,w 0))
                          (:line-to (0 ,(/ h 2))))))))
            ;; draw text
            (let ((cv (uml-draw-textarea action stereotype writer)))
              (declare (ignorable cv))
;              (rect (canvas-center cv)
;                    (canvas-width cv) (canvas-height cv)
;                    :fill '(:color :red :opacity 0.1) :stroke :red)
              )
            (writer-decr-level writer)
            (writer-write writer "</g>"))))))
  nil)

;for debug...
;(defmethod post-draw ((action uml-action) writer)
;  ;;(format t "post-draw called.~%")
;  (call-next-method)
;  (with-slots (contents-p) action
;    (when contents-p
;      (draw-canvas-frame (shape-get-subcanvas action) writer))))
 

(defmethod text-shape-calc-size ((action uml-action))
  ;;(format t "text-shape-calc-size called.~%")
  (multiple-value-bind (width height) (call-next-method)
    (with-slots (stereotype contents-p (font kaavio::font) (margin kaavio::margin)) action
      ;; MEMO: 縦方向の margin は上記 call-next-method の結果に含まれている
      ;(incf height (* margin 2))
      ;; stereotype (if exists).
      (when stereotype
        (let ((font (or (slot-value stereotype 'font) font)))
          (multiple-value-bind (w h)
                (font-calc-textarea font (uml-stereotype-to-string stereotype))
            (setf width (cl:max width (+ w (* margin 2))))
            (incf height h)))))
    (values (cl:max width  *uml-action-width*)
            (cl:max height *uml-action-height*))))

;;MEMO : 下記 text-shape-paragraph-area / shape-get-subcanvas は contents 有無によって
;;       どちらがどちらに依存するかが変わる。気持ち悪いかもしれないが、動作する。

;;MEMO : uml-action の paragraph-area は以下のルール
;;  * contents 無しの場合：サブキャンバスと同じ
;;  * contents ありの場合：キーワード込みの textarea を計算し、margin を上下に足す。
(defmethod text-shape-paragraph-area ((action uml-action))
  ;;(format t "text-shape-paragraph-area called.~%")
  (with-slots (stereotype contents-p
                 (text kaavio::text) (font kaavio::font) (margin kaavio::margin)) action
    (if (not contents-p)
        (shape-get-subcanvas action)
        (multiple-value-bind (w height) (uml-calc-textarea font text stereotype)
          (declare (ignore w))
          (incf height (* margin 2))
          (make-canvas (attribute-topleft action)
                       (attribute-width   action) height)))))

;;MEMO : uml-action のサブキャンバスは以下のルール
;;  * contents 無しの場合：shape と同じ
;;  * contents ありの場合：上記から paragraph-area を除いたもの
(defmethod shape-get-subcanvas ((action uml-action))
  ;;(format t "shape-get-subcanvas called.~%")
  (with-slots (contents-p) action
    (let ((canvas (make-canvas (attribute-topleft action)
                               (attribute-width   action)
                               (attribute-height  action))))
      (if (not contents-p)
          canvas
          (let ((area (text-shape-paragraph-area action)))
            (incf (canvas-top    canvas) (canvas-height area))
            (decf (canvas-height canvas) (canvas-height area))
            canvas)))))

  
;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro uml-action
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{uml-action}} position name ${KEY} stereotype keyword pivot width height margin corner-r rake font fill stroke icon link layer filter id contents
;;
;;<!-- stack:pop li -->
;;
;;${ARGS_AND_VALS}
;;
;;* `position` ---- 描画の基準点を指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `name` ---- アクションの名前を文字列で指定します。
;;* `stereotype` ---- ステレオタイプを明示する場合はステレオタイプ情報を指定します。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `keyword` ---- キーワードを明示する場合はステレオタイプ情報を指定します。 `stereotype` が指定されている場合は無視されます。詳細は [$@ 節](#uml-stereotype-info) を参照してください。
;;* `pivot` ---- `position` で指定した基準点が図形要素のどこにくるように描画するかを指定します。詳細は「[](#座標と位置)」を参照してください。
;;* `width` ---- 幅を自動決定せず、明示的に指定したい場合に数値で指定します。
;;* `height` ---- 高さを自動決定せず、明示的に指定したい場合に数値で指定します。
;;* `margin` ---- テキスト描画における「余白」のサイズです。省略した場合のデフォルト値は 5 です。
;;* `corner-r` ---- 角の丸みの半径を数値で指定します。省略した場合のデフォルト値は 6 です。
;;* `rake` ---- レーキアイコンを表示するか否かを真偽値で指定します。
;;* `font` ---- フォントを指定します。
;;* `fill` ---- 内部の塗り潰しを指定します。
;;* `stroke` ---- 外枠を描画するストロークを指定します
;;* `icon` ---- アイコンの描画設定を変更する場合は指定します。 [$@ 節](#function make-uml-icon-setting) を参照してください。
;;* `link` ---- リンクにする場合、リンク先を指定します。
;;* `layer` ---- レイヤーを指定する場合、その ID をキーワードシンボルで指定します
;;* `filter` ---- フィルタを適用したい場合、その ID をキーワードシンボルで指定します
;;* `id` ---- ID を付与したい場合、その名前をキーワードシンボルで指定します
;;* `contents` ---- 内部をサブキャンバスとした描画をしたい場合、その内容を指定します。 `:contents t` とすることも可能です。詳細は後述します。
;;
;;${DESCRIPTION}
;;
;;　UML アクティビティ図におけるアクションを描画します。スタイルを統一したい場合、
;;with-uml-action-options マクロを使うことができます。
;;
;;${SEE_ALSO}
;;
;;* [$$](#アクティビティ図)
;;* [$$](#uml-action)
;;* with-uml-action-options マクロ
;;
;;${NOTES}
;;
;;* uml-action では `:contents` パラメータを指定した場合、 `name` で指定されたテキストを（中央でなく）上部に描画します。しかし、（ `:contents` パラメータでなく）with-subcanvas-of マクロを使う場合、テキストは中央に描画されてしまいます。これを避けるためには、 `:contents t` を指定してください。これはテキストを上端付近に描画させる効果だけを持ちます。
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro uml-action (position name &key stereotype keyword pivot width height
                                         margin corner-r (rake nil rake-p)
                                         font fill stroke icon link layer filter id contents)
  (let* ((contents-p (not (null contents)))
         (code `(register-entity
                     (make-instance 'uml-action
                                    :position ,position :pivot ,pivot 
                                    :width ,width :height ,height
                                    :text ,name :stereotype ,(or stereotype keyword)
                                    :contents-p ,contents-p
                                    :rake     (if ,rake-p ,rake *uml-action-rake*)
                                    :corner-r (or ,corner-r *uml-action-corner-r*)
                                    :margin   (or ,margin   *uml-action-margin*)
                                    :font     (or ,font *uml-action-font*  *default-font*)
                                    :fill     (or ,fill *uml-action-fill*
                                                  *default-fill*   :white)
                                    :stroke   (or ,stroke *uml-action-stroke*
                                                  *default-stroke* :black)
                                    :clip-path kaavio:*current-clip-path*
                                    :icon     (or ,icon *uml-action-icon-setting*)
                                    :link ,link :layer ,layer :filter ,filter :id ,id))))
    (if (or (null contents)
            (not (listp contents)))
        code
        (let ((g-obj (gensym "OBJ")))
          `(let* ((,g-obj ,code)
                  (canvas (shape-get-subcanvas ,g-obj)))
             (declare (special canvas))
             ,@contents)))))


;;------------------------------------------------------------------------------------- BEGIN TURNUP
;;#### macro with-uml-action-options
;;
;;<!-- stack:push li class='syntax' -->
;;${SYNTAX}
;;
;;* ${{B}{with-uml-action-options}} (${KEY} font fill stroke width height corner-r margin rake icon filter layer) ${BODY} body
;;
;;<!-- stack:pop li -->
;;
;;${DESCRIPTION}
;;
;;　uml-action マクロで描画される図形要素のデフォルトオプションを変更します。キーワード
;;パラメータ群の説明は uml-action マクロを参照してください。
;;
;;　なお、ここで指定する width および height はデフォルトの最低サイズとして使用されます。
;;
;;${SEE_ALSO}
;;
;;* uml-action マクロ
;;
;;${NO_NOTES}
;;
;;--------------------------------------------------------------------------------------- END TURNUP
(defmacro with-uml-action-options ((&key font fill stroke width height
                                         corner-r margin rake icon filter layer) &rest body)
  (labels ((impl (params acc)
             (if (null params)
                 acc
                 (let ((value  (car  params))
                       (symbol (cadr params)))
                   (impl (cddr params)
                         (if (null value)
                             acc
                             (push (list symbol value) acc)))))))
    (let ((lst (impl (list font     '*uml-action-font*
                           fill     '*uml-action-fill*
                           stroke   '*uml-action-stroke*
                           width    '*uml-action-width*
                           height   '*uml-action-height*
                           corner-r '*uml-action-corner-r*
                           margin   '*uml-action-margin*
                           rake     '*uml-action-rake*
                           icon     '*uml-action-icon-setting*
                           filter   '*uml-action-filter*
                           layer    '*uml-action-layer*) nil)))
      `(let ,lst
         ,@body))))
