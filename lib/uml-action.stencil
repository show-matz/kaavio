
(in-package :kaavio-user)

(load-stencil :uml-keyword-info)

(defparameter *uml-action-font*         nil)
(defparameter *uml-action-fill*      :white)
(defparameter *uml-action-stroke*    :black)
(defparameter *uml-action-width*         80)
(defparameter *uml-action-height*        40)
(defparameter *uml-action-corner-r*       6)
(defparameter *uml-action-margin*         5)
(defparameter *uml-action-rake-width*    10)
(defparameter *uml-action-rake-height*   14)
(defparameter *uml-action-rake-margin-x*  4)
(defparameter *uml-action-rake-margin-y*  4)


(defun uml-action-fix-rake-info (param)
  (cond
	((null param) nil)
	((eq t param) (list *uml-action-rake-width*
						*uml-action-rake-height*
						*uml-action-rake-margin-x*
						*uml-action-rake-margin-y*))
	((not (listp param)) param)
	(t (destructuring-bind (&optional w h x y) param
		 (list (or w *uml-action-rake-width*)
			   (or h *uml-action-rake-height*)
			   (or x *uml-action-rake-margin-x*)
			   (or y *uml-action-rake-margin-y*))))))

;;------------------------------------------------------------------------------
;;
;; class uml-action
;;
;;------------------------------------------------------------------------------
(defclass uml-action (kaavio:text-shape)
  ((keyword		:initform nil	:initarg  :keyword)		; (or nil uml-keyword-info)
   (contents-p	:initform nil	:initarg  :contents-p)	; boolean
   (rake		:initform nil	:initarg  :rake)		; boolean
   (corner-r	:initform nil	:initarg  :corner-r)	; number
   (kwd-height	:initform nil)))						; number

(defmethod initialize-instance :after ((action uml-action) &rest initargs)
  (declare (ignore initargs))
  ;;(format t "initialize-instance :after called.~%")
  (with-slots (keyword rake kwd-height) action
	(setf keyword (and keyword (make-uml-keyword keyword)))
	(setf rake    (uml-action-fix-rake-info rake))
	(setf kwd-height (if (null keyword)
						 0
						 (or (and *uml-action-font* (slot-value *uml-action-font* 'kaavio::size))
							 (and *default-font*    (slot-value *default-font*    'kaavio::size))
							 12))))	;;ToDo : これはなんとかしないと。
  action)

(defmethod check ((action uml-action) canvas dict)
  ;;(format t "check called.~%")
  (with-slots (keyword rake corner-r kwd-height) action
	(check-object keyword  canvas dict :nullable t :class uml-keyword-info)
	(check-member rake     :nullable   t :types list)
	(when rake
	  (destructuring-bind (&optional rake/width rake/height
									 rake/x-margin rake/y-margin) rake
		(check-member rake/width    :nullable nil :types number)
		(check-member rake/height   :nullable nil :types number)
		(check-member rake/x-margin :nullable nil :types number)
		(check-member rake/y-margin :nullable nil :types number)))
	(check-member corner-r :nullable nil :types number)
	(check-member kwd-height  :nullable nil :types number))
  ;; this method must call super class' one.
  (call-next-method))

(defmethod shape-connect-point ((action uml-action) type1 type2 arg)
  (rectangle-connect-point (shape-center action)
						   (shape-width  action)
						   (shape-height action) type1 type2 arg))

;;MEMO : use impelementation of group...
;;(defmethod group-get-canvas ((action uml-action)) ...)

;; override of group::draw-group
(defmethod draw-group ((action uml-action) writer)
  ;;(format t "draw-group called.~%")
  (let ((canvas (group-get-canvas action)))
	(let ((top    (canvas-top    canvas))
		  (left   (canvas-left   canvas))
		  (width  (canvas-width  canvas))
		  (height (canvas-height canvas)))
	  (macrolet ((register-entity (entity)
				   `(check-and-draw-local-entity ,entity canvas writer)))
		(with-slots (keyword kwd-height corner-r rake
						 kaavio::margin kaavio::fill kaavio::stroke) action
		  ;; draw action body
		  (rectangle (make-point (/ width 2) (/ height 2))
					 width height :rx corner-r :ry corner-r
					 :fill kaavio::fill :stroke kaavio::stroke)
		  ;; rake icon
		  (when rake
			(destructuring-bind (w h xm ym) rake
			  (let ((*default-stroke* (make-stroke :width 2 :base kaavio::stroke)))
				(path `((:move-to (,(- width xm (/ w 2)) ,(- height ym h)))
						:relative
						(:line-to (0 ,h))
						(:move-to (,(- (/ w 2)) 0))
						(:line-to (0 ,(- (/ h 2))))
						(:line-to (,w 0))
						(:line-to (0 ,(/ h 2))))))))
		  ;; draw keyword
		  (when keyword
			(uml-keyword-draw keyword
							  (+ left (/ width 2))
							  (+ top  kaavio::margin kwd-height) :center writer))
		  ;; draw text
		  (call-next-method)))))
  nil)


;for debug...
;(defmethod post-draw ((action uml-action) writer)
;  ;;(format t "post-draw called.~%")
;  (call-next-method)
;  (with-slots (contents-p) action
;	(when contents-p
;	  (draw-canvas-frame (shape-get-subcanvas action) writer))))
 

(defmethod text-shape-calc-size ((action uml-action))
  ;;(format t "text-shape-calc-size called.~%")
  (multiple-value-bind (width height) (call-next-method)
	(with-slots (keyword contents-p
						 (margin kaavio::margin)) action
	  ;; ToDo : margin は上記 call-next-method の結果に含まれているはずだが、何故か必要。
	  (incf height (* margin 2))
	  ;; keyword (if exists).
	  (when keyword
		(with-slots (font) keyword
		  (multiple-value-bind (w h)
				(font-calc-textarea font (uml-keyword-to-string keyword))
			(setf width (cl:max width (+ w (* margin 2))))
			(incf height h)))))
	(values (cl:max width  *uml-action-width*)
			(cl:max height *uml-action-height*))))

(defmethod text-shape-paragraph-area ((action uml-action))
  ;;(format t "text-shape-paragraph-area called.~%")
  (let ((canvas (call-next-method)))
	(with-slots (text contents-p kwd-height
					  kaavio::font kaavio::margin) action
	  (incf (canvas-top canvas) (/ kwd-height 2))
	  (when contents-p
		(multiple-value-bind (w h)
				(font-calc-textarea kaavio::font text)
		  (declare (ignore w))
		  (setf (canvas-height canvas)
				(+ kwd-height (* 2 kaavio::margin) h)))))
	canvas))

(defmethod shape-get-subcanvas ((action uml-action))
  ;;(format t "shape-get-subcanvas called.~%")
  (with-slots (kaavio::margin) action
	(let ((partition (+ kaavio::margin
						(canvas-height (text-shape-paragraph-area action)))))
	  (make-canvas (point/y+ (shape-topleft action) partition)
				   (shape-width action)
				   (- (shape-height action) partition)))))

  
;;------------------------------------------------------------------------------
;;
;; macro uml-action
;;
;;------------------------------------------------------------------------------
(defmacro uml-action (center text &key keyword width height
									margin corner-r rake
									font fill stroke link layer id contents)
  (let* ((contents-p (not (null contents)))
		 (code `(register-entity
					 (make-instance 'uml-action
									:center ,center
									:width ,width :height ,height
									:text ,text :keyword ,keyword
									:contents-p ,contents-p :rake ,rake
									:corner-r (or ,corner-r *uml-action-corner-r*)
									:margin   (or ,margin   *uml-action-margin*)
									:font     ,font 
									:fill     (or ,fill *uml-action-fill*
												  *default-fill*   :white)
									:stroke   (or ,stroke *uml-action-stroke*
												  *default-stroke* :black)
									:link ,link :layer ,layer :id ,id))))
	(if (null contents)
		code
		(let ((g-obj (gensym "OBJ")))
		  `(let* ((,g-obj ,code)
				  (canvas (shape-get-subcanvas ,g-obj)))
			 (declare (special canvas))
			 ,@contents)))))

