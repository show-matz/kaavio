(require :kaavio)

(in-package :kaavio)    ;;ToDo : :kaavio-user でもいける？

(defun kaavio-main (self args)
  (handler-bind ((condition
				  (lambda (c)
					(let ((is-warn (typep c 'warning)))
					  (format *error-output*
							  "~A : ~A~%" (if is-warn :WARNING :ERROR)
							  (with-output-to-string (stream)
								(let ((*print-escape* nil))
								  (print-object c stream))))
					  (if is-warn
						  (muffle-warning)
						  (return-from kaavio-main nil))))))
	(if (string= (car args) "--help")
		(format t "usage : ~A [-IPATH]... [INFILE]~%" self)
		(labels ((is-I-option (param)
				   (and (< 2 (length param))
						(string= "-I" (subseq param 0 2))))
				 (fix-path (param)
				   (let ((path (subseq param 2)))
					 (if (char= #\/ (char path (1- (length path))))
						 path
						 (concatenate 'string path "/"))))
				 (retrieve-include-paths (args &optional paths)
				   (if (null args)
					   (values (nreverse paths) nil)
					   (let ((param (car args)))
						 (if (not (is-I-option param))
							 (values (nreverse paths) args)
							 (retrieve-include-paths (cdr args)
													 (cons (fix-path param) paths)))))))
		  (multiple-value-bind (paths args) (retrieve-include-paths args)
			(let ((kaavio:*include-paths* paths))
			  (if (< 1 (length args))
				  (kaavio::throw-exception "Invalid parameter count.")
				  (labels ((read-whole (stream acc)
							 (let ((lst (read stream nil nil)))
							   (if (null lst)
								   (cons 'progn (nreverse acc))
								   (read-whole stream (cons lst acc)))))
						   (impl (stream)
							 (let ((*package* (find-package :kaavio-user)))
							   (write-string (eval (read-whole stream nil))))))
					(if (zerop (length args))
						(impl *standard-input*)
						(with-open-file (stream (car args) :direction :input)
						  (impl stream)))))))))))
