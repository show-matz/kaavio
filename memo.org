* memo
#+BEGIN_SRC lisp
  (progn
    (require :kaavio)
    (load "@memo.lisp"))

  (update-svg-files "sample/" :all t)
  (update-svg-files "sample/UML/" :all t)
#+END_SRC

* memo 2
(require :sb-posix)
(require :kaavio)
(in-package :kaavio-user)

;; lib 配下の *.stencil ファイルを検索して自動登録する
(let ((kaavio:*include-paths* (list "lib/")))
  (dolist (pathname (directory "lib/*.stencil"))
	(let ((kwd (intern (string-upcase (pathname-name pathname)) 'keyword)))
	  (format t "loading ~A component...~%" kwd)
	  (kaavio:load-stencil kwd))))

(defun save-svg (file-name svg)
  (with-open-file (st file-name :direction :output :if-exists :supersede)
	(write-string svg st)))



(save-svg
 "~/sandbox/kaavio/tmp.svg"
 (diagram (400 600)
   (grid)
   (drop-shadow)
   (with-theme (:uml-activity-default)
	 (with-options (:filter :drop-shadow)
	   (uml-frame canvas.center (- canvas.width 20) (- canvas.height 20) "xxx") 
	   (with-subcanvas-of ($1.id)
		 (uml-activity-start '(20 60) :id :start)
		 (uml-action (x+ start.center 150) "action1" :id :act1)
		 (uml-fork   (y+ $1.center 80) :v :length 160 :id :fork)
		 (uml-action (xy+ $1.center -60 70) "action2a" :id :act2a)
		 (uml-action (xy+ $2.center  60 70) "action3a" :id :act3a)
		 (uml-signal (y+  $2.center     80) :send "action2b" :id :act2b)
		 (uml-signal (y+  $2.center     80) :receive "action3b" :direction :left :id :act3b)
		 (uml-join   (y+ fork.center 250) :v :length 160 :id :join)
		 (uml-action (y+ join.center    60) "action4" :id :act4)
		 (uml-note (x+ act1.center 140) 100 60 "memo" :targets :act1)
		 (uml-activity-final (x+ act4.center 140) :radius 13 :id :final)
		 (uml-flow-final     (y+ act4.center  80) :radius 13 :id :abort)))
	 (uml-flow :start :act1)
	 (uml-flow :act1  :fork)
	 (uml-flow :fork  :act2a :style :B1T)
	 (uml-flow :fork  :act3a :style :B3T)
	 (uml-flow :act2a  :act2b)
	 (uml-flow :act3a  :act3b)
	 (uml-flow :act2b  :join :style :BT1)
	 (uml-flow :act3b  :join :style :BT3)
	 (uml-flow :join   :act4)
	 (uml-flow :act4  :final)
	 (uml-flow :act4 :abort))))


;; single-block-arrow
(save-svg
 "~/sandbox/kaavio/tmp.svg"
 (diagram (800 400)
    (grid)
    (drop-shadow)
	(let ((pt1 '(100 100))
		  (pt2 '(500 130)))
	  (with-options (:fill '(:color :red))
		(circle pt1 3 :stroke :none)
		(circle pt2 3 :stroke :none)
		(line `(,pt1 ,pt2) :stroke (make-stroke :color :red :dasharray '(4 4))))
	  (block-arrow1 pt1 pt2 20
					:fill (make-fill :color :skyblue :opacity 0.3)
					:stroke :navy :filter :drop-shadow))))



(save-svg
 "~/sandbox/kaavio/tmp.svg"
 (diagram (800 800)		  
	(with-subcanvas ('(100 100 0) 600 600)
	  (rect canvas.center canvas.width canvas.height :fill :white :stroke :black)
	  (let ((*default-fill*   (make-fill   :skyblue))
			(*default-stroke* (make-stroke :blue)))
		(folder '(300 300) "top~%folder"
				:tab-width 100 :margin 20 :width 300 :height 300 :valign :top :align :left
				:contents
				((folder '(200 100) "sub-folder1" :margin 20 :id :folder1)
				 (folder '(100 200) "sub-folder2" :margin 20 :id :folder2)
				 (connect :folder1 :folder2 :stroke :black :end2 :arrow)))))))

(save-svg
 "~/sandbox/kaavio/tmp.svg"
 (diagram (800 400)
	(drop-shadow :color-matrix '(0 0 0 0   0
								 0 0 0 0   0
								 0 0 0 0   0
								 0 0 0 0.7 0))
	(glow-shadow :color-matrix '(0 0 0 0   0
								 0 0 0 0.9 0
								 0 0 0 0.9 0
								 0 0 0 1   0))
	(with-subcanvas ('(100 50 0) 600 300)
	  (rect canvas.center canvas.width canvas.height :fill :white :stroke :black)
	  (with-options (:fill '(:color :skyblue))
		(let ((*default-shape-filter* :drop-shadow)
			  (*default-text-filter*  :glow-shadow))
		  (rect (xy+ canvas.center -150  50) 100 100 :stroke :navy :id :a)
		  (text (y+ $1.bottom 20) "test text 1" :align :center)
;		  (path '((:move-to (20 20))
;				  (:line-to (40 40))
;				  (:line-to (10 40)) :close-path) :filter :drop-shadow)
		  (rect (xy+ canvas.center  150 -50) 100 100 :stroke :navy :id :b)
		  (text (y+ $1.bottom 20) "test text 2" :align :center)
;		  (balloon (y+ canvas.center 100) "test~%balloon." (y+ a.right +30) :fill :white :stroke :black)
		  (line '((10 10) (30 30) (100 30)) :stroke :black :filter :drop-shadow)
		  (arc '(50 50) 30 30 110 :stroke :blue :filter :drop-shadow)
		  (paragraph canvas.center "foo~%bar~%quux" :filter :glow-shadow)
		  (textbox '(150 80) "test textbox.~%multi line OK." :rx 15 :ry 5 :filter :drop-shadow :rotate 30)
		  (connect :a :b :style :RL :end1 :triangle :end2 :arrow :filter :glow-shadow))))))

(save-svg
 "~/sandbox/kaavio/tmp.svg"
 (diagram (800 400)
    (grid)
    (drop-shadow)
	(explosion2 canvas.center 180 150 "foo~%bar~%quux" :fill :pink :stroke :red :filter :drop-shadow)))

;; single-block-arrow
(save-svg
 "~/sandbox/kaavio/tmp.svg"
 (diagram (800 400)
    (grid)
    (drop-shadow)
	(let ((pt1 '(100 100))
		  (pt2 '(500 150)))
	  (with-options (:fill '(:color :red))
		(circle pt1 3 :stroke :none)
		(circle pt2 3 :stroke :none)
		(line `(,pt1 ,pt2) :stroke (make-stroke :color :red :dasharray '(4 4))))
	  (let* ((width  40)
			 (length 90)
			 (size   80)
			 (sin1 (kaavio::math/sin2 pt1 pt2))
			 (cos1 (kaavio::math/cos2 pt1 pt2))
			 (pt3  (xy+ pt2 (* -1   length    cos1)	(* -1   length    sin1)))
			 (k1   (xy+ pt1 (* -1 (/ width 2) sin1) (*    (/ width 2) cos1)))
			 (k2   (xy+ pt1 (*    (/ width 2) sin1) (* -1 (/ width 2) cos1)))
			 (k3   (xy+ pt3 (*    (/ width 2) sin1) (* -1 (/ width 2) cos1)))
			 (k4   (xy+ pt3 (*    (/ size  2) sin1) (* -1 (/ size  2) cos1)))
			 (k5   (xy+ pt3 (* -1 (/ size  2) sin1) (*    (/ size  2) cos1)))
			 (k6   (xy+ pt3 (* -1 (/ width 2) sin1) (*    (/ width 2) cos1))))
		(circle pt3 3 :fill :brown :stroke :none)
		(circle k1  3 :fill :white :stroke :blue)
		(circle k2  3 :fill :white :stroke :blue)
		(circle k3  3 :fill :white :stroke :blue)
		(circle k4  3 :fill :white :stroke :blue)
		(circle k5  3 :fill :white :stroke :blue)
		(circle k6  3 :fill :white :stroke :blue)
		(polygon `(,k1 ,k2 ,k3 ,k4 ,pt2 ,k5 ,k6)
				 :fill (make-fill :color :white :opacity 0.3) :stroke :black :filter :drop-shadow)))))

;; double-block-arrow
(save-svg
 "~/sandbox/kaavio/tmp.svg"
 (diagram (800 400)
    (grid)
    (drop-shadow)
	(let ((pt1 '(100 100))
		  (pt2 '(500 180)))
	  (with-options (:fill '(:color :red))
		(circle pt1 3 :stroke :none)
		(circle pt2 3 :stroke :none)
		(line `(,pt1 ,pt2) :stroke (make-stroke :color :red :dasharray '(4 4))))
	  (let* ((width  40)
			 (length 90)
			 (size   80)
			 (sin1 (kaavio::math/sin2 pt1 pt2))
			 (cos1 (kaavio::math/cos2 pt1 pt2))
			 (pt3  (xy+ pt2 (* -1   length    cos1)	(* -1   length    sin1)))
			 (pt4  (xy+ pt1 (*      length    cos1)	(*      length    sin1)))
			 (k1   (xy+ pt4 (*    (/ size  2) sin1) (* -1 (/ size  2) cos1)))
			 (k2   (xy+ pt4 (*    (/ width 2) sin1) (* -1 (/ width 2) cos1)))
			 (k3   (xy+ pt3 (*    (/ width 2) sin1) (* -1 (/ width 2) cos1)))
			 (k4   (xy+ pt3 (*    (/ size  2) sin1) (* -1 (/ size  2) cos1)))
			 (k5   (xy+ pt3 (* -1 (/ size  2) sin1) (*    (/ size  2) cos1)))
			 (k6   (xy+ pt3 (* -1 (/ width 2) sin1) (*    (/ width 2) cos1)))
			 (k7   (xy+ pt4 (* -1 (/ width 2) sin1) (*    (/ width 2) cos1)))
			 (k8   (xy+ pt4 (* -1 (/ size  2) sin1) (*    (/ size  2) cos1))))
		(circle pt3 3 :fill :brown :stroke :none)
		(circle pt4 3 :fill :brown :stroke :none)
		(circle k1  3 :fill :yellow :stroke :blue)
		(circle k2  3 :fill :none :stroke :blue)
		(circle k3  3 :fill :none :stroke :blue)
		(circle k4  3 :fill :none :stroke :blue)
		(circle k5  3 :fill :none :stroke :blue)
		(circle k6  3 :fill :none :stroke :blue)
		(circle k7  3 :fill :none :stroke :blue)
		(circle k8  3 :fill :none :stroke :blue)
		(path `((:move-to ,pt1) (:line-to ,pt2)) :fill :none :stroke :black)
		(text canvas.center "This is text.")
		(polygon `(,pt1 ,k1 ,k2 ,k3 ,k4 ,pt2 ,k5 ,k6 ,k7 ,k8)
				 :fill (make-fill :color :white :opacity 0.3) :stroke :black :filter :drop-shadow)))))

* todo
** lib [36/39]

  - [X] grid.stencil
  - [X] textbox.stencil
  - [X] uml-action			;ToDo : add ':link' & render rake icon...
  - [X] uml-activity-end
  - [X] uml-actor
  - [X] uml-aggregation
  - [X] uml-association
  - [ ] uml-class
  - [X] uml-component
  - [X] uml-composition
  - [X] uml-connector   □--->(A)    (A)--->□
  - [X] uml-decision-merge
  - [X] uml-dependency
  - [ ] uml-expansion-region
  - [X] uml-flow-begin
  - [X] uml-flow-end
  - [X] uml-flow
  - [X] uml-fork-join
  - [X] uml-generalization
  - [X] uml-interface
  - [X] uml-keyword-info
  - [X] uml-multiplicity-info
  - [X] uml-node
  - [X] uml-note
  - [X] uml-package
  - [ ] uml-partition
  - [X] uml-pin
  - [X] uml-realization
  - [X] uml-role-info
  - [X] uml-signal-receipt
  - [X] uml-signal-sending
  - [X] uml-state-begin
  - [X] uml-state-end
  - [X] uml-state-history
  - [X] uml-state
  - [X] uml-time-signal
  - [X] uml-transition-spec
  - [X] uml-transition
  - [X] uml-usecase.stencil

** misc [1/2]

  - [X] (declare (special canvas)) は削除できそう ⇒ できなかった
  - [ ] uml-component のアイコンとテキストが重なる問題
  - [ ] フォントの幅や高さを取る必要がある局面では、class 指定だと何もできない‥‥‥
		⇒ stylesheet / style-info にアクセスする仕組みを用意すれば解決できるかも！

** memo

[[./tmp.svg]]

